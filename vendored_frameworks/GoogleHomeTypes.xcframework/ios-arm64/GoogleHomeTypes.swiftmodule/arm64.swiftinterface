// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-bare-slash-regex -module-name GoogleHomeTypes -package-name googlemac/iPhone/HomePlatform/SDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import GoogleHomeSDK
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension GoogleHomeTypes.Matter {
  public struct AccessControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.AccessControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.AccessControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.AccessControlTrait
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acl) public var acl: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct]? {
      get
    }
    public var $acl: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extension) public var `extension`: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct]? {
      get
    }
    public var $extension: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($subjectsPerAccessControlEntry) public var subjectsPerAccessControlEntry: Swift.UInt16? {
      get
    }
    public var $subjectsPerAccessControlEntry: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetsPerAccessControlEntry) public var targetsPerAccessControlEntry: Swift.UInt16? {
      get
    }
    public var $targetsPerAccessControlEntry: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($accessControlEntriesPerFabric) public var accessControlEntriesPerFabric: Swift.UInt16? {
      get
    }
    public var $accessControlEntriesPerFabric: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($commissioningARL) public var commissioningARL: [GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct]? {
      get
    }
    public var $commissioningARL: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($arl) public var arl: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct]? {
      get
    }
    public var $arl: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.AccessControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.AccessControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.AccessControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AccessControlTrait, rhs: GoogleHomeTypes.Matter.AccessControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AccessControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.AccessControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var aclIsSet: Swift.Bool {
      get
    }
    final public func setAcl(_ value: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct])
    final public func clearAcl()
    final public var extensionIsSet: Swift.Bool {
      get
    }
    final public func setExtension(_ value: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct])
    final public func clearExtension()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public struct AccessRestrictionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let type: GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionTypeEnum
    public let id: Swift.UInt32?
    public init(type: GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionTypeEnum, id: Swift.UInt32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct CommissioningAccessRestrictionEntryStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let endpoint: Swift.UInt16
    public let cluster: Swift.UInt32
    public let restrictions: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct]
    public init(endpoint: Swift.UInt16, cluster: Swift.UInt32, restrictions: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct, b: GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AccessRestrictionEntryStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let endpoint: Swift.UInt16
    public let cluster: Swift.UInt32
    public let restrictions: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct]
    public let fabricIndex: Swift.UInt8
    public init(endpoint: Swift.UInt16, cluster: Swift.UInt32, restrictions: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct], fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AccessControlTargetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let cluster: Swift.UInt32?
    public let endpoint: Swift.UInt16?
    public let deviceType: Swift.UInt32?
    public init(cluster: Swift.UInt32?, endpoint: Swift.UInt16?, deviceType: Swift.UInt32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AccessControlEntryStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let privilege: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryPrivilegeEnum
    public let authMode: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryAuthModeEnum
    public let subjects: [Swift.UInt64]?
    public let targets: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct]?
    public let fabricIndex: Swift.UInt8
    public init(privilege: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryPrivilegeEnum, authMode: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryAuthModeEnum, subjects: [Swift.UInt64]?, targets: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct]?, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AccessControlExtensionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let data: Foundation.Data
    public let fabricIndex: Swift.UInt8
    public init(data: Foundation.Data, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public struct AccessControlEntryChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let adminNodeID: Swift.UInt64?
      public let adminPasscodeID: Swift.UInt16?
      public let changeType: GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum?
      public let latestValue: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct?
      public let fabricIndex: Swift.UInt8?
      public init(adminNodeID: Swift.UInt64?, adminPasscodeID: Swift.UInt16?, changeType: GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum?, latestValue: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct?, fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent.Payload, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AccessControlExtensionChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let adminNodeID: Swift.UInt64?
      public let adminPasscodeID: Swift.UInt16?
      public let changeType: GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum?
      public let latestValue: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct?
      public let fabricIndex: Swift.UInt8?
      public init(adminNodeID: Swift.UInt64?, adminPasscodeID: Swift.UInt16?, changeType: GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum?, latestValue: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct?, fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent.Payload, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent, b: GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct FabricRestrictionReviewUpdateEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let token: Swift.UInt64?
      public let instruction: Swift.String?
      public let arlRequestFlowUrl: Swift.String?
      public let fabricIndex: Swift.UInt8?
      public init(token: Swift.UInt64?, instruction: Swift.String?, arlRequestFlowUrl: Swift.String?, fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent.Payload, b: GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent, b: GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public typealias ReviewFabricRestrictionsCommandResponse = GoogleHomeTypes.Matter.AccessControlTrait.ReviewFabricRestrictionsCommand.Response
  public var supportsReviewFabricRestrictionsCommand: Swift.Bool {
    get
  }
  public func reviewFabricRestrictions(arl: [GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct]) async throws -> GoogleHomeTypes.Matter.AccessControlTrait.ReviewFabricRestrictionsCommandResponse
  public func reviewFabricRestrictionsBatchable(arl: [GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.AccessControlTrait.ReviewFabricRestrictionsCommandResponse>
  public struct ReviewFabricRestrictionsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let token: Swift.UInt64
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public enum AccessControlEntryAuthModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case pase
    case `case`
    case group
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryAuthModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum AccessControlEntryPrivilegeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case view
    case proxyView
    case operate
    case manage
    case administer
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryPrivilegeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum AccessRestrictionTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case attributeAccessForbidden
    case attributeWriteForbidden
    case commandForbidden
    case eventForbidden
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ChangeTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case changed
    case added
    case removed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let `extension`: GoogleHomeTypes.Matter.AccessControlTrait.Feature
    public static let managedDevice: GoogleHomeTypes.Matter.AccessControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.AccessControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.AccessControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case acl
    case `extension`
    case subjectsPerAccessControlEntry
    case targetsPerAccessControlEntry
    case accessControlEntriesPerFabric
    case commissioningARL
    case arl
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AccessControlTrait {
  public var acl: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct]> {
    get
  }
  public var `extension`: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct]> {
    get
  }
  public var subjectsPerAccessControlEntry: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var targetsPerAccessControlEntry: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var accessControlEntriesPerFabric: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var commissioningARL: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct]> {
    get
  }
  public var arl: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.AccessControlTrait {
  final public func setAcl(_ value: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct])
  final public func setExtension(_ value: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct])
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case adminNodeID
    case adminPasscodeID
    case changeType
    case latestValue
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryChangedEvent {
  public var adminNodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var adminPasscodeID: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var changeType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum> {
    get
  }
  public var latestValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case adminNodeID
    case adminPasscodeID
    case changeType
    case latestValue
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionChangedEvent {
  public var adminNodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var adminPasscodeID: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var changeType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.ChangeTypeEnum> {
    get
  }
  public var latestValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case token
    case instruction
    case arlRequestFlowUrl
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AccessControlTrait.FabricRestrictionReviewUpdateEvent {
  public var token: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var instruction: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var arlRequestFlowUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.ReviewFabricRestrictionsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arl
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.ReviewFabricRestrictionsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.ReviewFabricRestrictionsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AccessControlTrait {
  public static func reviewFabricRestrictions(arl: [GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct]) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case type
    case id
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct {
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionTypeEnum> {
    get
  }
  public var id: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case endpoint
    case cluster
    case restrictions
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AccessControlTrait.CommissioningAccessRestrictionEntryStruct {
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var cluster: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var restrictions: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case endpoint
    case cluster
    case restrictions
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionEntryStruct {
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var cluster: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var restrictions: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.AccessRestrictionStruct]> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case cluster
    case endpoint
    case deviceType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct {
  public var cluster: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var deviceType: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case privilege
    case authMode
    case subjects
    case targets
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryStruct {
  public var privilege: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryPrivilegeEnum> {
    get
  }
  public var authMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AccessControlTrait.AccessControlEntryAuthModeEnum> {
    get
  }
  public var subjects: GoogleHomeSDK.TypedExpression<[Swift.UInt64]?> {
    get
  }
  public var targets: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AccessControlTrait.AccessControlTargetStruct]?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case data
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AccessControlTrait.AccessControlExtensionStruct {
  public var data: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct AccountLoginTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.AccountLoginTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.AccountLoginTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AccountLoginTrait, rhs: GoogleHomeTypes.Matter.AccountLoginTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AccountLoginTrait.Attributes, rhs: GoogleHomeTypes.Matter.AccountLoginTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public struct LoggedOutEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let node: Swift.UInt64?
      public init(node: Swift.UInt64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent.Payload, b: GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent, b: GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public typealias GetSetupPinCommandResponse = GoogleHomeTypes.Matter.AccountLoginTrait.GetSetupPinCommand.Response
  public var supportsGetSetupPinCommand: Swift.Bool {
    get
  }
  public func getSetupPin(tempAccountIdentifier: Swift.String) async throws -> GoogleHomeTypes.Matter.AccountLoginTrait.GetSetupPinCommandResponse
  public func getSetupPinBatchable(tempAccountIdentifier: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.AccountLoginTrait.GetSetupPinCommandResponse>
  public struct GetSetupPinCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let setupPin: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public var supportsLoginCommand: Swift.Bool {
    get
  }
  public func login(tempAccountIdentifier: Swift.String, setupPin: Swift.String, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.AccountLoginTrait.LoginCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func loginBatchable(tempAccountIdentifier: Swift.String, setupPin: Swift.String, optionalArgsProvider: ((GoogleHomeTypes.Matter.AccountLoginTrait.LoginCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct LoginCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var nodeIsSet: Swift.Bool {
        get
      }
      final public func setNode(_ value: Swift.UInt64)
      final public func clearNode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public var supportsLogoutCommand: Swift.Bool {
    get
  }
  public func logout(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.AccountLoginTrait.LogoutCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func logoutBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.AccountLoginTrait.LogoutCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct LogoutCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var nodeIsSet: Swift.Bool {
        get
      }
      final public func setNode(_ value: Swift.UInt64)
      final public func clearNode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccountLoginTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccountLoginTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AccountLoginTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case node
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AccountLoginTrait.LoggedOutEvent {
  public var node: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
}
extension GoogleHomeTypes.Matter.AccountLoginTrait.GetSetupPinCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case tempAccountIdentifier
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccountLoginTrait.GetSetupPinCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccountLoginTrait.GetSetupPinCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AccountLoginTrait.LoginCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case tempAccountIdentifier
    case setupPin
    case node
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccountLoginTrait.LoginCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccountLoginTrait.LoginCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AccountLoginTrait.LogoutCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case node
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AccountLoginTrait.LogoutCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AccountLoginTrait.LogoutCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AccountLoginTrait {
  public static func getSetupPin(tempAccountIdentifier: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func login(tempAccountIdentifier: Swift.String, setupPin: Swift.String, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.AccountLoginTrait.LoginCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func logout(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.AccountLoginTrait.LogoutCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct ActionsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ActionsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($actionList) public var actionList: [GoogleHomeTypes.Matter.ActionsTrait.ActionStruct]? {
      get
    }
    public var $actionList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ActionsTrait.ActionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($endpointLists) public var endpointLists: [GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct]? {
      get
    }
    public var $endpointLists: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($setupUrl) public var setupUrl: Swift.String? {
      get
    }
    public var $setupUrl: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ActionsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ActionsTrait, rhs: GoogleHomeTypes.Matter.ActionsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ActionsTrait.Attributes, rhs: GoogleHomeTypes.Matter.ActionsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public struct ActionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let actionID: Swift.UInt16
    public let name: Swift.String
    public let type: GoogleHomeTypes.Matter.ActionsTrait.ActionTypeEnum
    public let endpointListID: Swift.UInt16
    public let supportedCommands: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public let state: GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum
    public init(actionID: Swift.UInt16, name: Swift.String, type: GoogleHomeTypes.Matter.ActionsTrait.ActionTypeEnum, endpointListID: Swift.UInt16, supportedCommands: GoogleHomeTypes.Matter.ActionsTrait.CommandBits, state: GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ActionsTrait.ActionStruct, b: GoogleHomeTypes.Matter.ActionsTrait.ActionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EndpointListStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let endpointListID: Swift.UInt16
    public let name: Swift.String
    public let type: GoogleHomeTypes.Matter.ActionsTrait.EndpointListTypeEnum
    public let endpoints: [Swift.UInt16]
    public init(endpointListID: Swift.UInt16, name: Swift.String, type: GoogleHomeTypes.Matter.ActionsTrait.EndpointListTypeEnum, endpoints: [Swift.UInt16])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct, b: GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public struct StateChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let actionID: Swift.UInt16?
      public let invokeID: Swift.UInt32?
      public let newState: GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum?
      public init(actionID: Swift.UInt16?, invokeID: Swift.UInt32?, newState: GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent.Payload, b: GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent, b: GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ActionFailedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let actionID: Swift.UInt16?
      public let invokeID: Swift.UInt32?
      public let newState: GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum?
      public let error: GoogleHomeTypes.Matter.ActionsTrait.ActionErrorEnum?
      public init(actionID: Swift.UInt16?, invokeID: Swift.UInt32?, newState: GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum?, error: GoogleHomeTypes.Matter.ActionsTrait.ActionErrorEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent.Payload, b: GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent, b: GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsInstantActionCommand: Swift.Bool {
    get
  }
  public func instantAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.InstantActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func instantActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.InstantActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct InstantActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsInstantActionWithTransitionCommand: Swift.Bool {
    get
  }
  public func instantActionWithTransition(actionID: Swift.UInt16, transitionTime: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.InstantActionWithTransitionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func instantActionWithTransitionBatchable(actionID: Swift.UInt16, transitionTime: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.InstantActionWithTransitionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct InstantActionWithTransitionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsStartActionCommand: Swift.Bool {
    get
  }
  public func startAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.StartActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func startActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.StartActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsStartActionWithDurationCommand: Swift.Bool {
    get
  }
  public func startActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.StartActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func startActionWithDurationBatchable(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.StartActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartActionWithDurationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsStopActionCommand: Swift.Bool {
    get
  }
  public func stopAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.StopActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func stopActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.StopActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsPauseActionCommand: Swift.Bool {
    get
  }
  public func pauseAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.PauseActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func pauseActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.PauseActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct PauseActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsPauseActionWithDurationCommand: Swift.Bool {
    get
  }
  public func pauseActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.PauseActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func pauseActionWithDurationBatchable(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.PauseActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct PauseActionWithDurationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsResumeActionCommand: Swift.Bool {
    get
  }
  public func resumeAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.ResumeActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func resumeActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.ResumeActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResumeActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsEnableActionCommand: Swift.Bool {
    get
  }
  public func enableAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.EnableActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func enableActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.EnableActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsEnableActionWithDurationCommand: Swift.Bool {
    get
  }
  public func enableActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.EnableActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func enableActionWithDurationBatchable(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.EnableActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableActionWithDurationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsDisableActionCommand: Swift.Bool {
    get
  }
  public func disableAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.DisableActionCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func disableActionBatchable(actionID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.DisableActionCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DisableActionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public var supportsDisableActionWithDurationCommand: Swift.Bool {
    get
  }
  public func disableActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.DisableActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func disableActionWithDurationBatchable(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: ((GoogleHomeTypes.Matter.ActionsTrait.DisableActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DisableActionWithDurationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var invokeIDIsSet: Swift.Bool {
        get
      }
      final public func setInvokeID(_ value: Swift.UInt32)
      final public func clearInvokeID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public enum ActionErrorEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case interrupted
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActionsTrait.ActionErrorEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ActionStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case inactive
    case active
    case paused
    case disabled
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ActionTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case other
    case scene
    case sequence
    case automation
    case exception
    case notification
    case alarm
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActionsTrait.ActionTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EndpointListTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case other
    case room
    case zone
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActionsTrait.EndpointListTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public struct CommandBits : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let instantAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let instantActionWithTransition: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let startAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let startActionWithDuration: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let stopAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let pauseAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let pauseActionWithDuration: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let resumeAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let enableAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let enableActionWithDuration: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let disableAction: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public static let disableActionWithDuration: GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public typealias Element = GoogleHomeTypes.Matter.ActionsTrait.CommandBits
    public typealias RawValue = Swift.UInt16
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionList
    case endpointLists
    case setupUrl
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ActionsTrait {
  public var actionList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ActionsTrait.ActionStruct]> {
    get
  }
  public var endpointLists: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct]> {
    get
  }
  public var setupUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case newState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ActionsTrait.StateChangedEvent {
  public var actionID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var invokeID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var newState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case newState
    case error
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ActionsTrait.ActionFailedEvent {
  public var actionID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var invokeID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var newState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum> {
    get
  }
  public var error: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.ActionErrorEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait.InstantActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.InstantActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.InstantActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.InstantActionWithTransitionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case transitionTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.InstantActionWithTransitionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.InstantActionWithTransitionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.StartActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.StartActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.StartActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.StartActionWithDurationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case duration
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.StartActionWithDurationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.StartActionWithDurationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.StopActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.StopActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.StopActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.PauseActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.PauseActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.PauseActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.PauseActionWithDurationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case duration
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.PauseActionWithDurationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.PauseActionWithDurationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.ResumeActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.ResumeActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.ResumeActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.EnableActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.EnableActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.EnableActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.EnableActionWithDurationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case duration
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.EnableActionWithDurationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.EnableActionWithDurationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.DisableActionCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.DisableActionCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.DisableActionCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait.DisableActionWithDurationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case invokeID
    case duration
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.DisableActionWithDurationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.DisableActionWithDurationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ActionsTrait {
  public static func instantAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.InstantActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func instantActionWithTransition(actionID: Swift.UInt16, transitionTime: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.InstantActionWithTransitionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func startAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.StartActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func startActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.StartActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func stopAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.StopActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func pauseAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.PauseActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func pauseActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.PauseActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func resumeAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.ResumeActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func enableAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.EnableActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func enableActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.EnableActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func disableAction(actionID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.DisableActionCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func disableActionWithDuration(actionID: Swift.UInt16, duration: Swift.UInt32, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ActionsTrait.DisableActionWithDurationCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ActionsTrait.ActionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case actionID
    case name
    case type
    case endpointListID
    case supportedCommands
    case state
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.ActionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.ActionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ActionsTrait.ActionStruct {
  public var actionID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.ActionTypeEnum> {
    get
  }
  public var endpointListID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var supportedCommands: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.CommandBits> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.ActionStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case endpointListID
    case name
    case type
    case endpoints
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ActionsTrait.EndpointListStruct {
  public var endpointListID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActionsTrait.EndpointListTypeEnum> {
    get
  }
  public var endpoints: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ActivatedCarbonFilterMonitoringTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($condition) public var condition: Swift.UInt8? {
      get
    }
    public var $condition: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($degradationDirection) public var degradationDirection: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.DegradationDirectionEnum? {
      get
    }
    public var $degradationDirection: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.DegradationDirectionEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($changeIndication) public var changeIndication: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ChangeIndicationEnum? {
      get
    }
    public var $changeIndication: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ChangeIndicationEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($inPlaceIndicator) public var inPlaceIndicator: Swift.Bool? {
      get
    }
    public var $inPlaceIndicator: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastChangedTime) public var lastChangedTime: Swift.UInt32? {
      get
    }
    public var $lastChangedTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($replacementProductList) public var replacementProductList: [GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct]? {
      get
    }
    public var $replacementProductList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait, rhs: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attributes, rhs: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var lastChangedTimeIsSet: Swift.Bool {
      get
    }
    final public func setLastChangedTime(_ value: Swift.UInt32?)
    final public func clearLastChangedTime()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public struct ReplacementProductStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let productIdentifierType: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ProductIdentifierTypeEnum
    public let productIdentifierValue: Swift.String
    public init(productIdentifierType: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ProductIdentifierTypeEnum, productIdentifierValue: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct, b: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public var supportsResetConditionCommand: Swift.Bool {
    get
  }
  public func resetCondition() async throws
  public func resetConditionBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetConditionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public enum ChangeIndicationEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ChangeIndicationEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DegradationDirectionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.DegradationDirectionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ProductIdentifierTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case upc
    case gtin8
    case ean
    case gtin14
    case oem
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ProductIdentifierTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let condition: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature
    public static let warning: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature
    public static let replacementProductList: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case condition
    case degradationDirection
    case changeIndication
    case inPlaceIndicator
    case lastChangedTime
    case replacementProductList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public var condition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var degradationDirection: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.DegradationDirectionEnum> {
    get
  }
  public var changeIndication: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ChangeIndicationEnum> {
    get
  }
  public var inPlaceIndicator: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var lastChangedTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var replacementProductList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  final public func setLastChangedTime(_ value: Swift.UInt32?)
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait {
  public static func resetCondition() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case productIdentifierType
    case productIdentifierValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ReplacementProductStruct {
  public var productIdentifierType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait.ProductIdentifierTypeEnum> {
    get
  }
  public var productIdentifierValue: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct AdministratorCommissioningTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($windowStatus) public var windowStatus: GoogleHomeTypes.Matter.AdministratorCommissioningTrait.CommissioningWindowStatusEnum? {
      get
    }
    public var $windowStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.AdministratorCommissioningTrait.CommissioningWindowStatusEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($adminFabricIndex) public var adminFabricIndex: Swift.UInt8? {
      get
    }
    public var $adminFabricIndex: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($adminVendorId) public var adminVendorId: Swift.UInt16? {
      get
    }
    public var $adminVendorId: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AdministratorCommissioningTrait, rhs: GoogleHomeTypes.Matter.AdministratorCommissioningTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attributes, rhs: GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public var supportsOpenCommissioningWindowCommand: Swift.Bool {
    get
  }
  public func openCommissioningWindow(commissioningTimeout: Swift.UInt16, pakePasscodeVerifier: Foundation.Data, discriminator: Swift.UInt16, iterations: Swift.UInt32, salt: Foundation.Data) async throws
  public func openCommissioningWindowBatchable(commissioningTimeout: Swift.UInt16, pakePasscodeVerifier: Foundation.Data, discriminator: Swift.UInt16, iterations: Swift.UInt32, salt: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OpenCommissioningWindowCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public var supportsOpenBasicCommissioningWindowCommand: Swift.Bool {
    get
  }
  public func openBasicCommissioningWindow(commissioningTimeout: Swift.UInt16) async throws
  public func openBasicCommissioningWindowBatchable(commissioningTimeout: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OpenBasicCommissioningWindowCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public var supportsRevokeCommissioningCommand: Swift.Bool {
    get
  }
  public func revokeCommissioning() async throws
  public func revokeCommissioningBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RevokeCommissioningCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public enum CommissioningWindowStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case windowNotOpen
    case enhancedWindowOpen
    case basicWindowOpen
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AdministratorCommissioningTrait.CommissioningWindowStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusCode : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case busy
    case pakeParameterError
    case windowNotOpen
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AdministratorCommissioningTrait.StatusCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let basic: GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case windowStatus
    case adminFabricIndex
    case adminVendorId
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public var windowStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AdministratorCommissioningTrait.CommissioningWindowStatusEnum> {
    get
  }
  public var adminFabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var adminVendorId: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AdministratorCommissioningTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait.OpenCommissioningWindowCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case commissioningTimeout
    case pakePasscodeVerifier
    case discriminator
    case iterations
    case salt
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AdministratorCommissioningTrait.OpenCommissioningWindowCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AdministratorCommissioningTrait.OpenCommissioningWindowCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait.OpenBasicCommissioningWindowCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case commissioningTimeout
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AdministratorCommissioningTrait.OpenBasicCommissioningWindowCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AdministratorCommissioningTrait.OpenBasicCommissioningWindowCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AdministratorCommissioningTrait {
  public static func openCommissioningWindow(commissioningTimeout: Swift.UInt16, pakePasscodeVerifier: Foundation.Data, discriminator: Swift.UInt16, iterations: Swift.UInt32, salt: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
  public static func openBasicCommissioningWindow(commissioningTimeout: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func revokeCommissioning() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct AirQualityTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.AirQualityTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.AirQualityTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.AirQualityTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($airQuality) public var airQuality: GoogleHomeTypes.Matter.AirQualityTrait.AirQualityEnum? {
      get
    }
    public var $airQuality: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.AirQualityTrait.AirQualityEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.AirQualityTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.AirQualityTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AirQualityTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.AirQualityTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AirQualityTrait, rhs: GoogleHomeTypes.Matter.AirQualityTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AirQualityTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AirQualityTrait.Attributes, rhs: GoogleHomeTypes.Matter.AirQualityTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AirQualityTrait {
  public enum AirQualityEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case good
    case fair
    case moderate
    case poor
    case veryPoor
    case extremelyPoor
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AirQualityTrait.AirQualityEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AirQualityTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let fair: GoogleHomeTypes.Matter.AirQualityTrait.Feature
    public static let moderate: GoogleHomeTypes.Matter.AirQualityTrait.Feature
    public static let veryPoor: GoogleHomeTypes.Matter.AirQualityTrait.Feature
    public static let extremelyPoor: GoogleHomeTypes.Matter.AirQualityTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.AirQualityTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.AirQualityTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.AirQualityTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case airQuality
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AirQualityTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AirQualityTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AirQualityTrait {
  public var airQuality: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AirQualityTrait.AirQualityEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AirQualityTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ApplicationBasicTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ApplicationBasicTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorName) public var vendorName: Swift.String? {
      get
    }
    public var $vendorName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorID) public var vendorID: Swift.UInt16? {
      get
    }
    public var $vendorID: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($applicationName) public var applicationName: Swift.String? {
      get
    }
    public var $applicationName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productID) public var productID: Swift.UInt16? {
      get
    }
    public var $productID: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($application) public var application: GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct? {
      get
    }
    public var $application: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($status) public var status: GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStatusEnum? {
      get
    }
    public var $status: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStatusEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($applicationVersion) public var applicationVersion: Swift.String? {
      get
    }
    public var $applicationVersion: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($allowedVendorList) public var allowedVendorList: [Swift.UInt16]? {
      get
    }
    public var $allowedVendorList: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ApplicationBasicTrait, rhs: GoogleHomeTypes.Matter.ApplicationBasicTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ApplicationBasicTrait.Attributes, rhs: GoogleHomeTypes.Matter.ApplicationBasicTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait {
  public struct ApplicationStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let catalogVendorID: Swift.UInt16
    public let applicationID: Swift.String
    public init(catalogVendorID: Swift.UInt16, applicationID: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct, b: GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait {
  public enum ApplicationStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case stopped
    case activeVisibleFocus
    case activeHidden
    case activeVisibleNotFocus
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case vendorName
    case vendorID
    case applicationName
    case productID
    case application
    case status
    case applicationVersion
    case allowedVendorList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationBasicTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationBasicTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ApplicationBasicTrait {
  public var vendorName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var vendorID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var applicationName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var application: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct> {
    get
  }
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStatusEnum> {
    get
  }
  public var applicationVersion: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var allowedVendorList: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case catalogVendorID
    case applicationID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ApplicationBasicTrait.ApplicationStruct {
  public var catalogVendorID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var applicationID: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ApplicationLauncherTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($catalogList) public var catalogList: [Swift.UInt16]? {
      get
    }
    public var $catalogList: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentApp) public var currentApp: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct? {
      get
    }
    public var $currentApp: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ApplicationLauncherTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ApplicationLauncherTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ApplicationLauncherTrait, rhs: GoogleHomeTypes.Matter.ApplicationLauncherTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attributes, rhs: GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public struct ApplicationStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let catalogVendorID: Swift.UInt16
    public let applicationID: Swift.String
    public init(catalogVendorID: Swift.UInt16, applicationID: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct, b: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ApplicationEPStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let application: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct
    public let endpoint: Swift.UInt16?
    public init(application: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct, endpoint: Swift.UInt16?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct, b: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public typealias LaunchAppCommandResponse = GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand.Response
  public var supportsLaunchAppCommand: Swift.Bool {
    get
  }
  public func launchApp(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommandResponse
  public func launchAppBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommandResponse>
  public struct LaunchAppCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var applicationIsSet: Swift.Bool {
        get
      }
      final public func setApplication(_ value: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct)
      final public func clearApplication()
      final public var dataIsSet: Swift.Bool {
        get
      }
      final public func setData(_ value: Foundation.Data)
      final public func clearData()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.ApplicationLauncherTrait.StatusEnum
      public let data: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public typealias StopAppCommandResponse = GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand.Response
  public var supportsStopAppCommand: Swift.Bool {
    get
  }
  public func stopApp(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommandResponse
  public func stopAppBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommandResponse>
  public struct StopAppCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var applicationIsSet: Swift.Bool {
        get
      }
      final public func setApplication(_ value: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct)
      final public func clearApplication()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.ApplicationLauncherTrait.StatusEnum
      public let data: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public typealias HideAppCommandResponse = GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand.Response
  public var supportsHideAppCommand: Swift.Bool {
    get
  }
  public func hideApp(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommandResponse
  public func hideAppBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommandResponse>
  public struct HideAppCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var applicationIsSet: Swift.Bool {
        get
      }
      final public func setApplication(_ value: GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct)
      final public func clearApplication()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.ApplicationLauncherTrait.StatusEnum
      public let data: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case appNotAvailable
    case systemBusy
    case pendingUserApproval
    case downloading
    case installing
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ApplicationLauncherTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let applicationPlatform: GoogleHomeTypes.Matter.ApplicationLauncherTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ApplicationLauncherTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ApplicationLauncherTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case catalogList
    case currentApp
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationLauncherTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public var catalogList: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var currentApp: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ApplicationLauncherTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case application
    case data
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case application
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case application
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait {
  public static func launchApp(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ApplicationLauncherTrait.LaunchAppCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func stopApp(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ApplicationLauncherTrait.StopAppCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func hideApp(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ApplicationLauncherTrait.HideAppCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case catalogVendorID
    case applicationID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct {
  public var catalogVendorID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var applicationID: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case application
    case endpoint
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationEPStruct {
  public var application: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ApplicationLauncherTrait.ApplicationStruct> {
    get
  }
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct AudioOutputTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.AudioOutputTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($outputList) public var outputList: [GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct]? {
      get
    }
    public var $outputList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentOutput) public var currentOutput: Swift.UInt8? {
      get
    }
    public var $currentOutput: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.AudioOutputTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.AudioOutputTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.AudioOutputTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AudioOutputTrait, rhs: GoogleHomeTypes.Matter.AudioOutputTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.AudioOutputTrait.Attributes, rhs: GoogleHomeTypes.Matter.AudioOutputTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public struct OutputInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let index: Swift.UInt8
    public let outputType: GoogleHomeTypes.Matter.AudioOutputTrait.OutputTypeEnum
    public let name: Swift.String
    public init(index: Swift.UInt8, outputType: GoogleHomeTypes.Matter.AudioOutputTrait.OutputTypeEnum, name: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct, b: GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public var supportsSelectOutputCommand: Swift.Bool {
    get
  }
  public func selectOutput(index: Swift.UInt8) async throws
  public func selectOutputBatchable(index: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SelectOutputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public var supportsRenameOutputCommand: Swift.Bool {
    get
  }
  public func renameOutput(index: Swift.UInt8, name: Swift.String) async throws
  public func renameOutputBatchable(index: Swift.UInt8, name: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RenameOutputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public enum OutputTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case hdmi
    case bt
    case optical
    case headphone
    case `internal`
    case other
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.AudioOutputTrait.OutputTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let nameUpdates: GoogleHomeTypes.Matter.AudioOutputTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.AudioOutputTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.AudioOutputTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case outputList
    case currentOutput
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AudioOutputTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AudioOutputTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.AudioOutputTrait {
  public var outputList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct]> {
    get
  }
  public var currentOutput: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AudioOutputTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.AudioOutputTrait.SelectOutputCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case index
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AudioOutputTrait.SelectOutputCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AudioOutputTrait.SelectOutputCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AudioOutputTrait.RenameOutputCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case index
    case name
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AudioOutputTrait.RenameOutputCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AudioOutputTrait.RenameOutputCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.AudioOutputTrait {
  public static func selectOutput(index: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func renameOutput(index: Swift.UInt8, name: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case index
    case outputType
    case name
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.AudioOutputTrait.OutputInfoStruct {
  public var index: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var outputType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.AudioOutputTrait.OutputTypeEnum> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct BasicInformationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.BasicInformationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.BasicInformationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.BasicInformationTrait
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dataModelRevision) public var dataModelRevision: Swift.UInt16? {
      get
    }
    public var $dataModelRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorName) public var vendorName: Swift.String? {
      get
    }
    public var $vendorName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorID) public var vendorID: Swift.UInt16? {
      get
    }
    public var $vendorID: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productName) public var productName: Swift.String? {
      get
    }
    public var $productName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productID) public var productID: Swift.UInt16? {
      get
    }
    public var $productID: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nodeLabel) public var nodeLabel: Swift.String? {
      get
    }
    public var $nodeLabel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($location) public var location: Swift.String? {
      get
    }
    public var $location: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hardwareVersion) public var hardwareVersion: Swift.UInt16? {
      get
    }
    public var $hardwareVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hardwareVersionString) public var hardwareVersionString: Swift.String? {
      get
    }
    public var $hardwareVersionString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($softwareVersion) public var softwareVersion: Swift.UInt32? {
      get
    }
    public var $softwareVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($softwareVersionString) public var softwareVersionString: Swift.String? {
      get
    }
    public var $softwareVersionString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($manufacturingDate) public var manufacturingDate: Swift.String? {
      get
    }
    public var $manufacturingDate: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($partNumber) public var partNumber: Swift.String? {
      get
    }
    public var $partNumber: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productUrl) public var productUrl: Swift.String? {
      get
    }
    public var $productUrl: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productLabel) public var productLabel: Swift.String? {
      get
    }
    public var $productLabel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($serialNumber) public var serialNumber: Swift.String? {
      get
    }
    public var $serialNumber: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($localConfigDisabled) public var localConfigDisabled: Swift.Bool? {
      get
    }
    public var $localConfigDisabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($reachable) public var reachable: Swift.Bool? {
      get
    }
    public var $reachable: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uniqueID) public var uniqueID: Swift.String? {
      get
    }
    public var $uniqueID: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($capabilityMinima) public var capabilityMinima: GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct? {
      get
    }
    public var $capabilityMinima: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productAppearance) public var productAppearance: GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct? {
      get
    }
    public var $productAppearance: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($specificationVersion) public var specificationVersion: Swift.UInt32? {
      get
    }
    public var $specificationVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxPathsPerInvoke) public var maxPathsPerInvoke: Swift.UInt16? {
      get
    }
    public var $maxPathsPerInvoke: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.BasicInformationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BasicInformationTrait, rhs: GoogleHomeTypes.Matter.BasicInformationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BasicInformationTrait.Attributes, rhs: GoogleHomeTypes.Matter.BasicInformationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var nodeLabelIsSet: Swift.Bool {
      get
    }
    final public func setNodeLabel(_ value: Swift.String)
    final public func clearNodeLabel()
    final public var locationIsSet: Swift.Bool {
      get
    }
    final public func setLocation(_ value: Swift.String)
    final public func clearLocation()
    final public var localConfigDisabledIsSet: Swift.Bool {
      get
    }
    final public func setLocalConfigDisabled(_ value: Swift.Bool)
    final public func clearLocalConfigDisabled()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public struct CapabilityMinimaStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let caseSessionsPerFabric: Swift.UInt16
    public let subscriptionsPerFabric: Swift.UInt16
    public init(caseSessionsPerFabric: Swift.UInt16, subscriptionsPerFabric: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct, b: GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ProductAppearanceStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let finish: GoogleHomeTypes.Matter.BasicInformationTrait.ProductFinishEnum
    public let primaryColor: GoogleHomeTypes.Matter.BasicInformationTrait.ColorEnum?
    public init(finish: GoogleHomeTypes.Matter.BasicInformationTrait.ProductFinishEnum, primaryColor: GoogleHomeTypes.Matter.BasicInformationTrait.ColorEnum?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct, b: GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public struct StartUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let softwareVersion: Swift.UInt32?
      public init(softwareVersion: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent.Payload, b: GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent, b: GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ShutDownEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.ShutDownEvent.Payload, b: GoogleHomeTypes.Matter.BasicInformationTrait.ShutDownEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BasicInformationTrait.ShutDownEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BasicInformationTrait.ShutDownEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.ShutDownEvent, b: GoogleHomeTypes.Matter.BasicInformationTrait.ShutDownEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LeaveEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let fabricIndex: Swift.UInt8?
      public init(fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent.Payload, b: GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent, b: GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ReachableChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let reachableNewValue: Swift.Bool?
      public init(reachableNewValue: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent.Payload, b: GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent, b: GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public var supportsMfgSpecificPingCommand: Swift.Bool {
    get
  }
  public func mfgSpecificPing() async throws
  public func mfgSpecificPingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MfgSpecificPingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public enum ColorEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case black
    case navy
    case green
    case teal
    case maroon
    case purple
    case olive
    case gray
    case blue
    case lime
    case aqua
    case red
    case fuchsia
    case yellow
    case white
    case nickel
    case chrome
    case brass
    case copper
    case silver
    case gold
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.BasicInformationTrait.ColorEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ProductFinishEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case other
    case matte
    case satin
    case polished
    case rugged
    case fabric
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.BasicInformationTrait.ProductFinishEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dataModelRevision
    case vendorName
    case vendorID
    case productName
    case productID
    case nodeLabel
    case location
    case hardwareVersion
    case hardwareVersionString
    case softwareVersion
    case softwareVersionString
    case manufacturingDate
    case partNumber
    case productUrl
    case productLabel
    case serialNumber
    case localConfigDisabled
    case reachable
    case uniqueID
    case capabilityMinima
    case productAppearance
    case specificationVersion
    case maxPathsPerInvoke
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BasicInformationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BasicInformationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BasicInformationTrait {
  public var dataModelRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var vendorName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var vendorID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var productName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var nodeLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var location: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var hardwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var hardwareVersionString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var softwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var softwareVersionString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var manufacturingDate: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var partNumber: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var serialNumber: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var localConfigDisabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var reachable: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var uniqueID: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var capabilityMinima: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct> {
    get
  }
  public var productAppearance: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct> {
    get
  }
  public var specificationVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxPathsPerInvoke: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.BasicInformationTrait {
  final public func setNodeLabel(_ value: Swift.String)
  final public func setLocation(_ value: Swift.String)
  final public func setLocalConfigDisabled(_ value: Swift.Bool)
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case softwareVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BasicInformationTrait.StartUpEvent {
  public var softwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BasicInformationTrait.LeaveEvent {
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case reachableNewValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BasicInformationTrait.ReachableChangedEvent {
  public var reachableNewValue: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait {
  public static func mfgSpecificPing() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case caseSessionsPerFabric
    case subscriptionsPerFabric
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.BasicInformationTrait.CapabilityMinimaStruct {
  public var caseSessionsPerFabric: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var subscriptionsPerFabric: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case finish
    case primaryColor
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.BasicInformationTrait.ProductAppearanceStruct {
  public var finish: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BasicInformationTrait.ProductFinishEnum> {
    get
  }
  public var primaryColor: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BasicInformationTrait.ColorEnum?> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct BindingTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.BindingTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.BindingTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.BindingTrait
  }
}
extension GoogleHomeTypes.Matter.BindingTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.BindingTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($binding) public var binding: [GoogleHomeTypes.Matter.BindingTrait.TargetStruct]? {
      get
    }
    public var $binding: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.BindingTrait.TargetStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BindingTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.BindingTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BindingTrait, rhs: GoogleHomeTypes.Matter.BindingTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BindingTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BindingTrait.Attributes, rhs: GoogleHomeTypes.Matter.BindingTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BindingTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var bindingIsSet: Swift.Bool {
      get
    }
    final public func setBinding(_ value: [GoogleHomeTypes.Matter.BindingTrait.TargetStruct])
    final public func clearBinding()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.BindingTrait {
  public struct TargetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let node: Swift.UInt64?
    public let group: Swift.UInt16?
    public let endpoint: Swift.UInt16?
    public let cluster: Swift.UInt32?
    public let fabricIndex: Swift.UInt8
    public init(node: Swift.UInt64?, group: Swift.UInt16?, endpoint: Swift.UInt16?, cluster: Swift.UInt32?, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BindingTrait.TargetStruct, b: GoogleHomeTypes.Matter.BindingTrait.TargetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BindingTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case binding
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BindingTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BindingTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BindingTrait {
  public var binding: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.BindingTrait.TargetStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.BindingTrait {
  final public func setBinding(_ value: [GoogleHomeTypes.Matter.BindingTrait.TargetStruct])
}
extension GoogleHomeTypes.Matter.BindingTrait.TargetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case node
    case group
    case endpoint
    case cluster
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BindingTrait.TargetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BindingTrait.TargetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.BindingTrait.TargetStruct {
  public var node: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var group: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var cluster: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct BooleanStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.BooleanStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.BooleanStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.BooleanStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($stateValue) public var stateValue: Swift.Bool? {
      get
    }
    public var $stateValue: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BooleanStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.BooleanStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BooleanStateTrait, rhs: GoogleHomeTypes.Matter.BooleanStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BooleanStateTrait.Attributes, rhs: GoogleHomeTypes.Matter.BooleanStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateTrait {
  public struct StateChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let stateValue: Swift.Bool?
      public init(stateValue: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent.Payload, b: GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent, b: GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BooleanStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stateValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BooleanStateTrait {
  public var stateValue: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stateValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BooleanStateTrait.StateChangeEvent {
  public var stateValue: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct BooleanStateConfigurationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.BooleanStateConfigurationTrait
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentSensitivityLevel) public var currentSensitivityLevel: Swift.UInt8? {
      get
    }
    public var $currentSensitivityLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedSensitivityLevels) public var supportedSensitivityLevels: Swift.UInt8? {
      get
    }
    public var $supportedSensitivityLevels: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultSensitivityLevel) public var defaultSensitivityLevel: Swift.UInt8? {
      get
    }
    public var $defaultSensitivityLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($alarmsActive) public var alarmsActive: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap? {
      get
    }
    public var $alarmsActive: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($alarmsSuppressed) public var alarmsSuppressed: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap? {
      get
    }
    public var $alarmsSuppressed: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($alarmsEnabled) public var alarmsEnabled: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap? {
      get
    }
    public var $alarmsEnabled: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($alarmsSupported) public var alarmsSupported: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap? {
      get
    }
    public var $alarmsSupported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sensorFault) public var sensorFault: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap? {
      get
    }
    public var $sensorFault: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait, rhs: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attributes, rhs: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var currentSensitivityLevelIsSet: Swift.Bool {
      get
    }
    final public func setCurrentSensitivityLevel(_ value: Swift.UInt8)
    final public func clearCurrentSensitivityLevel()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public struct AlarmsStateChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmsActive: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap?
      public let alarmsSuppressed: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap?
      public init(alarmsActive: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap?, alarmsSuppressed: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent.Payload, b: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent, b: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SensorFaultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let sensorFault: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap?
      public init(sensorFault: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent.Payload, b: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent, b: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public var supportsSuppressAlarmCommand: Swift.Bool {
    get
  }
  public func suppressAlarm(alarmsToSuppress: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap) async throws
  public func suppressAlarmBatchable(alarmsToSuppress: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SuppressAlarmCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public var supportsEnableDisableAlarmCommand: Swift.Bool {
    get
  }
  public func enableDisableAlarm(alarmsToEnableDisable: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap) async throws
  public func enableDisableAlarmBatchable(alarmsToEnableDisable: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableDisableAlarmCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public struct AlarmModeBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let visual: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap
    public static let audible: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap
    public typealias Element = GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let visual: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature
    public static let audible: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature
    public static let alarmSuppress: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature
    public static let sensitivityLevel: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct SensorFaultBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let generalFault: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap
    public typealias Element = GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap
    public typealias RawValue = Swift.UInt16
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentSensitivityLevel
    case supportedSensitivityLevels
    case defaultSensitivityLevel
    case alarmsActive
    case alarmsSuppressed
    case alarmsEnabled
    case alarmsSupported
    case sensorFault
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public var currentSensitivityLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var supportedSensitivityLevels: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var defaultSensitivityLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var alarmsActive: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
    get
  }
  public var alarmsSuppressed: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
    get
  }
  public var alarmsEnabled: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
    get
  }
  public var alarmsSupported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
    get
  }
  public var sensorFault: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  final public func setCurrentSensitivityLevel(_ value: Swift.UInt8)
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmsActive
    case alarmsSuppressed
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmsStateChangedEvent {
  public var alarmsActive: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
    get
  }
  public var alarmsSuppressed: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sensorFault
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultEvent {
  public var sensorFault: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SensorFaultBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SuppressAlarmCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmsToSuppress
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SuppressAlarmCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.SuppressAlarmCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.EnableDisableAlarmCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmsToEnableDisable
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.EnableDisableAlarmCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.EnableDisableAlarmCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.BooleanStateConfigurationTrait {
  public static func suppressAlarm(alarmsToSuppress: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func enableDisableAlarm(alarmsToEnableDisable: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait.AlarmModeBitmap) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct BridgedDeviceBasicInformationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorName) public var vendorName: Swift.String? {
      get
    }
    public var $vendorName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorID) public var vendorID: Swift.UInt16? {
      get
    }
    public var $vendorID: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productName) public var productName: Swift.String? {
      get
    }
    public var $productName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productID) public var productID: Swift.UInt16? {
      get
    }
    public var $productID: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nodeLabel) public var nodeLabel: Swift.String? {
      get
    }
    public var $nodeLabel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hardwareVersion) public var hardwareVersion: Swift.UInt16? {
      get
    }
    public var $hardwareVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hardwareVersionString) public var hardwareVersionString: Swift.String? {
      get
    }
    public var $hardwareVersionString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($softwareVersion) public var softwareVersion: Swift.UInt32? {
      get
    }
    public var $softwareVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($softwareVersionString) public var softwareVersionString: Swift.String? {
      get
    }
    public var $softwareVersionString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($manufacturingDate) public var manufacturingDate: Swift.String? {
      get
    }
    public var $manufacturingDate: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($partNumber) public var partNumber: Swift.String? {
      get
    }
    public var $partNumber: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productUrl) public var productUrl: Swift.String? {
      get
    }
    public var $productUrl: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productLabel) public var productLabel: Swift.String? {
      get
    }
    public var $productLabel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($serialNumber) public var serialNumber: Swift.String? {
      get
    }
    public var $serialNumber: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($reachable) public var reachable: Swift.Bool? {
      get
    }
    public var $reachable: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uniqueID) public var uniqueID: Swift.String? {
      get
    }
    public var $uniqueID: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($productAppearance) public var productAppearance: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct? {
      get
    }
    public var $productAppearance: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait, rhs: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attributes, rhs: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var nodeLabelIsSet: Swift.Bool {
      get
    }
    final public func setNodeLabel(_ value: Swift.String)
    final public func clearNodeLabel()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public struct ProductAppearanceStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let finish: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductFinishEnum
    public let primaryColor: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ColorEnum?
    public init(finish: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductFinishEnum, primaryColor: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ColorEnum?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public struct StartUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let softwareVersion: Swift.UInt32?
      public init(softwareVersion: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent.Payload, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ShutDownEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ShutDownEvent.Payload, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ShutDownEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ShutDownEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ShutDownEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ShutDownEvent, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ShutDownEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LeaveEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.LeaveEvent.Payload, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.LeaveEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.LeaveEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.LeaveEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.LeaveEvent, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.LeaveEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ReachableChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let reachableNewValue: Swift.Bool?
      public init(reachableNewValue: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent.Payload, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ActiveChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let promisedActiveDuration: Swift.UInt32?
      public init(promisedActiveDuration: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent.Payload, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent, b: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public var supportsKeepActiveCommand: Swift.Bool {
    get
  }
  public func keepActive(stayActiveDuration: Swift.UInt32, timeoutMs: Swift.UInt32) async throws
  public func keepActiveBatchable(stayActiveDuration: Swift.UInt32, timeoutMs: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct KeepActiveCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public enum ColorEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case black
    case navy
    case green
    case teal
    case maroon
    case purple
    case olive
    case gray
    case blue
    case lime
    case aqua
    case red
    case fuchsia
    case yellow
    case white
    case nickel
    case chrome
    case brass
    case copper
    case silver
    case gold
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ColorEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ProductFinishEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case other
    case matte
    case satin
    case polished
    case rugged
    case fabric
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductFinishEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let bridgedICDSupport: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case vendorName
    case vendorID
    case productName
    case productID
    case nodeLabel
    case hardwareVersion
    case hardwareVersionString
    case softwareVersion
    case softwareVersionString
    case manufacturingDate
    case partNumber
    case productUrl
    case productLabel
    case serialNumber
    case reachable
    case uniqueID
    case productAppearance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public var vendorName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var vendorID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var productName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var nodeLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var hardwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var hardwareVersionString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var softwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var softwareVersionString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var manufacturingDate: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var partNumber: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var serialNumber: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var reachable: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var uniqueID: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var productAppearance: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  final public func setNodeLabel(_ value: Swift.String)
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case softwareVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.StartUpEvent {
  public var softwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case reachableNewValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ReachableChangedEvent {
  public var reachableNewValue: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case promisedActiveDuration
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ActiveChangedEvent {
  public var promisedActiveDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.KeepActiveCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stayActiveDuration
    case timeoutMs
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.KeepActiveCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.KeepActiveCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait {
  public static func keepActive(stayActiveDuration: Swift.UInt32, timeoutMs: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case finish
    case primaryColor
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductAppearanceStruct {
  public var finish: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ProductFinishEnum> {
    get
  }
  public var primaryColor: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait.ColorEnum?> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct CarbonDioxideConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct CarbonMonoxideConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ChannelTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ChannelTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($channelList) public var channelList: [GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct]? {
      get
    }
    public var $channelList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lineup) public var lineup: GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct? {
      get
    }
    public var $lineup: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentChannel) public var currentChannel: GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct? {
      get
    }
    public var $currentChannel: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ChannelTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ChannelTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ChannelTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ChannelTrait, rhs: GoogleHomeTypes.Matter.ChannelTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ChannelTrait.Attributes, rhs: GoogleHomeTypes.Matter.ChannelTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public struct ProgramCastStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let role: Swift.String
    public init(name: Swift.String, role: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct, b: GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ProgramCategoryStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let category: Swift.String
    public let subCategory: Swift.String?
    public init(category: Swift.String, subCategory: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct, b: GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SeriesInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let season: Swift.String
    public let episode: Swift.String
    public init(season: Swift.String, episode: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct, b: GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ChannelInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let majorNumber: Swift.UInt16
    public let minorNumber: Swift.UInt16
    public let name: Swift.String?
    public let callSign: Swift.String?
    public let affiliateCallSign: Swift.String?
    public let identifier: Swift.String?
    public let type: GoogleHomeTypes.Matter.ChannelTrait.ChannelTypeEnum?
    public init(majorNumber: Swift.UInt16, minorNumber: Swift.UInt16, name: Swift.String?, callSign: Swift.String?, affiliateCallSign: Swift.String?, identifier: Swift.String?, type: GoogleHomeTypes.Matter.ChannelTrait.ChannelTypeEnum?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct, b: GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ProgramStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let identifier: Swift.String
    public let channel: GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct
    public let startTime: Swift.UInt32
    public let endTime: Swift.UInt32
    public let title: Swift.String
    public let subtitle: Swift.String?
    public let description: Swift.String?
    public let audioLanguages: [Swift.String]?
    public let ratings: [Swift.String]?
    public let thumbnailUrl: Swift.String?
    public let posterArtUrl: Swift.String?
    public let dvbiUrl: Swift.String?
    public let releaseDate: Swift.String?
    public let parentalGuidanceText: Swift.String?
    public let recordingFlag: GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap?
    public let seriesInfo: GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct?
    public let categoryList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct]?
    public let castList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct]?
    public let externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct]?
    public init(identifier: Swift.String, channel: GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct, startTime: Swift.UInt32, endTime: Swift.UInt32, title: Swift.String, subtitle: Swift.String?, description: Swift.String?, audioLanguages: [Swift.String]?, ratings: [Swift.String]?, thumbnailUrl: Swift.String?, posterArtUrl: Swift.String?, dvbiUrl: Swift.String?, releaseDate: Swift.String?, parentalGuidanceText: Swift.String?, recordingFlag: GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap?, seriesInfo: GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct?, categoryList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct]?, castList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct]?, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct]?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct, b: GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PageTokenStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let limit: Swift.UInt16?
    public let after: Swift.String?
    public let before: Swift.String?
    public init(limit: Swift.UInt16?, after: Swift.String?, before: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct, b: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ChannelPagingStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let previousToken: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct?
    public let nextToken: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct?
    public init(previousToken: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct?, nextToken: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct, b: GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AdditionalInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let value: Swift.String
    public init(name: Swift.String, value: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct, b: GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LineupInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let operatorName: Swift.String
    public let lineupName: Swift.String?
    public let postalCode: Swift.String?
    public let lineupInfoType: GoogleHomeTypes.Matter.ChannelTrait.LineupInfoTypeEnum
    public init(operatorName: Swift.String, lineupName: Swift.String?, postalCode: Swift.String?, lineupInfoType: GoogleHomeTypes.Matter.ChannelTrait.LineupInfoTypeEnum)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct, b: GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public typealias ChangeChannelCommandResponse = GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelCommand.Response
  public var supportsChangeChannelCommand: Swift.Bool {
    get
  }
  public func changeChannel(match: Swift.String) async throws -> GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelCommandResponse
  public func changeChannelBatchable(match: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelCommandResponse>
  public struct ChangeChannelCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.ChannelTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public var supportsChangeChannelByNumberCommand: Swift.Bool {
    get
  }
  public func changeChannelByNumber(majorNumber: Swift.UInt16, minorNumber: Swift.UInt16) async throws
  public func changeChannelByNumberBatchable(majorNumber: Swift.UInt16, minorNumber: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ChangeChannelByNumberCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public var supportsSkipChannelCommand: Swift.Bool {
    get
  }
  public func skipChannel(count: Swift.Int16) async throws
  public func skipChannelBatchable(count: Swift.Int16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SkipChannelCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public typealias GetProgramGuideCommandResponse = GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand.Response
  public var supportsGetProgramGuideCommand: Swift.Bool {
    get
  }
  public func getProgramGuide(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommandResponse
  public func getProgramGuideBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommandResponse>
  public struct GetProgramGuideCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var startTimeIsSet: Swift.Bool {
        get
      }
      final public func setStartTime(_ value: Swift.UInt32)
      final public func clearStartTime()
      final public var endTimeIsSet: Swift.Bool {
        get
      }
      final public func setEndTime(_ value: Swift.UInt32)
      final public func clearEndTime()
      final public var channelListIsSet: Swift.Bool {
        get
      }
      final public func setChannelList(_ value: [GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct])
      final public func clearChannelList()
      final public var pageTokenIsSet: Swift.Bool {
        get
      }
      final public func setPageToken(_ value: GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct)
      final public func clearPageToken()
      final public var recordingFlagIsSet: Swift.Bool {
        get
      }
      final public func setRecordingFlag(_ value: GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap)
      final public func clearRecordingFlag()
      final public var externalIDListIsSet: Swift.Bool {
        get
      }
      final public func setExternalIDList(_ value: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct])
      final public func clearExternalIDList()
      final public var dataIsSet: Swift.Bool {
        get
      }
      final public func setData(_ value: Foundation.Data)
      final public func clearData()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let paging: GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct
      public let programList: [GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public var supportsRecordProgramCommand: Swift.Bool {
    get
  }
  public func recordProgram(programIdentifier: Swift.String, shouldRecordSeries: Swift.Bool, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct], data: Foundation.Data) async throws
  public func recordProgramBatchable(programIdentifier: Swift.String, shouldRecordSeries: Swift.Bool, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct], data: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RecordProgramCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public var supportsCancelRecordProgramCommand: Swift.Bool {
    get
  }
  public func cancelRecordProgram(programIdentifier: Swift.String, shouldRecordSeries: Swift.Bool, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct], data: Foundation.Data) async throws
  public func cancelRecordProgramBatchable(programIdentifier: Swift.String, shouldRecordSeries: Swift.Bool, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct], data: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct CancelRecordProgramCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public enum ChannelTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case satellite
    case cable
    case terrestrial
    case ott
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ChannelTrait.ChannelTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum LineupInfoTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case mso
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ChannelTrait.LineupInfoTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case multipleMatches
    case noMatches
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ChannelTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let channelList: GoogleHomeTypes.Matter.ChannelTrait.Feature
    public static let lineupInfo: GoogleHomeTypes.Matter.ChannelTrait.Feature
    public static let electronicGuide: GoogleHomeTypes.Matter.ChannelTrait.Feature
    public static let recordProgram: GoogleHomeTypes.Matter.ChannelTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ChannelTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ChannelTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct RecordingFlagBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let scheduled: GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap
    public static let recordSeries: GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap
    public static let recorded: GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap
    public typealias Element = GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case channelList
    case lineup
    case currentChannel
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ChannelTrait {
  public var channelList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct]> {
    get
  }
  public var lineup: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct?> {
    get
  }
  public var currentChannel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case match
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelByNumberCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case majorNumber
    case minorNumber
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelByNumberCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ChangeChannelByNumberCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ChannelTrait.SkipChannelCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case count
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.SkipChannelCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.SkipChannelCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case startTime
    case endTime
    case channelList
    case pageToken
    case recordingFlag
    case externalIDList
    case data
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ChannelTrait.RecordProgramCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case programIdentifier
    case shouldRecordSeries
    case externalIDList
    case data
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.RecordProgramCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.RecordProgramCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ChannelTrait.CancelRecordProgramCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case programIdentifier
    case shouldRecordSeries
    case externalIDList
    case data
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.CancelRecordProgramCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.CancelRecordProgramCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ChannelTrait {
  public static func changeChannel(match: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func changeChannelByNumber(majorNumber: Swift.UInt16, minorNumber: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func skipChannel(count: Swift.Int16) -> GoogleHomeSDK.AutomationCommand
  public static func getProgramGuide(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ChannelTrait.GetProgramGuideCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func recordProgram(programIdentifier: Swift.String, shouldRecordSeries: Swift.Bool, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct], data: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
  public static func cancelRecordProgram(programIdentifier: Swift.String, shouldRecordSeries: Swift.Bool, externalIDList: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct], data: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case role
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var role: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case category
    case subCategory
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct {
  public var category: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var subCategory: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case season
    case episode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct {
  public var season: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var episode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case majorNumber
    case minorNumber
    case name
    case callSign
    case affiliateCallSign
    case identifier
    case type
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct {
  public var majorNumber: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var minorNumber: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var callSign: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var affiliateCallSign: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var identifier: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.ChannelTypeEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case identifier
    case channel
    case startTime
    case endTime
    case title
    case subtitle
    case description
    case audioLanguages
    case ratings
    case thumbnailUrl
    case posterArtUrl
    case dvbiUrl
    case releaseDate
    case parentalGuidanceText
    case recordingFlag
    case seriesInfo
    case categoryList
    case castList
    case externalIDList
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.ProgramStruct {
  public var identifier: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var channel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.ChannelInfoStruct> {
    get
  }
  public var startTime: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var endTime: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var title: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var subtitle: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var description: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var audioLanguages: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var ratings: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var thumbnailUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var posterArtUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var dvbiUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var releaseDate: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var parentalGuidanceText: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var recordingFlag: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.RecordingFlagBitmap> {
    get
  }
  public var seriesInfo: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.SeriesInfoStruct?> {
    get
  }
  public var categoryList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ChannelTrait.ProgramCategoryStruct]> {
    get
  }
  public var castList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct]> {
    get
  }
  public var externalIDList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ChannelTrait.ProgramCastStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case limit
    case after
    case before
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct {
  public var limit: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var after: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var before: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case previousToken
    case nextToken
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.ChannelPagingStruct {
  public var previousToken: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct?> {
    get
  }
  public var nextToken: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.PageTokenStruct?> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.AdditionalInfoStruct {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operatorName
    case lineupName
    case postalCode
    case lineupInfoType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ChannelTrait.LineupInfoStruct {
  public var operatorName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var lineupName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var postalCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var lineupInfoType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ChannelTrait.LineupInfoTypeEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ColorControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ColorControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.ColorControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.ColorControlTrait
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentHue) public var currentHue: Swift.UInt8? {
      get
    }
    public var $currentHue: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentSaturation) public var currentSaturation: Swift.UInt8? {
      get
    }
    public var $currentSaturation: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($remainingTime) public var remainingTime: Swift.UInt16? {
      get
    }
    public var $remainingTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentX) public var currentX: Swift.UInt16? {
      get
    }
    public var $currentX: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentY) public var currentY: Swift.UInt16? {
      get
    }
    public var $currentY: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($driftCompensation) public var driftCompensation: GoogleHomeTypes.Matter.ColorControlTrait.DriftCompensationEnum? {
      get
    }
    public var $driftCompensation: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ColorControlTrait.DriftCompensationEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($compensationText) public var compensationText: Swift.String? {
      get
    }
    public var $compensationText: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorTemperatureMireds) public var colorTemperatureMireds: Swift.UInt16? {
      get
    }
    public var $colorTemperatureMireds: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorMode) public var colorMode: GoogleHomeTypes.Matter.ColorControlTrait.ColorModeEnum? {
      get
    }
    public var $colorMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ColorControlTrait.ColorModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($options) public var options: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap? {
      get
    }
    public var $options: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfPrimaries) public var numberOfPrimaries: Swift.UInt8? {
      get
    }
    public var $numberOfPrimaries: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary1X) public var primary1X: Swift.UInt16? {
      get
    }
    public var $primary1X: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary1Y) public var primary1Y: Swift.UInt16? {
      get
    }
    public var $primary1Y: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary1Intensity) public var primary1Intensity: Swift.UInt8? {
      get
    }
    public var $primary1Intensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary2X) public var primary2X: Swift.UInt16? {
      get
    }
    public var $primary2X: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary2Y) public var primary2Y: Swift.UInt16? {
      get
    }
    public var $primary2Y: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary2Intensity) public var primary2Intensity: Swift.UInt8? {
      get
    }
    public var $primary2Intensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary3X) public var primary3X: Swift.UInt16? {
      get
    }
    public var $primary3X: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary3Y) public var primary3Y: Swift.UInt16? {
      get
    }
    public var $primary3Y: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary3Intensity) public var primary3Intensity: Swift.UInt8? {
      get
    }
    public var $primary3Intensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary4X) public var primary4X: Swift.UInt16? {
      get
    }
    public var $primary4X: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary4Y) public var primary4Y: Swift.UInt16? {
      get
    }
    public var $primary4Y: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary4Intensity) public var primary4Intensity: Swift.UInt8? {
      get
    }
    public var $primary4Intensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary5X) public var primary5X: Swift.UInt16? {
      get
    }
    public var $primary5X: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary5Y) public var primary5Y: Swift.UInt16? {
      get
    }
    public var $primary5Y: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary5Intensity) public var primary5Intensity: Swift.UInt8? {
      get
    }
    public var $primary5Intensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary6X) public var primary6X: Swift.UInt16? {
      get
    }
    public var $primary6X: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary6Y) public var primary6Y: Swift.UInt16? {
      get
    }
    public var $primary6Y: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($primary6Intensity) public var primary6Intensity: Swift.UInt8? {
      get
    }
    public var $primary6Intensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($whitePointX) public var whitePointX: Swift.UInt16? {
      get
    }
    public var $whitePointX: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($whitePointY) public var whitePointY: Swift.UInt16? {
      get
    }
    public var $whitePointY: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointRX) public var colorPointRX: Swift.UInt16? {
      get
    }
    public var $colorPointRX: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointRY) public var colorPointRY: Swift.UInt16? {
      get
    }
    public var $colorPointRY: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointRIntensity) public var colorPointRIntensity: Swift.UInt8? {
      get
    }
    public var $colorPointRIntensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointGX) public var colorPointGX: Swift.UInt16? {
      get
    }
    public var $colorPointGX: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointGY) public var colorPointGY: Swift.UInt16? {
      get
    }
    public var $colorPointGY: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointGIntensity) public var colorPointGIntensity: Swift.UInt8? {
      get
    }
    public var $colorPointGIntensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointBX) public var colorPointBX: Swift.UInt16? {
      get
    }
    public var $colorPointBX: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointBY) public var colorPointBY: Swift.UInt16? {
      get
    }
    public var $colorPointBY: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorPointBIntensity) public var colorPointBIntensity: Swift.UInt8? {
      get
    }
    public var $colorPointBIntensity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enhancedCurrentHue) public var enhancedCurrentHue: Swift.UInt16? {
      get
    }
    public var $enhancedCurrentHue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enhancedColorMode) public var enhancedColorMode: GoogleHomeTypes.Matter.ColorControlTrait.EnhancedColorModeEnum? {
      get
    }
    public var $enhancedColorMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ColorControlTrait.EnhancedColorModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorLoopActive) public var colorLoopActive: Swift.UInt8? {
      get
    }
    public var $colorLoopActive: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorLoopDirection) public var colorLoopDirection: Swift.UInt8? {
      get
    }
    public var $colorLoopDirection: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorLoopTime) public var colorLoopTime: Swift.UInt16? {
      get
    }
    public var $colorLoopTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorLoopStartEnhancedHue) public var colorLoopStartEnhancedHue: Swift.UInt16? {
      get
    }
    public var $colorLoopStartEnhancedHue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorLoopStoredEnhancedHue) public var colorLoopStoredEnhancedHue: Swift.UInt16? {
      get
    }
    public var $colorLoopStoredEnhancedHue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorCapabilities) public var colorCapabilities: GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap? {
      get
    }
    public var $colorCapabilities: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorTempPhysicalMinMireds) public var colorTempPhysicalMinMireds: Swift.UInt16? {
      get
    }
    public var $colorTempPhysicalMinMireds: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorTempPhysicalMaxMireds) public var colorTempPhysicalMaxMireds: Swift.UInt16? {
      get
    }
    public var $colorTempPhysicalMaxMireds: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($coupleColorTempToLevelMinMireds) public var coupleColorTempToLevelMinMireds: Swift.UInt16? {
      get
    }
    public var $coupleColorTempToLevelMinMireds: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpColorTemperatureMireds) public var startUpColorTemperatureMireds: Swift.UInt16? {
      get
    }
    public var $startUpColorTemperatureMireds: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ColorControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ColorControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ColorControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ColorControlTrait, rhs: GoogleHomeTypes.Matter.ColorControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ColorControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.ColorControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var optionsIsSet: Swift.Bool {
      get
    }
    final public func setOptions(_ value: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap)
    final public func clearOptions()
    final public var whitePointXIsSet: Swift.Bool {
      get
    }
    final public func setWhitePointX(_ value: Swift.UInt16)
    final public func clearWhitePointX()
    final public var whitePointYIsSet: Swift.Bool {
      get
    }
    final public func setWhitePointY(_ value: Swift.UInt16)
    final public func clearWhitePointY()
    final public var colorPointRXIsSet: Swift.Bool {
      get
    }
    final public func setColorPointRX(_ value: Swift.UInt16)
    final public func clearColorPointRX()
    final public var colorPointRYIsSet: Swift.Bool {
      get
    }
    final public func setColorPointRY(_ value: Swift.UInt16)
    final public func clearColorPointRY()
    final public var colorPointRIntensityIsSet: Swift.Bool {
      get
    }
    final public func setColorPointRIntensity(_ value: Swift.UInt8?)
    final public func clearColorPointRIntensity()
    final public var colorPointGXIsSet: Swift.Bool {
      get
    }
    final public func setColorPointGX(_ value: Swift.UInt16)
    final public func clearColorPointGX()
    final public var colorPointGYIsSet: Swift.Bool {
      get
    }
    final public func setColorPointGY(_ value: Swift.UInt16)
    final public func clearColorPointGY()
    final public var colorPointGIntensityIsSet: Swift.Bool {
      get
    }
    final public func setColorPointGIntensity(_ value: Swift.UInt8?)
    final public func clearColorPointGIntensity()
    final public var colorPointBXIsSet: Swift.Bool {
      get
    }
    final public func setColorPointBX(_ value: Swift.UInt16)
    final public func clearColorPointBX()
    final public var colorPointBYIsSet: Swift.Bool {
      get
    }
    final public func setColorPointBY(_ value: Swift.UInt16)
    final public func clearColorPointBY()
    final public var colorPointBIntensityIsSet: Swift.Bool {
      get
    }
    final public func setColorPointBIntensity(_ value: Swift.UInt8?)
    final public func clearColorPointBIntensity()
    final public var startUpColorTemperatureMiredsIsSet: Swift.Bool {
      get
    }
    final public func setStartUpColorTemperatureMireds(_ value: Swift.UInt16?)
    final public func clearStartUpColorTemperatureMireds()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveToHueCommand: Swift.Bool {
    get
  }
  public func moveToHue(hue: Swift.UInt8, direction: GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveToHueBatchable(hue: Swift.UInt8, direction: GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToHueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveHueCommand: Swift.Bool {
    get
  }
  public func moveHue(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveHueBatchable(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveHueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsStepHueCommand: Swift.Bool {
    get
  }
  public func stepHue(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func stepHueBatchable(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepHueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveToSaturationCommand: Swift.Bool {
    get
  }
  public func moveToSaturation(saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveToSaturationBatchable(saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToSaturationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveSaturationCommand: Swift.Bool {
    get
  }
  public func moveSaturation(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveSaturationBatchable(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveSaturationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsStepSaturationCommand: Swift.Bool {
    get
  }
  public func stepSaturation(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func stepSaturationBatchable(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepSaturationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveToHueAndSaturationCommand: Swift.Bool {
    get
  }
  public func moveToHueAndSaturation(hue: Swift.UInt8, saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveToHueAndSaturationBatchable(hue: Swift.UInt8, saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToHueAndSaturationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveToColorCommand: Swift.Bool {
    get
  }
  public func moveToColor(colorX: Swift.UInt16, colorY: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveToColorBatchable(colorX: Swift.UInt16, colorY: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToColorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveColorCommand: Swift.Bool {
    get
  }
  public func moveColor(rateX: Swift.Int16, rateY: Swift.Int16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveColorBatchable(rateX: Swift.Int16, rateY: Swift.Int16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveColorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsStepColorCommand: Swift.Bool {
    get
  }
  public func stepColor(stepX: Swift.Int16, stepY: Swift.Int16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func stepColorBatchable(stepX: Swift.Int16, stepY: Swift.Int16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepColorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveToColorTemperatureCommand: Swift.Bool {
    get
  }
  public func moveToColorTemperature(colorTemperatureMireds: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveToColorTemperatureBatchable(colorTemperatureMireds: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToColorTemperatureCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsEnhancedMoveToHueCommand: Swift.Bool {
    get
  }
  public func enhancedMoveToHue(enhancedHue: Swift.UInt16, direction: GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func enhancedMoveToHueBatchable(enhancedHue: Swift.UInt16, direction: GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnhancedMoveToHueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsEnhancedMoveHueCommand: Swift.Bool {
    get
  }
  public func enhancedMoveHue(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func enhancedMoveHueBatchable(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnhancedMoveHueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsEnhancedStepHueCommand: Swift.Bool {
    get
  }
  public func enhancedStepHue(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func enhancedStepHueBatchable(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnhancedStepHueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsEnhancedMoveToHueAndSaturationCommand: Swift.Bool {
    get
  }
  public func enhancedMoveToHueAndSaturation(enhancedHue: Swift.UInt16, saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func enhancedMoveToHueAndSaturationBatchable(enhancedHue: Swift.UInt16, saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnhancedMoveToHueAndSaturationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsColorLoopSetCommand: Swift.Bool {
    get
  }
  public func colorLoopSet(updateFlags: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap, action: GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopActionEnum, direction: GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopDirectionEnum, time: Swift.UInt16, startHue: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func colorLoopSetBatchable(updateFlags: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap, action: GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopActionEnum, direction: GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopDirectionEnum, time: Swift.UInt16, startHue: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ColorLoopSetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsStopMoveStepCommand: Swift.Bool {
    get
  }
  public func stopMoveStep(optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func stopMoveStepBatchable(optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopMoveStepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsMoveColorTemperatureCommand: Swift.Bool {
    get
  }
  public func moveColorTemperature(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt16, colorTemperatureMinimumMireds: Swift.UInt16, colorTemperatureMaximumMireds: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func moveColorTemperatureBatchable(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt16, colorTemperatureMinimumMireds: Swift.UInt16, colorTemperatureMaximumMireds: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveColorTemperatureCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public var supportsStepColorTemperatureCommand: Swift.Bool {
    get
  }
  public func stepColorTemperature(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt16, transitionTime: Swift.UInt16, colorTemperatureMinimumMireds: Swift.UInt16, colorTemperatureMaximumMireds: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) async throws
  public func stepColorTemperatureBatchable(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt16, transitionTime: Swift.UInt16, colorTemperatureMinimumMireds: Swift.UInt16, colorTemperatureMaximumMireds: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepColorTemperatureCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public enum ColorLoopActionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case deactivate
    case activateFromColorLoopStartEnhancedHue
    case activateFromEnhancedCurrentHue
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopActionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ColorLoopDirectionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case decrement
    case increment
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopDirectionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ColorModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case currentHueAndCurrentSaturation
    case currentXAndCurrentY
    case colorTemperatureMireds
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.ColorModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DirectionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case shortest
    case longest
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DriftCompensationEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case none
    case otherOrUnknown
    case temperatureMonitoring
    case opticalLuminanceMonitoringAndFeedback
    case opticalColorMonitoringAndFeedback
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.DriftCompensationEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EnhancedColorModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case currentHueAndCurrentSaturation
    case currentXAndCurrentY
    case colorTemperatureMireds
    case enhancedCurrentHueAndCurrentSaturation
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.EnhancedColorModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MoveModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case stop
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StepModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public struct ColorCapabilitiesBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let hueSaturation: GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public static let enhancedHue: GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public static let colorLoop: GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public static let xy: GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public static let colorTemperature: GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public typealias Element = GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap
    public typealias RawValue = Swift.UInt16
  }
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let hueAndSaturation: GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public static let enhancedHue: GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public static let colorLoop: GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public static let xy: GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public static let colorTemperature: GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ColorControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct OptionsBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let executeIfOff: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap
    public typealias Element = GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct UpdateFlagsBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let updateAction: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap
    public static let updateDirection: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap
    public static let updateTime: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap
    public static let updateStartHue: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap
    public typealias Element = GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentHue
    case currentSaturation
    case remainingTime
    case currentX
    case currentY
    case driftCompensation
    case compensationText
    case colorTemperatureMireds
    case colorMode
    case options
    case numberOfPrimaries
    case primary1X
    case primary1Y
    case primary1Intensity
    case primary2X
    case primary2Y
    case primary2Intensity
    case primary3X
    case primary3Y
    case primary3Intensity
    case primary4X
    case primary4Y
    case primary4Intensity
    case primary5X
    case primary5Y
    case primary5Intensity
    case primary6X
    case primary6Y
    case primary6Intensity
    case whitePointX
    case whitePointY
    case colorPointRX
    case colorPointRY
    case colorPointRIntensity
    case colorPointGX
    case colorPointGY
    case colorPointGIntensity
    case colorPointBX
    case colorPointBY
    case colorPointBIntensity
    case enhancedCurrentHue
    case enhancedColorMode
    case colorLoopActive
    case colorLoopDirection
    case colorLoopTime
    case colorLoopStartEnhancedHue
    case colorLoopStoredEnhancedHue
    case colorCapabilities
    case colorTempPhysicalMinMireds
    case colorTempPhysicalMaxMireds
    case coupleColorTempToLevelMinMireds
    case startUpColorTemperatureMireds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ColorControlTrait {
  public var currentHue: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentSaturation: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var remainingTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var currentX: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var currentY: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var driftCompensation: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ColorControlTrait.DriftCompensationEnum> {
    get
  }
  public var compensationText: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var colorTemperatureMireds: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ColorControlTrait.ColorModeEnum> {
    get
  }
  public var options: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap> {
    get
  }
  public var numberOfPrimaries: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var primary1X: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary1Y: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary1Intensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var primary2X: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary2Y: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary2Intensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var primary3X: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary3Y: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary3Intensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var primary4X: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary4Y: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary4Intensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var primary5X: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary5Y: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary5Intensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var primary6X: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary6Y: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var primary6Intensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var whitePointX: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var whitePointY: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointRX: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointRY: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointRIntensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var colorPointGX: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointGY: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointGIntensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var colorPointBX: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointBY: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorPointBIntensity: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var enhancedCurrentHue: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var enhancedColorMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ColorControlTrait.EnhancedColorModeEnum> {
    get
  }
  public var colorLoopActive: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var colorLoopDirection: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var colorLoopTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorLoopStartEnhancedHue: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorLoopStoredEnhancedHue: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorCapabilities: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ColorControlTrait.ColorCapabilitiesBitmap> {
    get
  }
  public var colorTempPhysicalMinMireds: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var colorTempPhysicalMaxMireds: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var coupleColorTempToLevelMinMireds: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var startUpColorTemperatureMireds: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ColorControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.ColorControlTrait {
  final public func setOptions(_ value: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap)
  final public func setWhitePointX(_ value: Swift.UInt16)
  final public func setWhitePointY(_ value: Swift.UInt16)
  final public func setColorPointRX(_ value: Swift.UInt16)
  final public func setColorPointRY(_ value: Swift.UInt16)
  final public func setColorPointRIntensity(_ value: Swift.UInt8?)
  final public func setColorPointGX(_ value: Swift.UInt16)
  final public func setColorPointGY(_ value: Swift.UInt16)
  final public func setColorPointGIntensity(_ value: Swift.UInt8?)
  final public func setColorPointBX(_ value: Swift.UInt16)
  final public func setColorPointBY(_ value: Swift.UInt16)
  final public func setColorPointBIntensity(_ value: Swift.UInt8?)
  final public func setStartUpColorTemperatureMireds(_ value: Swift.UInt16?)
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveToHueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case hue
    case direction
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveToHueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveToHueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveHueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case moveMode
    case rate
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveHueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveHueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.StepHueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case stepSize
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.StepHueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.StepHueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveToSaturationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case saturation
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveToSaturationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveToSaturationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveSaturationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case moveMode
    case rate
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveSaturationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveSaturationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.StepSaturationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case stepSize
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.StepSaturationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.StepSaturationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveToHueAndSaturationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case hue
    case saturation
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveToHueAndSaturationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveToHueAndSaturationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveToColorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case colorX
    case colorY
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveToColorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveToColorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveColorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rateX
    case rateY
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveColorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveColorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.StepColorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepX
    case stepY
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.StepColorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.StepColorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveToColorTemperatureCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case colorTemperatureMireds
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveToColorTemperatureCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveToColorTemperatureCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveToHueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enhancedHue
    case direction
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveToHueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveToHueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveHueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case moveMode
    case rate
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveHueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveHueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.EnhancedStepHueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case stepSize
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedStepHueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedStepHueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveToHueAndSaturationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enhancedHue
    case saturation
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveToHueAndSaturationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.EnhancedMoveToHueAndSaturationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopSetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case updateFlags
    case action
    case direction
    case time
    case startHue
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopSetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopSetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.StopMoveStepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.StopMoveStepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.StopMoveStepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.MoveColorTemperatureCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case moveMode
    case rate
    case colorTemperatureMinimumMireds
    case colorTemperatureMaximumMireds
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.MoveColorTemperatureCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.MoveColorTemperatureCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait.StepColorTemperatureCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case stepSize
    case transitionTime
    case colorTemperatureMinimumMireds
    case colorTemperatureMaximumMireds
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ColorControlTrait.StepColorTemperatureCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ColorControlTrait.StepColorTemperatureCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ColorControlTrait {
  public static func moveToHue(hue: Swift.UInt8, direction: GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveHue(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stepHue(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveToSaturation(saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveSaturation(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stepSaturation(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt8, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveToHueAndSaturation(hue: Swift.UInt8, saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveToColor(colorX: Swift.UInt16, colorY: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveColor(rateX: Swift.Int16, rateY: Swift.Int16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stepColor(stepX: Swift.Int16, stepY: Swift.Int16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveToColorTemperature(colorTemperatureMireds: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func enhancedMoveToHue(enhancedHue: Swift.UInt16, direction: GoogleHomeTypes.Matter.ColorControlTrait.DirectionEnum, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func enhancedMoveHue(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func enhancedStepHue(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt16, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func enhancedMoveToHueAndSaturation(enhancedHue: Swift.UInt16, saturation: Swift.UInt8, transitionTime: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func colorLoopSet(updateFlags: GoogleHomeTypes.Matter.ColorControlTrait.UpdateFlagsBitmap, action: GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopActionEnum, direction: GoogleHomeTypes.Matter.ColorControlTrait.ColorLoopDirectionEnum, time: Swift.UInt16, startHue: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stopMoveStep(optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveColorTemperature(moveMode: GoogleHomeTypes.Matter.ColorControlTrait.MoveModeEnum, rate: Swift.UInt16, colorTemperatureMinimumMireds: Swift.UInt16, colorTemperatureMaximumMireds: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stepColorTemperature(stepMode: GoogleHomeTypes.Matter.ColorControlTrait.StepModeEnum, stepSize: Swift.UInt16, transitionTime: Swift.UInt16, colorTemperatureMinimumMireds: Swift.UInt16, colorTemperatureMaximumMireds: Swift.UInt16, optionsMask: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.ColorControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct CommissionerControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.CommissionerControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedDeviceCategories) public var supportedDeviceCategories: GoogleHomeTypes.Matter.CommissionerControlTrait.SupportedDeviceCategoryBitmap? {
      get
    }
    public var $supportedDeviceCategories: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.CommissionerControlTrait.SupportedDeviceCategoryBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.CommissionerControlTrait, rhs: GoogleHomeTypes.Matter.CommissionerControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.CommissionerControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.CommissionerControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public struct CommissioningRequestResultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let requestID: Swift.UInt64?
      public let clientNodeID: Swift.UInt64?
      public let statusCode: Swift.UInt8?
      public let fabricIndex: Swift.UInt8?
      public init(requestID: Swift.UInt64?, clientNodeID: Swift.UInt64?, statusCode: Swift.UInt8?, fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent.Payload, b: GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent, b: GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public var supportsRequestCommissioningApprovalCommand: Swift.Bool {
    get
  }
  public func requestCommissioningApproval(requestID: Swift.UInt64, vendorID: Swift.UInt16, productID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.CommissionerControlTrait.RequestCommissioningApprovalCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func requestCommissioningApprovalBatchable(requestID: Swift.UInt64, vendorID: Swift.UInt16, productID: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.CommissionerControlTrait.RequestCommissioningApprovalCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RequestCommissioningApprovalCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var labelIsSet: Swift.Bool {
        get
      }
      final public func setLabel(_ value: Swift.String)
      final public func clearLabel()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public typealias CommissionNodeCommandResponse = GoogleHomeTypes.Matter.CommissionerControlTrait.CommissionNodeCommand.Response
  public var supportsCommissionNodeCommand: Swift.Bool {
    get
  }
  public func commissionNode(requestID: Swift.UInt64, responseTimeoutSeconds: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.CommissionerControlTrait.CommissionNodeCommandResponse
  public func commissionNodeBatchable(requestID: Swift.UInt64, responseTimeoutSeconds: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.CommissionerControlTrait.CommissionNodeCommandResponse>
  public struct CommissionNodeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commissioningTimeout: Swift.UInt16
      public let pakePasscodeVerifier: Foundation.Data
      public let discriminator: Swift.UInt16
      public let iterations: Swift.UInt32
      public let salt: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public struct SupportedDeviceCategoryBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let fabricSynchronization: GoogleHomeTypes.Matter.CommissionerControlTrait.SupportedDeviceCategoryBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.CommissionerControlTrait.SupportedDeviceCategoryBitmap
    public typealias Element = GoogleHomeTypes.Matter.CommissionerControlTrait.SupportedDeviceCategoryBitmap
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedDeviceCategories
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.CommissionerControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.CommissionerControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.CommissionerControlTrait {
  public var supportedDeviceCategories: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.CommissionerControlTrait.SupportedDeviceCategoryBitmap> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case requestID
    case clientNodeID
    case statusCode
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.CommissionerControlTrait.CommissioningRequestResultEvent {
  public var requestID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var clientNodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var statusCode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait.RequestCommissioningApprovalCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case requestID
    case vendorID
    case productID
    case label
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.CommissionerControlTrait.RequestCommissioningApprovalCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.CommissionerControlTrait.RequestCommissioningApprovalCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait.CommissionNodeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case requestID
    case responseTimeoutSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.CommissionerControlTrait.CommissionNodeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.CommissionerControlTrait.CommissionNodeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.CommissionerControlTrait {
  public static func requestCommissioningApproval(requestID: Swift.UInt64, vendorID: Swift.UInt16, productID: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.CommissionerControlTrait.RequestCommissioningApprovalCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func commissionNode(requestID: Swift.UInt64, responseTimeoutSeconds: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct ContentLauncherTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ContentLauncherTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptHeader) public var acceptHeader: [Swift.String]? {
      get
    }
    public var $acceptHeader: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedStreamingProtocols) public var supportedStreamingProtocols: GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap? {
      get
    }
    public var $supportedStreamingProtocols: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ContentLauncherTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ContentLauncherTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ContentLauncherTrait, rhs: GoogleHomeTypes.Matter.ContentLauncherTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ContentLauncherTrait.Attributes, rhs: GoogleHomeTypes.Matter.ContentLauncherTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public struct DimensionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let width: Swift.Float64
    public let height: Swift.Float64
    public let metric: GoogleHomeTypes.Matter.ContentLauncherTrait.MetricTypeEnum
    public init(width: Swift.Float64, height: Swift.Float64, metric: GoogleHomeTypes.Matter.ContentLauncherTrait.MetricTypeEnum)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TrackPreferenceStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let languageCode: Swift.String
    public let characteristics: [GoogleHomeTypes.Matter.ContentLauncherTrait.CharacteristicEnum]?
    public let audioOutputIndex: Swift.UInt8
    public init(languageCode: Swift.String, characteristics: [GoogleHomeTypes.Matter.ContentLauncherTrait.CharacteristicEnum]?, audioOutputIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PlaybackPreferencesStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let playbackPosition: Swift.UInt64
    public let textTrack: GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct
    public let audioTracks: [GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct]?
    public init(playbackPosition: Swift.UInt64, textTrack: GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct, audioTracks: [GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct]?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AdditionalInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let value: Swift.String
    public init(name: Swift.String, value: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ParameterStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let type: GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterEnum
    public let value: Swift.String
    public let externalIDList: [GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct]?
    public init(type: GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterEnum, value: Swift.String, externalIDList: [GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct]?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ContentSearchStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let parameterList: [GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct]
    public init(parameterList: [GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct StyleInformationStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let imageUrl: Swift.String?
    public let color: Swift.String?
    public let size: GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct?
    public init(imageUrl: Swift.String?, color: Swift.String?, size: GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BrandingInformationStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let providerName: Swift.String
    public let background: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?
    public let logo: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?
    public let progressBar: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?
    public let splash: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?
    public let waterMark: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?
    public init(providerName: Swift.String, background: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?, logo: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?, progressBar: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?, splash: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?, waterMark: GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct, b: GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public typealias LaunchContentCommandResponse = GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand.Response
  public var supportsLaunchContentCommand: Swift.Bool {
    get
  }
  public func launchContent(search: GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct, autoPlay: Swift.Bool, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommandResponse
  public func launchContentBatchable(search: GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct, autoPlay: Swift.Bool, optionalArgsProvider: ((GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommandResponse>
  public struct LaunchContentCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var dataIsSet: Swift.Bool {
        get
      }
      final public func setData(_ value: Swift.String)
      final public func clearData()
      final public var playbackPreferencesIsSet: Swift.Bool {
        get
      }
      final public func setPlaybackPreferences(_ value: GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct)
      final public func clearPlaybackPreferences()
      final public var useCurrentContextIsSet: Swift.Bool {
        get
      }
      final public func setUseCurrentContext(_ value: Swift.Bool)
      final public func clearUseCurrentContext()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.ContentLauncherTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public typealias LaunchUrlCommandResponse = GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand.Response
  public var supportsLaunchUrlCommand: Swift.Bool {
    get
  }
  public func launchUrl(contentUrl: Swift.String, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommandResponse
  public func launchUrlBatchable(contentUrl: Swift.String, optionalArgsProvider: ((GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommandResponse>
  public struct LaunchUrlCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var displayStringIsSet: Swift.Bool {
        get
      }
      final public func setDisplayString(_ value: Swift.String)
      final public func clearDisplayString()
      final public var brandingInformationIsSet: Swift.Bool {
        get
      }
      final public func setBrandingInformation(_ value: GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct)
      final public func clearBrandingInformation()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.ContentLauncherTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public enum CharacteristicEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case forcedSubtitles
    case describesVideo
    case easyToRead
    case frameBased
    case mainProgram
    case originalContent
    case voiceOverTranslation
    case caption
    case subtitle
    case alternate
    case supplementary
    case commentary
    case dubbedTranslation
    case description
    case metadata
    case enhancedAudioIntelligibility
    case emergency
    case karaoke
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ContentLauncherTrait.CharacteristicEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MetricTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case pixels
    case percentage
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ContentLauncherTrait.MetricTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ParameterEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case actor
    case channel
    case character
    case director
    case event
    case franchise
    case genre
    case league
    case popularity
    case provider
    case sport
    case sportsTeam
    case type
    case video
    case season
    case episode
    case any
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case urlNotAvailable
    case authFailed
    case textTrackNotAvailable
    case audioTrackNotAvailable
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ContentLauncherTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let contentSearch: GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public static let urlPlayback: GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public static let advancedSeek: GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public static let textTracks: GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public static let audioTracks: GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ContentLauncherTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct SupportedProtocolsBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let dash: GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap
    public static let hls: GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap
    public typealias Element = GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case acceptHeader
    case supportedStreamingProtocols
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ContentLauncherTrait {
  public var acceptHeader: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var supportedStreamingProtocols: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.SupportedProtocolsBitmap> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case search
    case autoPlay
    case data
    case playbackPreferences
    case useCurrentContext
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case contentUrl
    case displayString
    case brandingInformation
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait {
  public static func launchContent(search: GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct, autoPlay: Swift.Bool, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchContentCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func launchUrl(contentUrl: Swift.String, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ContentLauncherTrait.LaunchUrlCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case width
    case height
    case metric
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct {
  public var width: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var height: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var metric: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.MetricTypeEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case languageCode
    case characteristics
    case audioOutputIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct {
  public var languageCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var characteristics: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ContentLauncherTrait.CharacteristicEnum]> {
    get
  }
  public var audioOutputIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case playbackPosition
    case textTrack
    case audioTracks
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.PlaybackPreferencesStruct {
  public var playbackPosition: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var textTrack: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct> {
    get
  }
  public var audioTracks: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ContentLauncherTrait.TrackPreferenceStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case type
    case value
    case externalIDList
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct {
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterEnum> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var externalIDList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ContentLauncherTrait.AdditionalInfoStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case parameterList
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.ContentSearchStruct {
  public var parameterList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ContentLauncherTrait.ParameterStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case imageUrl
    case color
    case size
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct {
  public var imageUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var color: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var size: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.DimensionStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case providerName
    case background
    case logo
    case progressBar
    case splash
    case waterMark
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ContentLauncherTrait.BrandingInformationStruct {
  public var providerName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var background: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct> {
    get
  }
  public var logo: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct> {
    get
  }
  public var progressBar: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct> {
    get
  }
  public var splash: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct> {
    get
  }
  public var waterMark: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ContentLauncherTrait.StyleInformationStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct DescriptorTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.DescriptorTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.DescriptorTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($deviceTypeList) public var deviceTypeList: [GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct]? {
      get
    }
    public var $deviceTypeList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($serverList) public var serverList: [Swift.UInt32]? {
      get
    }
    public var $serverList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clientList) public var clientList: [Swift.UInt32]? {
      get
    }
    public var $clientList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($partsList) public var partsList: [Swift.UInt16]? {
      get
    }
    public var $partsList: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tagList) public var tagList: [GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct]? {
      get
    }
    public var $tagList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.DescriptorTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DescriptorTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.DescriptorTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DescriptorTrait, rhs: GoogleHomeTypes.Matter.DescriptorTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DescriptorTrait.Attributes, rhs: GoogleHomeTypes.Matter.DescriptorTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait {
  public struct DeviceTypeStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let deviceType: Swift.UInt32
    public let revision: Swift.UInt16
    public init(deviceType: Swift.UInt32, revision: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct, b: GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SemanticTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let namespaceID: Swift.UInt8
    public let tag: Swift.UInt8
    public let label: Swift.String?
    public init(mfgCode: Swift.UInt16?, namespaceID: Swift.UInt8, tag: Swift.UInt8, label: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct, b: GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let tagList: GoogleHomeTypes.Matter.DescriptorTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DescriptorTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.DescriptorTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case deviceTypeList
    case serverList
    case clientList
    case partsList
    case tagList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DescriptorTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DescriptorTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DescriptorTrait {
  public var deviceTypeList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct]> {
    get
  }
  public var serverList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var clientList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var partsList: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var tagList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DescriptorTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case deviceType
    case revision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.DescriptorTrait.DeviceTypeStruct {
  public var deviceType: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var revision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case namespaceID
    case tag
    case label
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.DescriptorTrait.SemanticTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var namespaceID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var tag: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var label: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct DiagnosticLogsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DiagnosticLogsTrait, rhs: GoogleHomeTypes.Matter.DiagnosticLogsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attributes, rhs: GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait {
  public typealias RetrieveLogsRequestCommandResponse = GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand.Response
  public var supportsRetrieveLogsRequestCommand: Swift.Bool {
    get
  }
  public func retrieveLogsRequest(intent: GoogleHomeTypes.Matter.DiagnosticLogsTrait.IntentEnum, requestedProtocol: GoogleHomeTypes.Matter.DiagnosticLogsTrait.TransferProtocolEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommandResponse
  public func retrieveLogsRequestBatchable(intent: GoogleHomeTypes.Matter.DiagnosticLogsTrait.IntentEnum, requestedProtocol: GoogleHomeTypes.Matter.DiagnosticLogsTrait.TransferProtocolEnum, optionalArgsProvider: ((GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommandResponse>
  public struct RetrieveLogsRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var transferFileDesignatorIsSet: Swift.Bool {
        get
      }
      final public func setTransferFileDesignator(_ value: Swift.String)
      final public func clearTransferFileDesignator()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.DiagnosticLogsTrait.StatusEnum
      public let logContent: Foundation.Data
      public let utcTimeStamp: Swift.UInt64?
      public let timeSinceBoot: Swift.UInt64?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait {
  public enum IntentEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case endUserSupport
    case networkDiag
    case crashLogs
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DiagnosticLogsTrait.IntentEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case exhausted
    case noLogs
    case busy
    case denied
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DiagnosticLogsTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum TransferProtocolEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case responsePayload
    case bdx
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DiagnosticLogsTrait.TransferProtocolEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DiagnosticLogsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DiagnosticLogsTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case intent
    case requestedProtocol
    case transferFileDesignator
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DiagnosticLogsTrait {
  public static func retrieveLogsRequest(intent: GoogleHomeTypes.Matter.DiagnosticLogsTrait.IntentEnum, requestedProtocol: GoogleHomeTypes.Matter.DiagnosticLogsTrait.TransferProtocolEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DiagnosticLogsTrait.RetrieveLogsRequestCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct DishwasherAlarmTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($mask) public var mask: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap? {
      get
    }
    public var $mask: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($latch) public var latch: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap? {
      get
    }
    public var $latch: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($state) public var state: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap? {
      get
    }
    public var $state: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supported) public var supported: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap? {
      get
    }
    public var $supported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.DishwasherAlarmTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DishwasherAlarmTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DishwasherAlarmTrait, rhs: GoogleHomeTypes.Matter.DishwasherAlarmTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attributes, rhs: GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public struct NotifyEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let active: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?
      public let inactive: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?
      public let state: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?
      public let mask: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?
      public init(active: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?, inactive: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?, state: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?, mask: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent.Payload, b: GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent, b: GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public var supportsResetCommand: Swift.Bool {
    get
  }
  public func reset(alarms: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap) async throws
  public func resetBatchable(alarms: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public var supportsModifyEnabledAlarmsCommand: Swift.Bool {
    get
  }
  public func modifyEnabledAlarms(mask: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap) async throws
  public func modifyEnabledAlarmsBatchable(mask: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ModifyEnabledAlarmsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public struct AlarmBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let inflowError: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public static let drainError: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public static let doorError: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public static let tempTooLow: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public static let tempTooHigh: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public static let waterLevelError: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public typealias Element = GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap
    public typealias RawValue = Swift.UInt32
  }
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let reset: GoogleHomeTypes.Matter.DishwasherAlarmTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DishwasherAlarmTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.DishwasherAlarmTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mask
    case latch
    case state
    case supported
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherAlarmTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public var mask: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var latch: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var supported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case active
    case inactive
    case state
    case mask
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DishwasherAlarmTrait.NotifyEvent {
  public var active: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var inactive: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
  public var mask: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait.ResetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherAlarmTrait.ResetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherAlarmTrait.ResetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait.ModifyEnabledAlarmsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mask
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherAlarmTrait.ModifyEnabledAlarmsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherAlarmTrait.ModifyEnabledAlarmsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DishwasherAlarmTrait {
  public static func reset(alarms: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func modifyEnabledAlarms(mask: GoogleHomeTypes.Matter.DishwasherAlarmTrait.AlarmBitmap) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct DishwasherModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.DishwasherModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.DishwasherModeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.DishwasherModeTrait
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.DishwasherModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DishwasherModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DishwasherModeTrait, rhs: GoogleHomeTypes.Matter.DishwasherModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DishwasherModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.DishwasherModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.DishwasherModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.DishwasherModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DishwasherModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case normal
    case heavy
    case light
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.DishwasherModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DishwasherModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.DishwasherModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DishwasherModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DishwasherModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.DishwasherModeTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.DishwasherModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.DishwasherModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct DoorLockTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.DoorLockTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.DoorLockTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.DoorLockTrait
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lockState) public var lockState: GoogleHomeTypes.Matter.DoorLockTrait.DlLockState? {
      get
    }
    public var $lockState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DlLockState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lockType) public var lockType: GoogleHomeTypes.Matter.DoorLockTrait.DlLockType? {
      get
    }
    public var $lockType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DlLockType> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($actuatorEnabled) public var actuatorEnabled: Swift.Bool? {
      get
    }
    public var $actuatorEnabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($doorState) public var doorState: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum? {
      get
    }
    public var $doorState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($doorOpenEvents) public var doorOpenEvents: Swift.UInt32? {
      get
    }
    public var $doorOpenEvents: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($doorClosedEvents) public var doorClosedEvents: Swift.UInt32? {
      get
    }
    public var $doorClosedEvents: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($openPeriod) public var openPeriod: Swift.UInt16? {
      get
    }
    public var $openPeriod: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfTotalUsersSupported) public var numberOfTotalUsersSupported: Swift.UInt16? {
      get
    }
    public var $numberOfTotalUsersSupported: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfPinUsersSupported) public var numberOfPinUsersSupported: Swift.UInt16? {
      get
    }
    public var $numberOfPinUsersSupported: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfRfidUsersSupported) public var numberOfRfidUsersSupported: Swift.UInt16? {
      get
    }
    public var $numberOfRfidUsersSupported: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfWeekDaySchedulesSupportedPerUser) public var numberOfWeekDaySchedulesSupportedPerUser: Swift.UInt8? {
      get
    }
    public var $numberOfWeekDaySchedulesSupportedPerUser: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfYearDaySchedulesSupportedPerUser) public var numberOfYearDaySchedulesSupportedPerUser: Swift.UInt8? {
      get
    }
    public var $numberOfYearDaySchedulesSupportedPerUser: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfHolidaySchedulesSupported) public var numberOfHolidaySchedulesSupported: Swift.UInt8? {
      get
    }
    public var $numberOfHolidaySchedulesSupported: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxPinCodeLength) public var maxPinCodeLength: Swift.UInt8? {
      get
    }
    public var $maxPinCodeLength: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minPinCodeLength) public var minPinCodeLength: Swift.UInt8? {
      get
    }
    public var $minPinCodeLength: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxRfidCodeLength) public var maxRfidCodeLength: Swift.UInt8? {
      get
    }
    public var $maxRfidCodeLength: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minRfidCodeLength) public var minRfidCodeLength: Swift.UInt8? {
      get
    }
    public var $minRfidCodeLength: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($credentialRulesSupport) public var credentialRulesSupport: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask? {
      get
    }
    public var $credentialRulesSupport: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfCredentialsSupportedPerUser) public var numberOfCredentialsSupportedPerUser: Swift.UInt8? {
      get
    }
    public var $numberOfCredentialsSupportedPerUser: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($language) public var language: Swift.String? {
      get
    }
    public var $language: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ledSettings) public var ledSettings: Swift.UInt8? {
      get
    }
    public var $ledSettings: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($autoRelockTime) public var autoRelockTime: Swift.UInt32? {
      get
    }
    public var $autoRelockTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($soundVolume) public var soundVolume: Swift.UInt8? {
      get
    }
    public var $soundVolume: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operatingMode) public var operatingMode: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum? {
      get
    }
    public var $operatingMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedOperatingModes) public var supportedOperatingModes: GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes? {
      get
    }
    public var $supportedOperatingModes: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultConfigurationRegister) public var defaultConfigurationRegister: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister? {
      get
    }
    public var $defaultConfigurationRegister: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableLocalProgramming) public var enableLocalProgramming: Swift.Bool? {
      get
    }
    public var $enableLocalProgramming: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableOneTouchLocking) public var enableOneTouchLocking: Swift.Bool? {
      get
    }
    public var $enableOneTouchLocking: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableInsideStatusLed) public var enableInsideStatusLed: Swift.Bool? {
      get
    }
    public var $enableInsideStatusLed: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enablePrivacyModeButton) public var enablePrivacyModeButton: Swift.Bool? {
      get
    }
    public var $enablePrivacyModeButton: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($localProgrammingFeatures) public var localProgrammingFeatures: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures? {
      get
    }
    public var $localProgrammingFeatures: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wrongCodeEntryLimit) public var wrongCodeEntryLimit: Swift.UInt8? {
      get
    }
    public var $wrongCodeEntryLimit: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($userCodeTemporaryDisableTime) public var userCodeTemporaryDisableTime: Swift.UInt8? {
      get
    }
    public var $userCodeTemporaryDisableTime: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sendPinOverTheAir) public var sendPinOverTheAir: Swift.Bool? {
      get
    }
    public var $sendPinOverTheAir: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($requirePinforRemoteOperation) public var requirePinforRemoteOperation: Swift.Bool? {
      get
    }
    public var $requirePinforRemoteOperation: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($expiringUserTimeout) public var expiringUserTimeout: Swift.UInt16? {
      get
    }
    public var $expiringUserTimeout: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroReaderVerificationKey) public var aliroReaderVerificationKey: Foundation.Data? {
      get
    }
    public var $aliroReaderVerificationKey: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroReaderGroupIdentifier) public var aliroReaderGroupIdentifier: Foundation.Data? {
      get
    }
    public var $aliroReaderGroupIdentifier: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroReaderGroupSubIdentifier) public var aliroReaderGroupSubIdentifier: Foundation.Data? {
      get
    }
    public var $aliroReaderGroupSubIdentifier: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroExpeditedTransactionSupportedProtocolVersions) public var aliroExpeditedTransactionSupportedProtocolVersions: [Foundation.Data]? {
      get
    }
    public var $aliroExpeditedTransactionSupportedProtocolVersions: GoogleHomeSDK.TraitAttribute<[Foundation.Data]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroGroupResolvingKey) public var aliroGroupResolvingKey: Foundation.Data? {
      get
    }
    public var $aliroGroupResolvingKey: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroSupportedBLEUWBProtocolVersions) public var aliroSupportedBLEUWBProtocolVersions: [Foundation.Data]? {
      get
    }
    public var $aliroSupportedBLEUWBProtocolVersions: GoogleHomeSDK.TraitAttribute<[Foundation.Data]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($aliroBLEAdvertisingVersion) public var aliroBLEAdvertisingVersion: Swift.UInt8? {
      get
    }
    public var $aliroBLEAdvertisingVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfAliroCredentialIssuerKeysSupported) public var numberOfAliroCredentialIssuerKeysSupported: Swift.UInt16? {
      get
    }
    public var $numberOfAliroCredentialIssuerKeysSupported: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfAliroEndpointKeysSupported) public var numberOfAliroEndpointKeysSupported: Swift.UInt16? {
      get
    }
    public var $numberOfAliroEndpointKeysSupported: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.DoorLockTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.DoorLockTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.DoorLockTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DoorLockTrait, rhs: GoogleHomeTypes.Matter.DoorLockTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.DoorLockTrait.Attributes, rhs: GoogleHomeTypes.Matter.DoorLockTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var doorOpenEventsIsSet: Swift.Bool {
      get
    }
    final public func setDoorOpenEvents(_ value: Swift.UInt32)
    final public func clearDoorOpenEvents()
    final public var doorClosedEventsIsSet: Swift.Bool {
      get
    }
    final public func setDoorClosedEvents(_ value: Swift.UInt32)
    final public func clearDoorClosedEvents()
    final public var openPeriodIsSet: Swift.Bool {
      get
    }
    final public func setOpenPeriod(_ value: Swift.UInt16)
    final public func clearOpenPeriod()
    final public var languageIsSet: Swift.Bool {
      get
    }
    final public func setLanguage(_ value: Swift.String)
    final public func clearLanguage()
    final public var ledSettingsIsSet: Swift.Bool {
      get
    }
    final public func setLedSettings(_ value: Swift.UInt8)
    final public func clearLedSettings()
    final public var autoRelockTimeIsSet: Swift.Bool {
      get
    }
    final public func setAutoRelockTime(_ value: Swift.UInt32)
    final public func clearAutoRelockTime()
    final public var soundVolumeIsSet: Swift.Bool {
      get
    }
    final public func setSoundVolume(_ value: Swift.UInt8)
    final public func clearSoundVolume()
    final public var operatingModeIsSet: Swift.Bool {
      get
    }
    final public func setOperatingMode(_ value: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum)
    final public func clearOperatingMode()
    final public var enableLocalProgrammingIsSet: Swift.Bool {
      get
    }
    final public func setEnableLocalProgramming(_ value: Swift.Bool)
    final public func clearEnableLocalProgramming()
    final public var enableOneTouchLockingIsSet: Swift.Bool {
      get
    }
    final public func setEnableOneTouchLocking(_ value: Swift.Bool)
    final public func clearEnableOneTouchLocking()
    final public var enableInsideStatusLedIsSet: Swift.Bool {
      get
    }
    final public func setEnableInsideStatusLed(_ value: Swift.Bool)
    final public func clearEnableInsideStatusLed()
    final public var enablePrivacyModeButtonIsSet: Swift.Bool {
      get
    }
    final public func setEnablePrivacyModeButton(_ value: Swift.Bool)
    final public func clearEnablePrivacyModeButton()
    final public var localProgrammingFeaturesIsSet: Swift.Bool {
      get
    }
    final public func setLocalProgrammingFeatures(_ value: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures)
    final public func clearLocalProgrammingFeatures()
    final public var wrongCodeEntryLimitIsSet: Swift.Bool {
      get
    }
    final public func setWrongCodeEntryLimit(_ value: Swift.UInt8)
    final public func clearWrongCodeEntryLimit()
    final public var userCodeTemporaryDisableTimeIsSet: Swift.Bool {
      get
    }
    final public func setUserCodeTemporaryDisableTime(_ value: Swift.UInt8)
    final public func clearUserCodeTemporaryDisableTime()
    final public var sendPinOverTheAirIsSet: Swift.Bool {
      get
    }
    final public func setSendPinOverTheAir(_ value: Swift.Bool)
    final public func clearSendPinOverTheAir()
    final public var requirePinforRemoteOperationIsSet: Swift.Bool {
      get
    }
    final public func setRequirePinforRemoteOperation(_ value: Swift.Bool)
    final public func clearRequirePinforRemoteOperation()
    final public var expiringUserTimeoutIsSet: Swift.Bool {
      get
    }
    final public func setExpiringUserTimeout(_ value: Swift.UInt16)
    final public func clearExpiringUserTimeout()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public struct CredentialStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let credentialType: GoogleHomeTypes.Matter.DoorLockTrait.CredentialTypeEnum
    public let credentialIndex: Swift.UInt16
    public init(credentialType: GoogleHomeTypes.Matter.DoorLockTrait.CredentialTypeEnum, credentialIndex: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct, b: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public struct DoorLockAlarmEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmCode: GoogleHomeTypes.Matter.DoorLockTrait.AlarmCodeEnum?
      public init(alarmCode: GoogleHomeTypes.Matter.DoorLockTrait.AlarmCodeEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent.Payload, b: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent, b: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DoorStateChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let doorState: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum?
      public init(doorState: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent.Payload, b: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent, b: GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LockOperationEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let lockOperationType: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum?
      public let operationSource: GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum?
      public let userIndex: Swift.UInt16?
      public let fabricIndex: Swift.UInt8?
      public let sourceNode: Swift.UInt64?
      public let credentials: [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?
      public init(lockOperationType: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum?, operationSource: GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum?, userIndex: Swift.UInt16?, fabricIndex: Swift.UInt8?, sourceNode: Swift.UInt64?, credentials: [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent.Payload, b: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent, b: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LockOperationErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let lockOperationType: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum?
      public let operationSource: GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum?
      public let operationError: GoogleHomeTypes.Matter.DoorLockTrait.OperationErrorEnum?
      public let userIndex: Swift.UInt16?
      public let fabricIndex: Swift.UInt8?
      public let sourceNode: Swift.UInt64?
      public let credentials: [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?
      public init(lockOperationType: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum?, operationSource: GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum?, operationError: GoogleHomeTypes.Matter.DoorLockTrait.OperationErrorEnum?, userIndex: Swift.UInt16?, fabricIndex: Swift.UInt8?, sourceNode: Swift.UInt64?, credentials: [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent.Payload, b: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent, b: GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LockUserChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let lockDataType: GoogleHomeTypes.Matter.DoorLockTrait.LockDataTypeEnum?
      public let dataOperationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum?
      public let operationSource: GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum?
      public let userIndex: Swift.UInt16?
      public let fabricIndex: Swift.UInt8?
      public let sourceNode: Swift.UInt64?
      public let dataIndex: Swift.UInt16?
      public init(lockDataType: GoogleHomeTypes.Matter.DoorLockTrait.LockDataTypeEnum?, dataOperationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum?, operationSource: GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum?, userIndex: Swift.UInt16?, fabricIndex: Swift.UInt8?, sourceNode: Swift.UInt64?, dataIndex: Swift.UInt16?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent.Payload, b: GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent, b: GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsLockDoorCommand: Swift.Bool {
    get
  }
  public func lockDoor(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.LockDoorCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func lockDoorBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.DoorLockTrait.LockDoorCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct LockDoorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var pinCodeIsSet: Swift.Bool {
        get
      }
      final public func setPinCode(_ value: Foundation.Data)
      final public func clearPinCode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsUnlockDoorCommand: Swift.Bool {
    get
  }
  public func unlockDoor(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.UnlockDoorCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func unlockDoorBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.DoorLockTrait.UnlockDoorCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UnlockDoorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var pinCodeIsSet: Swift.Bool {
        get
      }
      final public func setPinCode(_ value: Foundation.Data)
      final public func clearPinCode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsUnlockWithTimeoutCommand: Swift.Bool {
    get
  }
  public func unlockWithTimeout(timeout: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.UnlockWithTimeoutCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func unlockWithTimeoutBatchable(timeout: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.DoorLockTrait.UnlockWithTimeoutCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UnlockWithTimeoutCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var pinCodeIsSet: Swift.Bool {
        get
      }
      final public func setPinCode(_ value: Foundation.Data)
      final public func clearPinCode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsSetWeekDayScheduleCommand: Swift.Bool {
    get
  }
  public func setWeekDaySchedule(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16, daysMask: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap, startHour: Swift.UInt8, startMinute: Swift.UInt8, endHour: Swift.UInt8, endMinute: Swift.UInt8) async throws
  public func setWeekDayScheduleBatchable(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16, daysMask: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap, startHour: Swift.UInt8, startMinute: Swift.UInt8, endHour: Swift.UInt8, endMinute: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetWeekDayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public typealias GetWeekDayScheduleCommandResponse = GoogleHomeTypes.Matter.DoorLockTrait.GetWeekDayScheduleCommand.Response
  public var supportsGetWeekDayScheduleCommand: Swift.Bool {
    get
  }
  public func getWeekDaySchedule(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.DoorLockTrait.GetWeekDayScheduleCommandResponse
  public func getWeekDayScheduleBatchable(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DoorLockTrait.GetWeekDayScheduleCommandResponse>
  public struct GetWeekDayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let weekDayIndex: Swift.UInt8
      public let userIndex: Swift.UInt16
      public let status: GoogleHomeTypes.Matter.DoorLockTrait.DlStatus
      public let daysMask: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap?
      public let startHour: Swift.UInt8?
      public let startMinute: Swift.UInt8?
      public let endHour: Swift.UInt8?
      public let endMinute: Swift.UInt8?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsClearWeekDayScheduleCommand: Swift.Bool {
    get
  }
  public func clearWeekDaySchedule(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16) async throws
  public func clearWeekDayScheduleBatchable(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearWeekDayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsSetYearDayScheduleCommand: Swift.Bool {
    get
  }
  public func setYearDaySchedule(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16, localStartTime: Swift.UInt32, localEndTime: Swift.UInt32) async throws
  public func setYearDayScheduleBatchable(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16, localStartTime: Swift.UInt32, localEndTime: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetYearDayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public typealias GetYearDayScheduleCommandResponse = GoogleHomeTypes.Matter.DoorLockTrait.GetYearDayScheduleCommand.Response
  public var supportsGetYearDayScheduleCommand: Swift.Bool {
    get
  }
  public func getYearDaySchedule(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.DoorLockTrait.GetYearDayScheduleCommandResponse
  public func getYearDayScheduleBatchable(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DoorLockTrait.GetYearDayScheduleCommandResponse>
  public struct GetYearDayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let yearDayIndex: Swift.UInt8
      public let userIndex: Swift.UInt16
      public let status: GoogleHomeTypes.Matter.DoorLockTrait.DlStatus
      public let localStartTime: Swift.UInt32?
      public let localEndTime: Swift.UInt32?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsClearYearDayScheduleCommand: Swift.Bool {
    get
  }
  public func clearYearDaySchedule(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16) async throws
  public func clearYearDayScheduleBatchable(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearYearDayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsSetHolidayScheduleCommand: Swift.Bool {
    get
  }
  public func setHolidaySchedule(holidayIndex: Swift.UInt8, localStartTime: Swift.UInt32, localEndTime: Swift.UInt32, operatingMode: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum) async throws
  public func setHolidayScheduleBatchable(holidayIndex: Swift.UInt8, localStartTime: Swift.UInt32, localEndTime: Swift.UInt32, operatingMode: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetHolidayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public typealias GetHolidayScheduleCommandResponse = GoogleHomeTypes.Matter.DoorLockTrait.GetHolidayScheduleCommand.Response
  public var supportsGetHolidayScheduleCommand: Swift.Bool {
    get
  }
  public func getHolidaySchedule(holidayIndex: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.DoorLockTrait.GetHolidayScheduleCommandResponse
  public func getHolidayScheduleBatchable(holidayIndex: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DoorLockTrait.GetHolidayScheduleCommandResponse>
  public struct GetHolidayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let holidayIndex: Swift.UInt8
      public let status: GoogleHomeTypes.Matter.DoorLockTrait.DlStatus
      public let localStartTime: Swift.UInt32?
      public let localEndTime: Swift.UInt32?
      public let operatingMode: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsClearHolidayScheduleCommand: Swift.Bool {
    get
  }
  public func clearHolidaySchedule(holidayIndex: Swift.UInt8) async throws
  public func clearHolidayScheduleBatchable(holidayIndex: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearHolidayScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsSetUserCommand: Swift.Bool {
    get
  }
  public func setUser(operationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum, userIndex: Swift.UInt16, userName: Swift.String?, userUniqueID: Swift.UInt32?, userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?, userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?, credentialRule: GoogleHomeTypes.Matter.DoorLockTrait.CredentialRuleEnum?) async throws
  public func setUserBatchable(operationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum, userIndex: Swift.UInt16, userName: Swift.String?, userUniqueID: Swift.UInt32?, userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?, userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?, credentialRule: GoogleHomeTypes.Matter.DoorLockTrait.CredentialRuleEnum?) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetUserCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public typealias GetUserCommandResponse = GoogleHomeTypes.Matter.DoorLockTrait.GetUserCommand.Response
  public var supportsGetUserCommand: Swift.Bool {
    get
  }
  public func getUser(userIndex: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.DoorLockTrait.GetUserCommandResponse
  public func getUserBatchable(userIndex: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DoorLockTrait.GetUserCommandResponse>
  public struct GetUserCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let userIndex: Swift.UInt16
      public let userName: Swift.String?
      public let userUniqueID: Swift.UInt32?
      public let userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?
      public let userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?
      public let credentialRule: GoogleHomeTypes.Matter.DoorLockTrait.CredentialRuleEnum?
      public let credentials: [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?
      public let creatorFabricIndex: Swift.UInt8?
      public let lastModifiedFabricIndex: Swift.UInt8?
      public let nextUserIndex: Swift.UInt16?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsClearUserCommand: Swift.Bool {
    get
  }
  public func clearUser(userIndex: Swift.UInt16) async throws
  public func clearUserBatchable(userIndex: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearUserCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public typealias SetCredentialCommandResponse = GoogleHomeTypes.Matter.DoorLockTrait.SetCredentialCommand.Response
  public var supportsSetCredentialCommand: Swift.Bool {
    get
  }
  public func setCredential(operationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum, credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct, credentialData: Foundation.Data, userIndex: Swift.UInt16?, userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?, userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?) async throws -> GoogleHomeTypes.Matter.DoorLockTrait.SetCredentialCommandResponse
  public func setCredentialBatchable(operationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum, credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct, credentialData: Foundation.Data, userIndex: Swift.UInt16?, userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?, userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DoorLockTrait.SetCredentialCommandResponse>
  public struct SetCredentialCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.DoorLockTrait.DlStatus
      public let userIndex: Swift.UInt16?
      public let nextCredentialIndex: Swift.UInt16?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public typealias GetCredentialStatusCommandResponse = GoogleHomeTypes.Matter.DoorLockTrait.GetCredentialStatusCommand.Response
  public var supportsGetCredentialStatusCommand: Swift.Bool {
    get
  }
  public func getCredentialStatus(credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct) async throws -> GoogleHomeTypes.Matter.DoorLockTrait.GetCredentialStatusCommandResponse
  public func getCredentialStatusBatchable(credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.DoorLockTrait.GetCredentialStatusCommandResponse>
  public struct GetCredentialStatusCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let credentialExists: Swift.Bool
      public let userIndex: Swift.UInt16?
      public let creatorFabricIndex: Swift.UInt8?
      public let lastModifiedFabricIndex: Swift.UInt8?
      public let nextCredentialIndex: Swift.UInt16?
      public let credentialData: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsClearCredentialCommand: Swift.Bool {
    get
  }
  public func clearCredential(credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct?) async throws
  public func clearCredentialBatchable(credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct?) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearCredentialCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsUnboltDoorCommand: Swift.Bool {
    get
  }
  public func unboltDoor(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.UnboltDoorCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func unboltDoorBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.DoorLockTrait.UnboltDoorCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UnboltDoorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var pinCodeIsSet: Swift.Bool {
        get
      }
      final public func setPinCode(_ value: Foundation.Data)
      final public func clearPinCode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsSetAliroReaderConfigCommand: Swift.Bool {
    get
  }
  public func setAliroReaderConfig(signingKey: Foundation.Data, verificationKey: Foundation.Data, groupIdentifier: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.SetAliroReaderConfigCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func setAliroReaderConfigBatchable(signingKey: Foundation.Data, verificationKey: Foundation.Data, groupIdentifier: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.DoorLockTrait.SetAliroReaderConfigCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetAliroReaderConfigCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var groupResolvingKeyIsSet: Swift.Bool {
        get
      }
      final public func setGroupResolvingKey(_ value: Foundation.Data)
      final public func clearGroupResolvingKey()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public var supportsClearAliroReaderConfigCommand: Swift.Bool {
    get
  }
  public func clearAliroReaderConfig() async throws
  public func clearAliroReaderConfigBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearAliroReaderConfigCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public enum AlarmCodeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case lockJammed
    case lockFactoryReset
    case lockRadioPowerCycled
    case wrongCodeEntryLimit
    case frontEsceutcheonRemoved
    case doorForcedOpen
    case doorAjar
    case forcedUser
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.AlarmCodeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum CredentialRuleEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case single
    case dual
    case tri
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.CredentialRuleEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum CredentialTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case programmingPin
    case pin
    case rfid
    case fingerprint
    case fingerVein
    case face
    case aliroCredentialIssuerKey
    case aliroEvictableEndpointKey
    case aliroNonEvictableEndpointKey
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.CredentialTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DataOperationTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case add
    case clear
    case modify
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DlLockState : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case notFullyLocked
    case locked
    case unlocked
    case unlatched
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DlLockState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DlLockType : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case deadBolt
    case magnetic
    case other
    case mortise
    case rim
    case latchBolt
    case cylindricalLock
    case tubularLock
    case interconnectedLock
    case deadLatch
    case doorFurniture
    case eurocylinder
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DlLockType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DlStatus : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case failure
    case duplicate
    case occupied
    case invalidField
    case resourceExhausted
    case notFound
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DlStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DoorLockOperationEventCode : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknownOrMfgSpecific
    case lock
    case unlock
    case lockInvalidPinOrId
    case lockInvalidSchedule
    case unlockInvalidPinOrId
    case unlockInvalidSchedule
    case oneTouchLock
    case keyLock
    case keyUnlock
    case autoLock
    case scheduleLock
    case scheduleUnlock
    case manualLock
    case manualUnlock
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DoorLockOperationEventCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DoorLockProgrammingEventCode : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknownOrMfgSpecific
    case masterCodeChanged
    case pinAdded
    case pinDeleted
    case pinChanged
    case idAdded
    case idDeleted
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DoorLockProgrammingEventCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DoorLockSetPinOrIdStatus : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case generalFailure
    case memoryFull
    case duplicateCodeError
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DoorLockSetPinOrIdStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DoorLockUserStatus : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case available
    case occupiedEnabled
    case occupiedDisabled
    case notSupported
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DoorLockUserStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DoorLockUserType : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unrestricted
    case yearDayScheduleUser
    case weekDayScheduleUser
    case masterUser
    case nonAccessUser
    case notSupported
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DoorLockUserType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DoorStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case doorOpen
    case doorClosed
    case doorJammed
    case doorForcedOpen
    case doorUnspecifiedError
    case doorAjar
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum LockDataTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case programmingCode
    case userIndex
    case weekDaySchedule
    case yearDaySchedule
    case holidaySchedule
    case pin
    case rfid
    case fingerprint
    case fingerVein
    case face
    case aliroCredentialIssuerKey
    case aliroEvictableEndpointKey
    case aliroNonEvictableEndpointKey
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.LockDataTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum LockOperationTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case lock
    case unlock
    case nonAccessUserEvent
    case forcedUserEvent
    case unlatch
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperatingModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case normal
    case vacation
    case privacy
    case noRemoteLockUnlock
    case passage
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperationErrorEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case invalidCredential
    case disabledUserDenied
    case restricted
    case insufficientBattery
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.OperationErrorEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperationSourceEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case manual
    case proprietaryRemote
    case keypad
    case auto
    case button
    case schedule
    case remote
    case rfid
    case biometric
    case aliro
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum UserStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case available
    case occupiedEnabled
    case occupiedDisabled
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum UserTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unrestrictedUser
    case yearDayScheduleUser
    case weekDayScheduleUser
    case programmingUser
    case nonAccessUser
    case forcedUser
    case disposableUser
    case expiringUser
    case scheduleRestrictedUser
    case remoteOnlyUser
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public struct DaysMaskMap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let sunday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public static let monday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public static let tuesday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public static let wednesday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public static let thursday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public static let friday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public static let saturday: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap
    public typealias RawValue = Swift.UInt8
  }
  public struct DlCredentialRuleMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let single: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask
    public static let dual: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask
    public static let tri: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask
    public typealias RawValue = Swift.UInt8
  }
  public struct DlCredentialRulesSupport : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let single: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRulesSupport
    public static let dual: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRulesSupport
    public static let tri: GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRulesSupport
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRulesSupport
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRulesSupport
    public typealias RawValue = Swift.UInt8
  }
  public struct DlDefaultConfigurationRegister : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let enableLocalProgrammingEnabled: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public static let keypadInterfaceDefaultAccessEnabled: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public static let remoteInterfaceDefaultAccessIsEnabled: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public static let soundEnabled: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public static let autoRelockTimeSet: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public static let ledSettingsSet: GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister
    public typealias RawValue = Swift.UInt16
  }
  public struct DlKeypadOperationEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let lock: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let unlock: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let lockInvalidPin: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let lockInvalidSchedule: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let unlockInvalidCode: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let unlockInvalidSchedule: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public static let nonAccessUserOpEvent: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadOperationEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlKeypadProgrammingEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public static let programmingPinChanged: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public static let pinAdded: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public static let pinCleared: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public static let pinChanged: GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlKeypadProgrammingEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlLocalProgrammingFeatures : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let addUsersCredentialsSchedulesLocally: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures
    public static let modifyUsersCredentialsSchedulesLocally: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures
    public static let clearUsersCredentialsSchedulesLocally: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures
    public static let adjustLockSettingsLocally: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures
    public typealias RawValue = Swift.UInt8
  }
  public struct DlManualOperationEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let thumbturnLock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let thumbturnUnlock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let oneTouchLock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let keyLock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let keyUnlock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let autoLock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let scheduleLock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let scheduleUnlock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let manualLock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public static let manualUnlock: GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlManualOperationEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlRfidOperationEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public static let lock: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public static let unlock: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public static let lockInvalidRfid: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public static let lockInvalidSchedule: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public static let unlockInvalidRfid: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public static let unlockInvalidSchedule: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlRfidOperationEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlRfidProgrammingEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidProgrammingEventMask
    public static let rfidCodeAdded: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidProgrammingEventMask
    public static let rfidCodeCleared: GoogleHomeTypes.Matter.DoorLockTrait.DlRfidProgrammingEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlRfidProgrammingEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlRfidProgrammingEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlRemoteOperationEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public static let lock: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public static let unlock: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public static let lockInvalidCode: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public static let lockInvalidSchedule: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public static let unlockInvalidCode: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public static let unlockInvalidSchedule: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteOperationEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlRemoteProgrammingEventMask : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let unknown: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public static let programmingPinChanged: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public static let pinAdded: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public static let pinCleared: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public static let pinChanged: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public static let rfidCodeAdded: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public static let rfidCodeCleared: GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlRemoteProgrammingEventMask
    public typealias RawValue = Swift.UInt16
  }
  public struct DlSupportedOperatingModes : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let normal: GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public static let vacation: GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public static let privacy: GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public static let noRemoteLockUnlock: GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public static let passage: GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes
    public typealias RawValue = Swift.UInt16
  }
  public struct DoorLockDayOfWeek : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let sunday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public static let monday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public static let tuesday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public static let wednesday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public static let thursday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public static let friday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public static let saturday: GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.DoorLockDayOfWeek
    public typealias RawValue = Swift.UInt8
  }
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let pinCredential: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let rfidCredential: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let fingerCredentials: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let logging: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let weekDayAccessSchedules: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let doorPositionSensor: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let faceCredentials: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let credentialsOverTheAirAccess: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let user: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let notification: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let yearDayAccessSchedules: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let holidaySchedules: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let unbolt: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let aliroProvisioning: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public static let aliroBLEUWB: GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.DoorLockTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lockState
    case lockType
    case actuatorEnabled
    case doorState
    case doorOpenEvents
    case doorClosedEvents
    case openPeriod
    case numberOfTotalUsersSupported
    case numberOfPinUsersSupported
    case numberOfRfidUsersSupported
    case numberOfWeekDaySchedulesSupportedPerUser
    case numberOfYearDaySchedulesSupportedPerUser
    case numberOfHolidaySchedulesSupported
    case maxPinCodeLength
    case minPinCodeLength
    case maxRfidCodeLength
    case minRfidCodeLength
    case credentialRulesSupport
    case numberOfCredentialsSupportedPerUser
    case language
    case ledSettings
    case autoRelockTime
    case soundVolume
    case operatingMode
    case supportedOperatingModes
    case defaultConfigurationRegister
    case enableLocalProgramming
    case enableOneTouchLocking
    case enableInsideStatusLed
    case enablePrivacyModeButton
    case localProgrammingFeatures
    case wrongCodeEntryLimit
    case userCodeTemporaryDisableTime
    case sendPinOverTheAir
    case requirePinforRemoteOperation
    case expiringUserTimeout
    case aliroReaderVerificationKey
    case aliroReaderGroupIdentifier
    case aliroReaderGroupSubIdentifier
    case aliroExpeditedTransactionSupportedProtocolVersions
    case aliroGroupResolvingKey
    case aliroSupportedBLEUWBProtocolVersions
    case aliroBLEAdvertisingVersion
    case numberOfAliroCredentialIssuerKeysSupported
    case numberOfAliroEndpointKeysSupported
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DoorLockTrait {
  public var lockState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DlLockState?> {
    get
  }
  public var lockType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DlLockType> {
    get
  }
  public var actuatorEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var doorState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum?> {
    get
  }
  public var doorOpenEvents: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var doorClosedEvents: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var openPeriod: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var numberOfTotalUsersSupported: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var numberOfPinUsersSupported: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var numberOfRfidUsersSupported: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var numberOfWeekDaySchedulesSupportedPerUser: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfYearDaySchedulesSupportedPerUser: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfHolidaySchedulesSupported: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var maxPinCodeLength: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var minPinCodeLength: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var maxRfidCodeLength: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var minRfidCodeLength: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var credentialRulesSupport: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DlCredentialRuleMask> {
    get
  }
  public var numberOfCredentialsSupportedPerUser: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var language: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var ledSettings: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var autoRelockTime: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var soundVolume: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var operatingMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum> {
    get
  }
  public var supportedOperatingModes: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DlSupportedOperatingModes> {
    get
  }
  public var defaultConfigurationRegister: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DlDefaultConfigurationRegister> {
    get
  }
  public var enableLocalProgramming: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var enableOneTouchLocking: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var enableInsideStatusLed: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var enablePrivacyModeButton: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var localProgrammingFeatures: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures> {
    get
  }
  public var wrongCodeEntryLimit: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var userCodeTemporaryDisableTime: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var sendPinOverTheAir: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var requirePinforRemoteOperation: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var expiringUserTimeout: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var aliroReaderVerificationKey: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var aliroReaderGroupIdentifier: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var aliroReaderGroupSubIdentifier: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var aliroExpeditedTransactionSupportedProtocolVersions: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var aliroGroupResolvingKey: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var aliroSupportedBLEUWBProtocolVersions: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var aliroBLEAdvertisingVersion: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfAliroCredentialIssuerKeysSupported: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var numberOfAliroEndpointKeysSupported: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.DoorLockTrait {
  final public func setDoorOpenEvents(_ value: Swift.UInt32)
  final public func setDoorClosedEvents(_ value: Swift.UInt32)
  final public func setOpenPeriod(_ value: Swift.UInt16)
  final public func setLanguage(_ value: Swift.String)
  final public func setLedSettings(_ value: Swift.UInt8)
  final public func setAutoRelockTime(_ value: Swift.UInt32)
  final public func setSoundVolume(_ value: Swift.UInt8)
  final public func setOperatingMode(_ value: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum)
  final public func setEnableLocalProgramming(_ value: Swift.Bool)
  final public func setEnableOneTouchLocking(_ value: Swift.Bool)
  final public func setEnableInsideStatusLed(_ value: Swift.Bool)
  final public func setEnablePrivacyModeButton(_ value: Swift.Bool)
  final public func setLocalProgrammingFeatures(_ value: GoogleHomeTypes.Matter.DoorLockTrait.DlLocalProgrammingFeatures)
  final public func setWrongCodeEntryLimit(_ value: Swift.UInt8)
  final public func setUserCodeTemporaryDisableTime(_ value: Swift.UInt8)
  final public func setSendPinOverTheAir(_ value: Swift.Bool)
  final public func setRequirePinforRemoteOperation(_ value: Swift.Bool)
  final public func setExpiringUserTimeout(_ value: Swift.UInt16)
}
extension GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DoorLockTrait.DoorLockAlarmEvent {
  public var alarmCode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.AlarmCodeEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case doorState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DoorLockTrait.DoorStateChangeEvent {
  public var doorState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DoorStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lockOperationType
    case operationSource
    case userIndex
    case fabricIndex
    case sourceNode
    case credentials
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DoorLockTrait.LockOperationEvent {
  public var lockOperationType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum> {
    get
  }
  public var operationSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum> {
    get
  }
  public var userIndex: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var sourceNode: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var credentials: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?> {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lockOperationType
    case operationSource
    case operationError
    case userIndex
    case fabricIndex
    case sourceNode
    case credentials
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DoorLockTrait.LockOperationErrorEvent {
  public var lockOperationType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.LockOperationTypeEnum> {
    get
  }
  public var operationSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum> {
    get
  }
  public var operationError: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.OperationErrorEnum> {
    get
  }
  public var userIndex: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var sourceNode: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var credentials: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct]?> {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lockDataType
    case dataOperationType
    case operationSource
    case userIndex
    case fabricIndex
    case sourceNode
    case dataIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.DoorLockTrait.LockUserChangeEvent {
  public var lockDataType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.LockDataTypeEnum> {
    get
  }
  public var dataOperationType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum> {
    get
  }
  public var operationSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.OperationSourceEnum> {
    get
  }
  public var userIndex: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var sourceNode: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var dataIndex: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
}
extension GoogleHomeTypes.Matter.DoorLockTrait.LockDoorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case pinCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.LockDoorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.LockDoorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.UnlockDoorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case pinCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.UnlockDoorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.UnlockDoorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.UnlockWithTimeoutCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case timeout
    case pinCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.UnlockWithTimeoutCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.UnlockWithTimeoutCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.SetWeekDayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case weekDayIndex
    case userIndex
    case daysMask
    case startHour
    case startMinute
    case endHour
    case endMinute
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.SetWeekDayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.SetWeekDayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.GetWeekDayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case weekDayIndex
    case userIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.GetWeekDayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.GetWeekDayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.ClearWeekDayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case weekDayIndex
    case userIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.ClearWeekDayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.ClearWeekDayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.SetYearDayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case yearDayIndex
    case userIndex
    case localStartTime
    case localEndTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.SetYearDayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.SetYearDayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.GetYearDayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case yearDayIndex
    case userIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.GetYearDayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.GetYearDayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.ClearYearDayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case yearDayIndex
    case userIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.ClearYearDayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.ClearYearDayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.SetHolidayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case holidayIndex
    case localStartTime
    case localEndTime
    case operatingMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.SetHolidayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.SetHolidayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.GetHolidayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case holidayIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.GetHolidayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.GetHolidayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.ClearHolidayScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case holidayIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.ClearHolidayScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.ClearHolidayScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.SetUserCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationType
    case userIndex
    case userName
    case userUniqueID
    case userStatus
    case userType
    case credentialRule
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.SetUserCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.SetUserCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.GetUserCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case userIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.GetUserCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.GetUserCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.ClearUserCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case userIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.ClearUserCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.ClearUserCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.SetCredentialCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationType
    case credential
    case credentialData
    case userIndex
    case userStatus
    case userType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.SetCredentialCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.SetCredentialCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.GetCredentialStatusCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case credential
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.GetCredentialStatusCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.GetCredentialStatusCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.ClearCredentialCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case credential
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.ClearCredentialCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.ClearCredentialCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.UnboltDoorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case pinCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.UnboltDoorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.UnboltDoorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait.SetAliroReaderConfigCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case signingKey
    case verificationKey
    case groupIdentifier
    case groupResolvingKey
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.SetAliroReaderConfigCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.SetAliroReaderConfigCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.DoorLockTrait {
  public static func lockDoor(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.LockDoorCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func unlockDoor(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.UnlockDoorCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func unlockWithTimeout(timeout: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.UnlockWithTimeoutCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func setWeekDaySchedule(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16, daysMask: GoogleHomeTypes.Matter.DoorLockTrait.DaysMaskMap, startHour: Swift.UInt8, startMinute: Swift.UInt8, endHour: Swift.UInt8, endMinute: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func getWeekDaySchedule(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func clearWeekDaySchedule(weekDayIndex: Swift.UInt8, userIndex: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func setYearDaySchedule(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16, localStartTime: Swift.UInt32, localEndTime: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
  public static func getYearDaySchedule(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func clearYearDaySchedule(yearDayIndex: Swift.UInt8, userIndex: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func setHolidaySchedule(holidayIndex: Swift.UInt8, localStartTime: Swift.UInt32, localEndTime: Swift.UInt32, operatingMode: GoogleHomeTypes.Matter.DoorLockTrait.OperatingModeEnum) -> GoogleHomeSDK.AutomationCommand
  public static func getHolidaySchedule(holidayIndex: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func clearHolidaySchedule(holidayIndex: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func setUser(operationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum, userIndex: Swift.UInt16, userName: Swift.String?, userUniqueID: Swift.UInt32?, userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?, userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?, credentialRule: GoogleHomeTypes.Matter.DoorLockTrait.CredentialRuleEnum?) -> GoogleHomeSDK.AutomationCommand
  public static func getUser(userIndex: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func clearUser(userIndex: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func setCredential(operationType: GoogleHomeTypes.Matter.DoorLockTrait.DataOperationTypeEnum, credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct, credentialData: Foundation.Data, userIndex: Swift.UInt16?, userStatus: GoogleHomeTypes.Matter.DoorLockTrait.UserStatusEnum?, userType: GoogleHomeTypes.Matter.DoorLockTrait.UserTypeEnum?) -> GoogleHomeSDK.AutomationCommand
  public static func getCredentialStatus(credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct) -> GoogleHomeSDK.AutomationCommand
  public static func clearCredential(credential: GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct?) -> GoogleHomeSDK.AutomationCommand
  public static func unboltDoor(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.UnboltDoorCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func setAliroReaderConfig(signingKey: Foundation.Data, verificationKey: Foundation.Data, groupIdentifier: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.DoorLockTrait.SetAliroReaderConfigCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func clearAliroReaderConfig() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case credentialType
    case credentialIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.DoorLockTrait.CredentialStruct {
  public var credentialType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.DoorLockTrait.CredentialTypeEnum> {
    get
  }
  public var credentialIndex: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ElectricalEnergyMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($accuracy) public var accuracy: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct? {
      get
    }
    public var $accuracy: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cumulativeEnergyImported) public var cumulativeEnergyImported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct? {
      get
    }
    public var $cumulativeEnergyImported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cumulativeEnergyExported) public var cumulativeEnergyExported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct? {
      get
    }
    public var $cumulativeEnergyExported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($periodicEnergyImported) public var periodicEnergyImported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct? {
      get
    }
    public var $periodicEnergyImported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($periodicEnergyExported) public var periodicEnergyExported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct? {
      get
    }
    public var $periodicEnergyExported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cumulativeEnergyReset) public var cumulativeEnergyReset: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct? {
      get
    }
    public var $cumulativeEnergyReset: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait, rhs: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public struct MeasurementAccuracyRangeStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let rangeMin: Swift.Int64
    public let rangeMax: Swift.Int64
    public let percentMax: Swift.UInt16?
    public let percentMin: Swift.UInt16?
    public let percentTypical: Swift.UInt16?
    public let fixedMax: Swift.UInt64?
    public let fixedMin: Swift.UInt64?
    public let fixedTypical: Swift.UInt64?
    public init(rangeMin: Swift.Int64, rangeMax: Swift.Int64, percentMax: Swift.UInt16?, percentMin: Swift.UInt16?, percentTypical: Swift.UInt16?, fixedMax: Swift.UInt64?, fixedMin: Swift.UInt64?, fixedTypical: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MeasurementAccuracyStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let measurementType: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementTypeEnum
    public let measured: Swift.Bool
    public let minMeasuredValue: Swift.Int64
    public let maxMeasuredValue: Swift.Int64
    public let accuracyRanges: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct]
    public init(measurementType: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementTypeEnum, measured: Swift.Bool, minMeasuredValue: Swift.Int64, maxMeasuredValue: Swift.Int64, accuracyRanges: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct CumulativeEnergyResetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let importedResetTimestamp: Swift.UInt32?
    public let exportedResetTimestamp: Swift.UInt32?
    public let importedResetSystime: Swift.UInt64?
    public let exportedResetSystime: Swift.UInt64?
    public init(importedResetTimestamp: Swift.UInt32?, exportedResetTimestamp: Swift.UInt32?, importedResetSystime: Swift.UInt64?, exportedResetSystime: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EnergyMeasurementStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let energy: Swift.Int64
    public let startTimestamp: Swift.UInt32?
    public let endTimestamp: Swift.UInt32?
    public let startSystime: Swift.UInt64?
    public let endSystime: Swift.UInt64?
    public init(energy: Swift.Int64, startTimestamp: Swift.UInt32?, endTimestamp: Swift.UInt32?, startSystime: Swift.UInt64?, endSystime: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public struct CumulativeEnergyMeasuredEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let energyImported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?
      public let energyExported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?
      public init(energyImported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?, energyExported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent.Payload, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PeriodicEnergyMeasuredEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let energyImported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?
      public let energyExported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?
      public init(energyImported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?, energyExported: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent.Payload, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent, b: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public enum MeasurementTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case voltage
    case activeCurrent
    case reactiveCurrent
    case apparentCurrent
    case activePower
    case reactivePower
    case apparentPower
    case rmsVoltage
    case rmsCurrent
    case rmsPower
    case frequency
    case powerFactor
    case neutralCurrent
    case electricalEnergy
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let importedEnergy: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature
    public static let exportedEnergy: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature
    public static let cumulativeEnergy: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature
    public static let periodicEnergy: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case accuracy
    case cumulativeEnergyImported
    case cumulativeEnergyExported
    case periodicEnergyImported
    case periodicEnergyExported
    case cumulativeEnergyReset
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait {
  public var accuracy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct> {
    get
  }
  public var cumulativeEnergyImported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?> {
    get
  }
  public var cumulativeEnergyExported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?> {
    get
  }
  public var periodicEnergyImported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?> {
    get
  }
  public var periodicEnergyExported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct?> {
    get
  }
  public var cumulativeEnergyReset: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case energyImported
    case energyExported
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyMeasuredEvent {
  public var energyImported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
    get
  }
  public var energyExported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case energyImported
    case energyExported
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.PeriodicEnergyMeasuredEvent {
  public var energyImported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
    get
  }
  public var energyExported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rangeMin
    case rangeMax
    case percentMax
    case percentMin
    case percentTypical
    case fixedMax
    case fixedMin
    case fixedTypical
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct {
  public var rangeMin: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var rangeMax: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var percentMax: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var percentMin: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var percentTypical: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var fixedMax: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var fixedMin: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var fixedTypical: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measurementType
    case measured
    case minMeasuredValue
    case maxMeasuredValue
    case accuracyRanges
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyStruct {
  public var measurementType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementTypeEnum> {
    get
  }
  public var measured: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var accuracyRanges: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.MeasurementAccuracyRangeStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case importedResetTimestamp
    case exportedResetTimestamp
    case importedResetSystime
    case exportedResetSystime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.CumulativeEnergyResetStruct {
  public var importedResetTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var exportedResetTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var importedResetSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var exportedResetSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case energy
    case startTimestamp
    case endTimestamp
    case startSystime
    case endSystime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait.EnergyMeasurementStruct {
  public var energy: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var startTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var endTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var startSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var endSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ElectricalPowerMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($powerMode) public var powerMode: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.PowerModeEnum? {
      get
    }
    public var $powerMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.PowerModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfMeasurementTypes) public var numberOfMeasurementTypes: Swift.UInt8? {
      get
    }
    public var $numberOfMeasurementTypes: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($accuracy) public var accuracy: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct]? {
      get
    }
    public var $accuracy: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ranges) public var ranges: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct]? {
      get
    }
    public var $ranges: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($voltage) public var voltage: Swift.Int64? {
      get
    }
    public var $voltage: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeCurrent) public var activeCurrent: Swift.Int64? {
      get
    }
    public var $activeCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($reactiveCurrent) public var reactiveCurrent: Swift.Int64? {
      get
    }
    public var $reactiveCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($apparentCurrent) public var apparentCurrent: Swift.Int64? {
      get
    }
    public var $apparentCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activePower) public var activePower: Swift.Int64? {
      get
    }
    public var $activePower: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($reactivePower) public var reactivePower: Swift.Int64? {
      get
    }
    public var $reactivePower: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($apparentPower) public var apparentPower: Swift.Int64? {
      get
    }
    public var $apparentPower: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rmsVoltage) public var rmsVoltage: Swift.Int64? {
      get
    }
    public var $rmsVoltage: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rmsCurrent) public var rmsCurrent: Swift.Int64? {
      get
    }
    public var $rmsCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rmsPower) public var rmsPower: Swift.Int64? {
      get
    }
    public var $rmsPower: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($frequency) public var frequency: Swift.Int64? {
      get
    }
    public var $frequency: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($harmonicCurrents) public var harmonicCurrents: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct]? {
      get
    }
    public var $harmonicCurrents: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($harmonicPhases) public var harmonicPhases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct]? {
      get
    }
    public var $harmonicPhases: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($powerFactor) public var powerFactor: Swift.Int64? {
      get
    }
    public var $powerFactor: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($neutralCurrent) public var neutralCurrent: Swift.Int64? {
      get
    }
    public var $neutralCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait, rhs: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public struct MeasurementAccuracyRangeStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let rangeMin: Swift.Int64
    public let rangeMax: Swift.Int64
    public let percentMax: Swift.UInt16?
    public let percentMin: Swift.UInt16?
    public let percentTypical: Swift.UInt16?
    public let fixedMax: Swift.UInt64?
    public let fixedMin: Swift.UInt64?
    public let fixedTypical: Swift.UInt64?
    public init(rangeMin: Swift.Int64, rangeMax: Swift.Int64, percentMax: Swift.UInt16?, percentMin: Swift.UInt16?, percentTypical: Swift.UInt16?, fixedMax: Swift.UInt64?, fixedMin: Swift.UInt64?, fixedTypical: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct, b: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MeasurementAccuracyStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let measurementType: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum
    public let measured: Swift.Bool
    public let minMeasuredValue: Swift.Int64
    public let maxMeasuredValue: Swift.Int64
    public let accuracyRanges: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct]
    public init(measurementType: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum, measured: Swift.Bool, minMeasuredValue: Swift.Int64, maxMeasuredValue: Swift.Int64, accuracyRanges: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct, b: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct HarmonicMeasurementStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let order: Swift.UInt8
    public let measurement: Swift.Int64?
    public init(order: Swift.UInt8, measurement: Swift.Int64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct, b: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MeasurementRangeStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let measurementType: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum
    public let min: Swift.Int64
    public let max: Swift.Int64
    public let startTimestamp: Swift.UInt32?
    public let endTimestamp: Swift.UInt32?
    public let minTimestamp: Swift.UInt32?
    public let maxTimestamp: Swift.UInt32?
    public let startSystime: Swift.UInt64?
    public let endSystime: Swift.UInt64?
    public let minSystime: Swift.UInt64?
    public let maxSystime: Swift.UInt64?
    public init(measurementType: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum, min: Swift.Int64, max: Swift.Int64, startTimestamp: Swift.UInt32?, endTimestamp: Swift.UInt32?, minTimestamp: Swift.UInt32?, maxTimestamp: Swift.UInt32?, startSystime: Swift.UInt64?, endSystime: Swift.UInt64?, minSystime: Swift.UInt64?, maxSystime: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct, b: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public struct MeasurementPeriodRangesEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let ranges: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct]?
      public init(ranges: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent.Payload, b: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent, b: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public enum MeasurementTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case voltage
    case activeCurrent
    case reactiveCurrent
    case apparentCurrent
    case activePower
    case reactivePower
    case apparentPower
    case rmsVoltage
    case rmsCurrent
    case rmsPower
    case frequency
    case powerFactor
    case neutralCurrent
    case electricalEnergy
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PowerModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case dc
    case ac
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.PowerModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let directCurrent: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public static let alternatingCurrent: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public static let polyphasePower: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public static let harmonics: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public static let powerQuality: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case powerMode
    case numberOfMeasurementTypes
    case accuracy
    case ranges
    case voltage
    case activeCurrent
    case reactiveCurrent
    case apparentCurrent
    case activePower
    case reactivePower
    case apparentPower
    case rmsVoltage
    case rmsCurrent
    case rmsPower
    case frequency
    case harmonicCurrents
    case harmonicPhases
    case powerFactor
    case neutralCurrent
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait {
  public var powerMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.PowerModeEnum> {
    get
  }
  public var numberOfMeasurementTypes: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var accuracy: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct]> {
    get
  }
  public var ranges: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct]> {
    get
  }
  public var voltage: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var activeCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var reactiveCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var apparentCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var activePower: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var reactivePower: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var apparentPower: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var rmsVoltage: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var rmsCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var rmsPower: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var frequency: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var harmonicCurrents: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct]?> {
    get
  }
  public var harmonicPhases: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct]?> {
    get
  }
  public var powerFactor: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var neutralCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case ranges
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementPeriodRangesEvent {
  public var ranges: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rangeMin
    case rangeMax
    case percentMax
    case percentMin
    case percentTypical
    case fixedMax
    case fixedMin
    case fixedTypical
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct {
  public var rangeMin: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var rangeMax: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var percentMax: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var percentMin: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var percentTypical: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var fixedMax: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var fixedMin: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var fixedTypical: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measurementType
    case measured
    case minMeasuredValue
    case maxMeasuredValue
    case accuracyRanges
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyStruct {
  public var measurementType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum> {
    get
  }
  public var measured: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var accuracyRanges: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementAccuracyRangeStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case order
    case measurement
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.HarmonicMeasurementStruct {
  public var order: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var measurement: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
}
extension GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measurementType
    case min
    case max
    case startTimestamp
    case endTimestamp
    case minTimestamp
    case maxTimestamp
    case startSystime
    case endSystime
    case minSystime
    case maxSystime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementRangeStruct {
  public var measurementType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait.MeasurementTypeEnum> {
    get
  }
  public var min: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var max: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var startTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var endTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var minTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var startSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var endSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var minSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var maxSystime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct EnergyEvseTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.EnergyEvseTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.EnergyEvseTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.EnergyEvseTrait
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($state) public var state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum? {
      get
    }
    public var $state: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supplyState) public var supplyState: GoogleHomeTypes.Matter.EnergyEvseTrait.SupplyStateEnum? {
      get
    }
    public var $supplyState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EnergyEvseTrait.SupplyStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($faultState) public var faultState: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum? {
      get
    }
    public var $faultState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($chargingEnabledUntil) public var chargingEnabledUntil: Swift.UInt32? {
      get
    }
    public var $chargingEnabledUntil: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dischargingEnabledUntil) public var dischargingEnabledUntil: Swift.UInt32? {
      get
    }
    public var $dischargingEnabledUntil: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($circuitCapacity) public var circuitCapacity: Swift.Int64? {
      get
    }
    public var $circuitCapacity: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minimumChargeCurrent) public var minimumChargeCurrent: Swift.Int64? {
      get
    }
    public var $minimumChargeCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maximumChargeCurrent) public var maximumChargeCurrent: Swift.Int64? {
      get
    }
    public var $maximumChargeCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maximumDischargeCurrent) public var maximumDischargeCurrent: Swift.Int64? {
      get
    }
    public var $maximumDischargeCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($userMaximumChargeCurrent) public var userMaximumChargeCurrent: Swift.Int64? {
      get
    }
    public var $userMaximumChargeCurrent: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($randomizationDelayWindow) public var randomizationDelayWindow: Swift.UInt32? {
      get
    }
    public var $randomizationDelayWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nextChargeStartTime) public var nextChargeStartTime: Swift.UInt32? {
      get
    }
    public var $nextChargeStartTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nextChargeTargetTime) public var nextChargeTargetTime: Swift.UInt32? {
      get
    }
    public var $nextChargeTargetTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nextChargeRequiredEnergy) public var nextChargeRequiredEnergy: Swift.Int64? {
      get
    }
    public var $nextChargeRequiredEnergy: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nextChargeTargetSoC) public var nextChargeTargetSoC: Swift.UInt8? {
      get
    }
    public var $nextChargeTargetSoC: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($approximateEVEfficiency) public var approximateEVEfficiency: Swift.UInt16? {
      get
    }
    public var $approximateEVEfficiency: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($stateOfCharge) public var stateOfCharge: Swift.UInt8? {
      get
    }
    public var $stateOfCharge: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batteryCapacity) public var batteryCapacity: Swift.Int64? {
      get
    }
    public var $batteryCapacity: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vehicleID) public var vehicleID: Swift.String? {
      get
    }
    public var $vehicleID: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sessionID) public var sessionID: Swift.UInt32? {
      get
    }
    public var $sessionID: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sessionDuration) public var sessionDuration: Swift.UInt32? {
      get
    }
    public var $sessionDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sessionEnergyCharged) public var sessionEnergyCharged: Swift.Int64? {
      get
    }
    public var $sessionEnergyCharged: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sessionEnergyDischarged) public var sessionEnergyDischarged: Swift.Int64? {
      get
    }
    public var $sessionEnergyDischarged: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.EnergyEvseTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EnergyEvseTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.EnergyEvseTrait, rhs: GoogleHomeTypes.Matter.EnergyEvseTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.EnergyEvseTrait.Attributes, rhs: GoogleHomeTypes.Matter.EnergyEvseTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var userMaximumChargeCurrentIsSet: Swift.Bool {
      get
    }
    final public func setUserMaximumChargeCurrent(_ value: Swift.Int64)
    final public func clearUserMaximumChargeCurrent()
    final public var randomizationDelayWindowIsSet: Swift.Bool {
      get
    }
    final public func setRandomizationDelayWindow(_ value: Swift.UInt32)
    final public func clearRandomizationDelayWindow()
    final public var approximateEVEfficiencyIsSet: Swift.Bool {
      get
    }
    final public func setApproximateEVEfficiency(_ value: Swift.UInt16?)
    final public func clearApproximateEVEfficiency()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public struct ChargingTargetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let targetTimeMinutesPastMidnight: Swift.UInt16
    public let targetSoC: Swift.UInt8?
    public let addedEnergy: Swift.Int64?
    public init(targetTimeMinutesPastMidnight: Swift.UInt16, targetSoC: Swift.UInt8?, addedEnergy: Swift.Int64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct, b: GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ChargingTargetScheduleStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let dayOfWeekForSequence: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public let chargingTargets: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct]
    public init(dayOfWeekForSequence: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap, chargingTargets: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct, b: GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public struct EVConnectedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let sessionID: Swift.UInt32?
      public init(sessionID: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent.Payload, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EVNotDetectedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let sessionID: Swift.UInt32?
      public let state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?
      public let sessionDuration: Swift.UInt32?
      public let sessionEnergyCharged: Swift.Int64?
      public let sessionEnergyDischarged: Swift.Int64?
      public init(sessionID: Swift.UInt32?, state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?, sessionDuration: Swift.UInt32?, sessionEnergyCharged: Swift.Int64?, sessionEnergyDischarged: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent.Payload, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EnergyTransferStartedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let sessionID: Swift.UInt32?
      public let state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?
      public let maximumCurrent: Swift.Int64?
      public let maximumDischargeCurrent: Swift.Int64?
      public init(sessionID: Swift.UInt32?, state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?, maximumCurrent: Swift.Int64?, maximumDischargeCurrent: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent.Payload, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EnergyTransferStoppedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let sessionID: Swift.UInt32?
      public let state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?
      public let reason: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedReasonEnum?
      public let energyTransferred: Swift.Int64?
      public let energyDischarged: Swift.Int64?
      public init(sessionID: Swift.UInt32?, state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?, reason: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedReasonEnum?, energyTransferred: Swift.Int64?, energyDischarged: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent.Payload, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent, b: GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct FaultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let sessionID: Swift.UInt32?
      public let state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?
      public let faultStatePreviousState: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum?
      public let faultStateCurrentState: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum?
      public init(sessionID: Swift.UInt32?, state: GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?, faultStatePreviousState: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum?, faultStateCurrentState: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent.Payload, b: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent, b: GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct RfidEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let uid: Foundation.Data?
      public init(uid: Foundation.Data?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent.Payload, b: GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent, b: GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var supportsDisableCommand: Swift.Bool {
    get
  }
  public func disable() async throws
  public func disableBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DisableCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var supportsEnableChargingCommand: Swift.Bool {
    get
  }
  public func enableCharging(chargingEnabledUntil: Swift.UInt32?, minimumChargeCurrent: Swift.Int64, maximumChargeCurrent: Swift.Int64) async throws
  public func enableChargingBatchable(chargingEnabledUntil: Swift.UInt32?, minimumChargeCurrent: Swift.Int64, maximumChargeCurrent: Swift.Int64) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableChargingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var supportsEnableDischargingCommand: Swift.Bool {
    get
  }
  public func enableDischarging(dischargingEnabledUntil: Swift.UInt32?, maximumDischargeCurrent: Swift.Int64) async throws
  public func enableDischargingBatchable(dischargingEnabledUntil: Swift.UInt32?, maximumDischargeCurrent: Swift.Int64) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableDischargingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var supportsStartDiagnosticsCommand: Swift.Bool {
    get
  }
  public func startDiagnostics() async throws
  public func startDiagnosticsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartDiagnosticsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var supportsSetTargetsCommand: Swift.Bool {
    get
  }
  public func setTargets(chargingTargetSchedules: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct]) async throws
  public func setTargetsBatchable(chargingTargetSchedules: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetTargetsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public typealias GetTargetsCommandResponse = GoogleHomeTypes.Matter.EnergyEvseTrait.GetTargetsCommand.Response
  public var supportsGetTargetsCommand: Swift.Bool {
    get
  }
  public func getTargets() async throws -> GoogleHomeTypes.Matter.EnergyEvseTrait.GetTargetsCommandResponse
  public func getTargetsBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.EnergyEvseTrait.GetTargetsCommandResponse>
  public struct GetTargetsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let chargingTargetSchedules: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var supportsClearTargetsCommand: Swift.Bool {
    get
  }
  public func clearTargets() async throws
  public func clearTargetsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearTargetsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public enum EnergyTransferStoppedReasonEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case evStopped
    case evseStopped
    case other
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedReasonEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum FaultStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case noError
    case meterFailure
    case overVoltage
    case underVoltage
    case overCurrent
    case contactWetFailure
    case contactDryFailure
    case groundFault
    case powerLoss
    case powerQuality
    case pilotShortCircuit
    case emergencyStop
    case evDisconnected
    case wrongPowerSupply
    case liveNeutralSwap
    case overTemperature
    case other
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case notPluggedIn
    case pluggedInNoDemand
    case pluggedInDemand
    case pluggedInCharging
    case pluggedInDischarging
    case sessionEnding
    case fault
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SupplyStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case disabled
    case chargingEnabled
    case dischargingEnabled
    case disabledError
    case disabledDiagnostics
    case enabled
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.EnergyEvseTrait.SupplyStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let chargingPreferences: GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public static let soCReporting: GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public static let plugAndCharge: GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public static let rfid: GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public static let v2x: GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.EnergyEvseTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct TargetDayOfWeekBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let sunday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public static let monday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public static let tuesday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public static let wednesday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public static let thursday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public static let friday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public static let saturday: GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public typealias Element = GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case state
    case supplyState
    case faultState
    case chargingEnabledUntil
    case dischargingEnabledUntil
    case circuitCapacity
    case minimumChargeCurrent
    case maximumChargeCurrent
    case maximumDischargeCurrent
    case userMaximumChargeCurrent
    case randomizationDelayWindow
    case nextChargeStartTime
    case nextChargeTargetTime
    case nextChargeRequiredEnergy
    case nextChargeTargetSoC
    case approximateEVEfficiency
    case stateOfCharge
    case batteryCapacity
    case vehicleID
    case sessionID
    case sessionDuration
    case sessionEnergyCharged
    case sessionEnergyDischarged
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait {
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum?> {
    get
  }
  public var supplyState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.SupplyStateEnum> {
    get
  }
  public var faultState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum> {
    get
  }
  public var chargingEnabledUntil: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var dischargingEnabledUntil: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var circuitCapacity: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var minimumChargeCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var maximumChargeCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var maximumDischargeCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var userMaximumChargeCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var randomizationDelayWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var nextChargeStartTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var nextChargeTargetTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var nextChargeRequiredEnergy: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nextChargeTargetSoC: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var approximateEVEfficiency: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var stateOfCharge: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var batteryCapacity: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var vehicleID: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var sessionID: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var sessionDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var sessionEnergyCharged: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var sessionEnergyDischarged: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.EnergyEvseTrait {
  final public func setUserMaximumChargeCurrent(_ value: Swift.Int64)
  final public func setRandomizationDelayWindow(_ value: Swift.UInt32)
  final public func setApproximateEVEfficiency(_ value: Swift.UInt16?)
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sessionID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait.EVConnectedEvent {
  public var sessionID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sessionID
    case state
    case sessionDuration
    case sessionEnergyCharged
    case sessionEnergyDischarged
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait.EVNotDetectedEvent {
  public var sessionID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum> {
    get
  }
  public var sessionDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var sessionEnergyCharged: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var sessionEnergyDischarged: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sessionID
    case state
    case maximumCurrent
    case maximumDischargeCurrent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStartedEvent {
  public var sessionID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum> {
    get
  }
  public var maximumCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var maximumDischargeCurrent: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sessionID
    case state
    case reason
    case energyTransferred
    case energyDischarged
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedEvent {
  public var sessionID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum> {
    get
  }
  public var reason: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.EnergyTransferStoppedReasonEnum> {
    get
  }
  public var energyTransferred: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var energyDischarged: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sessionID
    case state
    case faultStatePreviousState
    case faultStateCurrentState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait.FaultEvent {
  public var sessionID: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.StateEnum> {
    get
  }
  public var faultStatePreviousState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum> {
    get
  }
  public var faultStateCurrentState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.FaultStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case uid
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseTrait.RfidEvent {
  public var uid: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.EnableChargingCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case chargingEnabledUntil
    case minimumChargeCurrent
    case maximumChargeCurrent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.EnableChargingCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.EnableChargingCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.EnableDischargingCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dischargingEnabledUntil
    case maximumDischargeCurrent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.EnableDischargingCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.EnableDischargingCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.SetTargetsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case chargingTargetSchedules
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.SetTargetsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.SetTargetsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait {
  public static func disable() -> GoogleHomeSDK.AutomationCommand
  public static func enableCharging(chargingEnabledUntil: Swift.UInt32?, minimumChargeCurrent: Swift.Int64, maximumChargeCurrent: Swift.Int64) -> GoogleHomeSDK.AutomationCommand
  public static func enableDischarging(dischargingEnabledUntil: Swift.UInt32?, maximumDischargeCurrent: Swift.Int64) -> GoogleHomeSDK.AutomationCommand
  public static func startDiagnostics() -> GoogleHomeSDK.AutomationCommand
  public static func setTargets(chargingTargetSchedules: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct]) -> GoogleHomeSDK.AutomationCommand
  public static func getTargets() -> GoogleHomeSDK.AutomationCommand
  public static func clearTargets() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case targetTimeMinutesPastMidnight
    case targetSoC
    case addedEnergy
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct {
  public var targetTimeMinutesPastMidnight: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var targetSoC: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var addedEnergy: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dayOfWeekForSequence
    case chargingTargets
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetScheduleStruct {
  public var dayOfWeekForSequence: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseTrait.TargetDayOfWeekBitmap> {
    get
  }
  public var chargingTargets: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.EnergyEvseTrait.ChargingTargetStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct EnergyEvseModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.EnergyEvseModeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.EnergyEvseModeTrait
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.EnergyEvseModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EnergyEvseModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.EnergyEvseModeTrait, rhs: GoogleHomeTypes.Matter.EnergyEvseModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.EnergyEvseModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.EnergyEvseModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.EnergyEvseModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case manual
    case timeOfUse
    case solarCharging
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.EnergyEvseModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.EnergyEvseModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.EnergyEvseModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EnergyEvseModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.EnergyEvseModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct EthernetNetworkDiagnosticsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($phyRate) public var phyRate: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.PhyRateEnum? {
      get
    }
    public var $phyRate: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.PhyRateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($fullDuplex) public var fullDuplex: Swift.Bool? {
      get
    }
    public var $fullDuplex: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($packetRxCount) public var packetRxCount: Swift.UInt64? {
      get
    }
    public var $packetRxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($packetTxCount) public var packetTxCount: Swift.UInt64? {
      get
    }
    public var $packetTxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txErrCount) public var txErrCount: Swift.UInt64? {
      get
    }
    public var $txErrCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($collisionCount) public var collisionCount: Swift.UInt64? {
      get
    }
    public var $collisionCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($overrunCount) public var overrunCount: Swift.UInt64? {
      get
    }
    public var $overrunCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($carrierDetect) public var carrierDetect: Swift.Bool? {
      get
    }
    public var $carrierDetect: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timeSinceReset) public var timeSinceReset: Swift.UInt64? {
      get
    }
    public var $timeSinceReset: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait, rhs: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attributes, rhs: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public var supportsResetCountsCommand: Swift.Bool {
    get
  }
  public func resetCounts() async throws
  public func resetCountsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetCountsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public enum PhyRateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case rate10M
    case rate100M
    case rate1G
    case rate25G
    case rate5G
    case rate10G
    case rate40G
    case rate100G
    case rate200G
    case rate400G
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.PhyRateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let packetCounts: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature
    public static let errorCounts: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case phyRate
    case fullDuplex
    case packetRxCount
    case packetTxCount
    case txErrCount
    case collisionCount
    case overrunCount
    case carrierDetect
    case timeSinceReset
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public var phyRate: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.PhyRateEnum?> {
    get
  }
  public var fullDuplex: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
  public var packetRxCount: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var packetTxCount: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var txErrCount: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var collisionCount: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var overrunCount: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var carrierDetect: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
  public var timeSinceReset: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait {
  public static func resetCounts() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct FanControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.FanControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.FanControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.FanControlTrait
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($fanMode) public var fanMode: GoogleHomeTypes.Matter.FanControlTrait.FanModeEnum? {
      get
    }
    public var $fanMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.FanModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($fanModeSequence) public var fanModeSequence: GoogleHomeTypes.Matter.FanControlTrait.FanModeSequenceEnum? {
      get
    }
    public var $fanModeSequence: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.FanModeSequenceEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($percentSetting) public var percentSetting: Swift.UInt8? {
      get
    }
    public var $percentSetting: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($percentCurrent) public var percentCurrent: Swift.UInt8? {
      get
    }
    public var $percentCurrent: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($speedMax) public var speedMax: Swift.UInt8? {
      get
    }
    public var $speedMax: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($speedSetting) public var speedSetting: Swift.UInt8? {
      get
    }
    public var $speedSetting: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($speedCurrent) public var speedCurrent: Swift.UInt8? {
      get
    }
    public var $speedCurrent: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rockSupport) public var rockSupport: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap? {
      get
    }
    public var $rockSupport: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.RockBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rockSetting) public var rockSetting: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap? {
      get
    }
    public var $rockSetting: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.RockBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($windSupport) public var windSupport: GoogleHomeTypes.Matter.FanControlTrait.WindBitmap? {
      get
    }
    public var $windSupport: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.WindBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($windSetting) public var windSetting: GoogleHomeTypes.Matter.FanControlTrait.WindBitmap? {
      get
    }
    public var $windSetting: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.WindBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($airflowDirection) public var airflowDirection: GoogleHomeTypes.Matter.FanControlTrait.AirflowDirectionEnum? {
      get
    }
    public var $airflowDirection: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.AirflowDirectionEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.FanControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FanControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.FanControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FanControlTrait, rhs: GoogleHomeTypes.Matter.FanControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FanControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.FanControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var fanModeIsSet: Swift.Bool {
      get
    }
    final public func setFanMode(_ value: GoogleHomeTypes.Matter.FanControlTrait.FanModeEnum)
    final public func clearFanMode()
    final public var percentSettingIsSet: Swift.Bool {
      get
    }
    final public func setPercentSetting(_ value: Swift.UInt8?)
    final public func clearPercentSetting()
    final public var speedSettingIsSet: Swift.Bool {
      get
    }
    final public func setSpeedSetting(_ value: Swift.UInt8?)
    final public func clearSpeedSetting()
    final public var rockSettingIsSet: Swift.Bool {
      get
    }
    final public func setRockSetting(_ value: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap)
    final public func clearRockSetting()
    final public var windSettingIsSet: Swift.Bool {
      get
    }
    final public func setWindSetting(_ value: GoogleHomeTypes.Matter.FanControlTrait.WindBitmap)
    final public func clearWindSetting()
    final public var airflowDirectionIsSet: Swift.Bool {
      get
    }
    final public func setAirflowDirection(_ value: GoogleHomeTypes.Matter.FanControlTrait.AirflowDirectionEnum)
    final public func clearAirflowDirection()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  public var supportsStepCommand: Swift.Bool {
    get
  }
  public func step(direction: GoogleHomeTypes.Matter.FanControlTrait.StepDirectionEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.FanControlTrait.StepCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func stepBatchable(direction: GoogleHomeTypes.Matter.FanControlTrait.StepDirectionEnum, optionalArgsProvider: ((GoogleHomeTypes.Matter.FanControlTrait.StepCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var wrapIsSet: Swift.Bool {
        get
      }
      final public func setWrap(_ value: Swift.Bool)
      final public func clearWrap()
      final public var lowestOffIsSet: Swift.Bool {
        get
      }
      final public func setLowestOff(_ value: Swift.Bool)
      final public func clearLowestOff()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  public enum AirflowDirectionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case forward
    case reverse
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FanControlTrait.AirflowDirectionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum FanModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case off
    case low
    case medium
    case high
    case on
    case auto
    case smart
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FanControlTrait.FanModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum FanModeSequenceEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case offLowMedHigh
    case offLowHigh
    case offLowMedHighAuto
    case offLowHighAuto
    case offHighAuto
    case offHigh
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FanControlTrait.FanModeSequenceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StepDirectionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case increase
    case decrease
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FanControlTrait.StepDirectionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let multiSpeed: GoogleHomeTypes.Matter.FanControlTrait.Feature
    public static let auto: GoogleHomeTypes.Matter.FanControlTrait.Feature
    public static let rocking: GoogleHomeTypes.Matter.FanControlTrait.Feature
    public static let wind: GoogleHomeTypes.Matter.FanControlTrait.Feature
    public static let step: GoogleHomeTypes.Matter.FanControlTrait.Feature
    public static let airflowDirection: GoogleHomeTypes.Matter.FanControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.FanControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.FanControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct RockBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let rockLeftRight: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap
    public static let rockUpDown: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap
    public static let rockRound: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.FanControlTrait.RockBitmap
    public typealias Element = GoogleHomeTypes.Matter.FanControlTrait.RockBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct WindBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let sleepWind: GoogleHomeTypes.Matter.FanControlTrait.WindBitmap
    public static let naturalWind: GoogleHomeTypes.Matter.FanControlTrait.WindBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.FanControlTrait.WindBitmap
    public typealias Element = GoogleHomeTypes.Matter.FanControlTrait.WindBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fanMode
    case fanModeSequence
    case percentSetting
    case percentCurrent
    case speedMax
    case speedSetting
    case speedCurrent
    case rockSupport
    case rockSetting
    case windSupport
    case windSetting
    case airflowDirection
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FanControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FanControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.FanControlTrait {
  public var fanMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.FanModeEnum> {
    get
  }
  public var fanModeSequence: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.FanModeSequenceEnum> {
    get
  }
  public var percentSetting: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var percentCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var speedMax: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var speedSetting: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var speedCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var rockSupport: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.RockBitmap> {
    get
  }
  public var rockSetting: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.RockBitmap> {
    get
  }
  public var windSupport: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.WindBitmap> {
    get
  }
  public var windSetting: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.WindBitmap> {
    get
  }
  public var airflowDirection: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.AirflowDirectionEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FanControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.FanControlTrait {
  final public func setFanMode(_ value: GoogleHomeTypes.Matter.FanControlTrait.FanModeEnum)
  final public func setPercentSetting(_ value: Swift.UInt8?)
  final public func setSpeedSetting(_ value: Swift.UInt8?)
  final public func setRockSetting(_ value: GoogleHomeTypes.Matter.FanControlTrait.RockBitmap)
  final public func setWindSetting(_ value: GoogleHomeTypes.Matter.FanControlTrait.WindBitmap)
  final public func setAirflowDirection(_ value: GoogleHomeTypes.Matter.FanControlTrait.AirflowDirectionEnum)
}
extension GoogleHomeTypes.Matter.FanControlTrait.StepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case direction
    case wrap
    case lowestOff
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FanControlTrait.StepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FanControlTrait.StepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.FanControlTrait {
  public static func step(direction: GoogleHomeTypes.Matter.FanControlTrait.StepDirectionEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.FanControlTrait.StepCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct FaultInjectionTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.FaultInjectionTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FaultInjectionTrait, rhs: GoogleHomeTypes.Matter.FaultInjectionTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FaultInjectionTrait.Attributes, rhs: GoogleHomeTypes.Matter.FaultInjectionTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait {
  public var supportsFailAtFaultCommand: Swift.Bool {
    get
  }
  public func failAtFault(type: GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType, id: Swift.UInt32, numCallsToSkip: Swift.UInt32, numCallsToFail: Swift.UInt32, takeMutex: Swift.Bool) async throws
  public func failAtFaultBatchable(type: GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType, id: Swift.UInt32, numCallsToSkip: Swift.UInt32, numCallsToFail: Swift.UInt32, takeMutex: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct FailAtFaultCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait {
  public var supportsFailRandomlyAtFaultCommand: Swift.Bool {
    get
  }
  public func failRandomlyAtFault(type: GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType, id: Swift.UInt32, percentage: Swift.UInt8) async throws
  public func failRandomlyAtFaultBatchable(type: GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType, id: Swift.UInt32, percentage: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct FailRandomlyAtFaultCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait {
  public enum FaultType : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case systemFault
    case inetFault
    case chipFault
    case certFault
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FaultInjectionTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FaultInjectionTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.FaultInjectionTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait.FailAtFaultCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case type
    case id
    case numCallsToSkip
    case numCallsToFail
    case takeMutex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FaultInjectionTrait.FailAtFaultCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FaultInjectionTrait.FailAtFaultCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait.FailRandomlyAtFaultCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case type
    case id
    case percentage
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FaultInjectionTrait.FailRandomlyAtFaultCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FaultInjectionTrait.FailRandomlyAtFaultCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.FaultInjectionTrait {
  public static func failAtFault(type: GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType, id: Swift.UInt32, numCallsToSkip: Swift.UInt32, numCallsToFail: Swift.UInt32, takeMutex: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func failRandomlyAtFault(type: GoogleHomeTypes.Matter.FaultInjectionTrait.FaultType, id: Swift.UInt32, percentage: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct FixedLabelTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.FixedLabelTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.FixedLabelTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.FixedLabelTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($labelList) public var labelList: [GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct]? {
      get
    }
    public var $labelList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FixedLabelTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.FixedLabelTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FixedLabelTrait, rhs: GoogleHomeTypes.Matter.FixedLabelTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FixedLabelTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FixedLabelTrait.Attributes, rhs: GoogleHomeTypes.Matter.FixedLabelTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FixedLabelTrait {
  public struct LabelStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let value: Swift.String
    public init(label: Swift.String, value: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct, b: GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FixedLabelTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case labelList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FixedLabelTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FixedLabelTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.FixedLabelTrait {
  public var labelList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.FixedLabelTrait.LabelStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct FlowMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.FlowMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.FlowMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.FlowMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.UInt16? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.UInt16? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.UInt16? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt16? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FlowMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.FlowMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FlowMeasurementTrait, rhs: GoogleHomeTypes.Matter.FlowMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FlowMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FlowMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.FlowMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FlowMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FlowMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FlowMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.FlowMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct FormaldehydeConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct GeneralCommissioningTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.GeneralCommissioningTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.GeneralCommissioningTrait
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($breadcrumb) public var breadcrumb: Swift.UInt64? {
      get
    }
    public var $breadcrumb: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($basicCommissioningInfo) public var basicCommissioningInfo: GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo? {
      get
    }
    public var $basicCommissioningInfo: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($regulatoryConfig) public var regulatoryConfig: GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum? {
      get
    }
    public var $regulatoryConfig: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($locationCapability) public var locationCapability: GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum? {
      get
    }
    public var $locationCapability: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportsConcurrentConnection) public var supportsConcurrentConnection: Swift.Bool? {
      get
    }
    public var $supportsConcurrentConnection: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tcAcceptedVersion) public var tcAcceptedVersion: Swift.UInt16? {
      get
    }
    public var $tcAcceptedVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tcMinRequiredVersion) public var tcMinRequiredVersion: Swift.UInt16? {
      get
    }
    public var $tcMinRequiredVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tcAcknowledgements) public var tcAcknowledgements: Swift.UInt16? {
      get
    }
    public var $tcAcknowledgements: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tcAcknowledgementsRequired) public var tcAcknowledgementsRequired: Swift.Bool? {
      get
    }
    public var $tcAcknowledgementsRequired: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.GeneralCommissioningTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GeneralCommissioningTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GeneralCommissioningTrait, rhs: GoogleHomeTypes.Matter.GeneralCommissioningTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attributes, rhs: GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var breadcrumbIsSet: Swift.Bool {
      get
    }
    final public func setBreadcrumb(_ value: Swift.UInt64)
    final public func clearBreadcrumb()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public struct BasicCommissioningInfo : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let failSafeExpiryLengthSeconds: Swift.UInt16
    public let maxCumulativeFailsafeSeconds: Swift.UInt16
    public init(failSafeExpiryLengthSeconds: Swift.UInt16, maxCumulativeFailsafeSeconds: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo, b: GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public typealias ArmFailSafeCommandResponse = GoogleHomeTypes.Matter.GeneralCommissioningTrait.ArmFailSafeCommand.Response
  public var supportsArmFailSafeCommand: Swift.Bool {
    get
  }
  public func armFailSafe(expiryLengthSeconds: Swift.UInt16, breadcrumb: Swift.UInt64) async throws -> GoogleHomeTypes.Matter.GeneralCommissioningTrait.ArmFailSafeCommandResponse
  public func armFailSafeBatchable(expiryLengthSeconds: Swift.UInt16, breadcrumb: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GeneralCommissioningTrait.ArmFailSafeCommandResponse>
  public struct ArmFailSafeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let errorCode: GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningErrorEnum
      public let debugText: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public typealias SetRegulatoryConfigCommandResponse = GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetRegulatoryConfigCommand.Response
  public var supportsSetRegulatoryConfigCommand: Swift.Bool {
    get
  }
  public func setRegulatoryConfig(newRegulatoryConfig: GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum, countryCode: Swift.String, breadcrumb: Swift.UInt64) async throws -> GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetRegulatoryConfigCommandResponse
  public func setRegulatoryConfigBatchable(newRegulatoryConfig: GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum, countryCode: Swift.String, breadcrumb: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetRegulatoryConfigCommandResponse>
  public struct SetRegulatoryConfigCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let errorCode: GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningErrorEnum
      public let debugText: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public typealias CommissioningCompleteCommandResponse = GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningCompleteCommand.Response
  public var supportsCommissioningCompleteCommand: Swift.Bool {
    get
  }
  public func commissioningComplete() async throws -> GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningCompleteCommandResponse
  public func commissioningCompleteBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningCompleteCommandResponse>
  public struct CommissioningCompleteCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let errorCode: GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningErrorEnum
      public let debugText: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public typealias SetTCAcknowledgementsCommandResponse = GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetTCAcknowledgementsCommand.Response
  public var supportsSetTCAcknowledgementsCommand: Swift.Bool {
    get
  }
  public func setTCAcknowledgements(tcVersion: Swift.UInt16, tcUserResponse: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetTCAcknowledgementsCommandResponse
  public func setTCAcknowledgementsBatchable(tcVersion: Swift.UInt16, tcUserResponse: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetTCAcknowledgementsCommandResponse>
  public struct SetTCAcknowledgementsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let errorCode: GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningErrorEnum
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public enum CommissioningErrorEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ok
    case valueOutsideRange
    case invalidAuthentication
    case noFailSafe
    case busyWithOtherAdmin
    case requiredTCNotAccepted
    case tcAcknowledgementsNotReceived
    case tcMinVersionNotMet
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralCommissioningTrait.CommissioningErrorEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum RegulatoryLocationTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case indoor
    case outdoor
    case indoorOutdoor
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let termsAndConditions: GoogleHomeTypes.Matter.GeneralCommissioningTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.GeneralCommissioningTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.GeneralCommissioningTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case breadcrumb
    case basicCommissioningInfo
    case regulatoryConfig
    case locationCapability
    case supportsConcurrentConnection
    case tcAcceptedVersion
    case tcMinRequiredVersion
    case tcAcknowledgements
    case tcAcknowledgementsRequired
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralCommissioningTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public var breadcrumb: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var basicCommissioningInfo: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo> {
    get
  }
  public var regulatoryConfig: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum> {
    get
  }
  public var locationCapability: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum> {
    get
  }
  public var supportsConcurrentConnection: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var tcAcceptedVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var tcMinRequiredVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var tcAcknowledgements: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var tcAcknowledgementsRequired: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralCommissioningTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  final public func setBreadcrumb(_ value: Swift.UInt64)
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait.ArmFailSafeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case expiryLengthSeconds
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralCommissioningTrait.ArmFailSafeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralCommissioningTrait.ArmFailSafeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetRegulatoryConfigCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newRegulatoryConfig
    case countryCode
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetRegulatoryConfigCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetRegulatoryConfigCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetTCAcknowledgementsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case tcVersion
    case tcUserResponse
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetTCAcknowledgementsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralCommissioningTrait.SetTCAcknowledgementsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait {
  public static func armFailSafe(expiryLengthSeconds: Swift.UInt16, breadcrumb: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
  public static func setRegulatoryConfig(newRegulatoryConfig: GoogleHomeTypes.Matter.GeneralCommissioningTrait.RegulatoryLocationTypeEnum, countryCode: Swift.String, breadcrumb: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
  public static func commissioningComplete() -> GoogleHomeSDK.AutomationCommand
  public static func setTCAcknowledgements(tcVersion: Swift.UInt16, tcUserResponse: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case failSafeExpiryLengthSeconds
    case maxCumulativeFailsafeSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.GeneralCommissioningTrait.BasicCommissioningInfo {
  public var failSafeExpiryLengthSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var maxCumulativeFailsafeSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct GeneralDiagnosticsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkInterfaces) public var networkInterfaces: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface]? {
      get
    }
    public var $networkInterfaces: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rebootCount) public var rebootCount: Swift.UInt16? {
      get
    }
    public var $rebootCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($upTime) public var upTime: Swift.UInt64? {
      get
    }
    public var $upTime: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($totalOperationalHours) public var totalOperationalHours: Swift.UInt32? {
      get
    }
    public var $totalOperationalHours: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bootReason) public var bootReason: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum? {
      get
    }
    public var $bootReason: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeHardwareFaults) public var activeHardwareFaults: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]? {
      get
    }
    public var $activeHardwareFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeRadioFaults) public var activeRadioFaults: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]? {
      get
    }
    public var $activeRadioFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeNetworkFaults) public var activeNetworkFaults: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]? {
      get
    }
    public var $activeNetworkFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($testEventTriggersEnabled) public var testEventTriggersEnabled: Swift.Bool? {
      get
    }
    public var $testEventTriggersEnabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait, rhs: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attributes, rhs: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public struct NetworkInterface : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let isOperational: Swift.Bool
    public let offPremiseServicesReachableIPv4: Swift.Bool?
    public let offPremiseServicesReachableIPv6: Swift.Bool?
    public let hardwareAddress: Foundation.Data
    public let iPv4Addresses: [Foundation.Data]
    public let iPv6Addresses: [Foundation.Data]
    public let type: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.InterfaceTypeEnum
    public init(name: Swift.String, isOperational: Swift.Bool, offPremiseServicesReachableIPv4: Swift.Bool?, offPremiseServicesReachableIPv6: Swift.Bool?, hardwareAddress: Foundation.Data, iPv4Addresses: [Foundation.Data], iPv6Addresses: [Foundation.Data], type: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.InterfaceTypeEnum)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public struct HardwareFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]?, previous: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct RadioFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]?, previous: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NetworkFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]?, previous: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BootReasonEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let bootReason: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum?
      public init(bootReason: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent.Payload, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent, b: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public var supportsTestEventTriggerCommand: Swift.Bool {
    get
  }
  public func testEventTrigger(enableKey: Foundation.Data, eventTrigger: Swift.UInt64) async throws
  public func testEventTriggerBatchable(enableKey: Foundation.Data, eventTrigger: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TestEventTriggerCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public typealias TimeSnapshotCommandResponse = GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.TimeSnapshotCommand.Response
  public var supportsTimeSnapshotCommand: Swift.Bool {
    get
  }
  public func timeSnapshot() async throws -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.TimeSnapshotCommandResponse
  public func timeSnapshotBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.TimeSnapshotCommandResponse>
  public struct TimeSnapshotCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let systemTimeMs: Swift.UInt64
      public let posixTimeMs: Swift.UInt64?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public typealias PayloadTestRequestCommandResponse = GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.PayloadTestRequestCommand.Response
  public var supportsPayloadTestRequestCommand: Swift.Bool {
    get
  }
  public func payloadTestRequest(enableKey: Foundation.Data, value: Swift.UInt8, count: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.PayloadTestRequestCommandResponse
  public func payloadTestRequestBatchable(enableKey: Foundation.Data, value: Swift.UInt8, count: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.PayloadTestRequestCommandResponse>
  public struct PayloadTestRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let payload: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public enum BootReasonEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case powerOnReboot
    case brownOutReset
    case softwareWatchdogReset
    case hardwareWatchdogReset
    case softwareUpdateCompleted
    case softwareReset
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum HardwareFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case radio
    case sensor
    case resettableOverTemp
    case nonResettableOverTemp
    case powerSource
    case visualDisplayFault
    case audioOutputFault
    case userInterfaceFault
    case nonVolatileMemoryError
    case tamperDetected
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum InterfaceTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case wiFi
    case ethernet
    case cellular
    case thread
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.InterfaceTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum NetworkFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case hardwareFailure
    case networkJammed
    case connectionFailed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum RadioFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case wiFiFault
    case cellularFault
    case threadFault
    case nfcFault
    case bleFault
    case ethernetFault
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let dataModelTest: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkInterfaces
    case rebootCount
    case upTime
    case totalOperationalHours
    case bootReason
    case activeHardwareFaults
    case activeRadioFaults
    case activeNetworkFaults
    case testEventTriggersEnabled
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public var networkInterfaces: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface]> {
    get
  }
  public var rebootCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var upTime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var totalOperationalHours: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var bootReason: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum> {
    get
  }
  public var activeHardwareFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]> {
    get
  }
  public var activeRadioFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]> {
    get
  }
  public var activeNetworkFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]> {
    get
  }
  public var testEventTriggersEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.HardwareFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.RadioFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case bootReason
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEvent {
  public var bootReason: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.BootReasonEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.TestEventTriggerCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enableKey
    case eventTrigger
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.TestEventTriggerCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.TestEventTriggerCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.PayloadTestRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enableKey
    case value
    case count
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.PayloadTestRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.PayloadTestRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait {
  public static func testEventTrigger(enableKey: Foundation.Data, eventTrigger: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
  public static func timeSnapshot() -> GoogleHomeSDK.AutomationCommand
  public static func payloadTestRequest(enableKey: Foundation.Data, value: Swift.UInt8, count: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case isOperational
    case offPremiseServicesReachableIPv4
    case offPremiseServicesReachableIPv6
    case hardwareAddress
    case iPv4Addresses
    case iPv6Addresses
    case type
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.NetworkInterface {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var isOperational: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var offPremiseServicesReachableIPv4: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
  public var offPremiseServicesReachableIPv6: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
  public var hardwareAddress: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var iPv4Addresses: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var iPv6Addresses: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GeneralDiagnosticsTrait.InterfaceTypeEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct GroupKeyManagementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.GroupKeyManagementTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.GroupKeyManagementTrait
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($groupKeyMap) public var groupKeyMap: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct]? {
      get
    }
    public var $groupKeyMap: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($groupTable) public var groupTable: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct]? {
      get
    }
    public var $groupTable: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxGroupsPerFabric) public var maxGroupsPerFabric: Swift.UInt16? {
      get
    }
    public var $maxGroupsPerFabric: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxGroupKeysPerFabric) public var maxGroupKeysPerFabric: Swift.UInt16? {
      get
    }
    public var $maxGroupKeysPerFabric: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.GroupKeyManagementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GroupKeyManagementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GroupKeyManagementTrait, rhs: GoogleHomeTypes.Matter.GroupKeyManagementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attributes, rhs: GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var groupKeyMapIsSet: Swift.Bool {
      get
    }
    final public func setGroupKeyMap(_ value: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct])
    final public func clearGroupKeyMap()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public struct GroupInfoMapStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let groupId: Swift.UInt16
    public let endpoints: [Swift.UInt16]
    public let groupName: Swift.String?
    public let fabricIndex: Swift.UInt8
    public init(groupId: Swift.UInt16, endpoints: [Swift.UInt16], groupName: Swift.String?, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct, b: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GroupKeyMapStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let groupId: Swift.UInt16
    public let groupKeySetID: Swift.UInt16
    public let fabricIndex: Swift.UInt8
    public init(groupId: Swift.UInt16, groupKeySetID: Swift.UInt16, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct, b: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GroupKeySetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let groupKeySetID: Swift.UInt16
    public let groupKeySecurityPolicy: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySecurityPolicyEnum
    public let epochKey0: Foundation.Data?
    public let epochStartTime0: Swift.UInt64?
    public let epochKey1: Foundation.Data?
    public let epochStartTime1: Swift.UInt64?
    public let epochKey2: Foundation.Data?
    public let epochStartTime2: Swift.UInt64?
    public init(groupKeySetID: Swift.UInt16, groupKeySecurityPolicy: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySecurityPolicyEnum, epochKey0: Foundation.Data?, epochStartTime0: Swift.UInt64?, epochKey1: Foundation.Data?, epochStartTime1: Swift.UInt64?, epochKey2: Foundation.Data?, epochStartTime2: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct, b: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public var supportsKeySetWriteCommand: Swift.Bool {
    get
  }
  public func keySetWrite(groupKeySet: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct) async throws
  public func keySetWriteBatchable(groupKeySet: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct KeySetWriteCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public typealias KeySetReadCommandResponse = GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadCommand.Response
  public var supportsKeySetReadCommand: Swift.Bool {
    get
  }
  public func keySetRead(groupKeySetID: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadCommandResponse
  public func keySetReadBatchable(groupKeySetID: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadCommandResponse>
  public struct KeySetReadCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let groupKeySet: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public var supportsKeySetRemoveCommand: Swift.Bool {
    get
  }
  public func keySetRemove(groupKeySetID: Swift.UInt16) async throws
  public func keySetRemoveBatchable(groupKeySetID: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct KeySetRemoveCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public typealias KeySetReadAllIndicesCommandResponse = GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadAllIndicesCommand.Response
  public var supportsKeySetReadAllIndicesCommand: Swift.Bool {
    get
  }
  public func keySetReadAllIndices() async throws -> GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadAllIndicesCommandResponse
  public func keySetReadAllIndicesBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadAllIndicesCommandResponse>
  public struct KeySetReadAllIndicesCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let groupKeySetIDs: [Swift.UInt16]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public enum GroupKeySecurityPolicyEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case trustFirst
    case cacheAndSync
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySecurityPolicyEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let cacheAndSync: GoogleHomeTypes.Matter.GroupKeyManagementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.GroupKeyManagementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.GroupKeyManagementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupKeyMap
    case groupTable
    case maxGroupsPerFabric
    case maxGroupKeysPerFabric
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public var groupKeyMap: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct]> {
    get
  }
  public var groupTable: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct]> {
    get
  }
  public var maxGroupsPerFabric: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var maxGroupKeysPerFabric: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GroupKeyManagementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  final public func setGroupKeyMap(_ value: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct])
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetWriteCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupKeySet
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetWriteCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetWriteCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupKeySetID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetReadCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetRemoveCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupKeySetID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetRemoveCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.KeySetRemoveCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait {
  public static func keySetWrite(groupKeySet: GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct) -> GoogleHomeSDK.AutomationCommand
  public static func keySetRead(groupKeySetID: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func keySetRemove(groupKeySetID: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func keySetReadAllIndices() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupId
    case endpoints
    case groupName
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupInfoMapStruct {
  public var groupId: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var endpoints: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var groupName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupId
    case groupKeySetID
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeyMapStruct {
  public var groupId: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var groupKeySetID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupKeySetID
    case groupKeySecurityPolicy
    case epochKey0
    case epochStartTime0
    case epochKey1
    case epochStartTime1
    case epochKey2
    case epochStartTime2
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySetStruct {
  public var groupKeySetID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var groupKeySecurityPolicy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GroupKeyManagementTrait.GroupKeySecurityPolicyEnum> {
    get
  }
  public var epochKey0: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var epochStartTime0: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var epochKey1: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var epochStartTime1: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var epochKey2: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var epochStartTime2: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct GroupsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.GroupsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nameSupport) public var nameSupport: GoogleHomeTypes.Matter.GroupsTrait.NameSupportBitmap? {
      get
    }
    public var $nameSupport: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GroupsTrait.NameSupportBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.GroupsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.GroupsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.GroupsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GroupsTrait, rhs: GoogleHomeTypes.Matter.GroupsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.GroupsTrait.Attributes, rhs: GoogleHomeTypes.Matter.GroupsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public typealias AddGroupCommandResponse = GoogleHomeTypes.Matter.GroupsTrait.AddGroupCommand.Response
  public var supportsAddGroupCommand: Swift.Bool {
    get
  }
  public func addGroup(groupID: Swift.UInt16, groupName: Swift.String) async throws -> GoogleHomeTypes.Matter.GroupsTrait.AddGroupCommandResponse
  public func addGroupBatchable(groupID: Swift.UInt16, groupName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GroupsTrait.AddGroupCommandResponse>
  public struct AddGroupCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let groupID: Swift.UInt16
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public typealias ViewGroupCommandResponse = GoogleHomeTypes.Matter.GroupsTrait.ViewGroupCommand.Response
  public var supportsViewGroupCommand: Swift.Bool {
    get
  }
  public func viewGroup(groupID: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.GroupsTrait.ViewGroupCommandResponse
  public func viewGroupBatchable(groupID: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GroupsTrait.ViewGroupCommandResponse>
  public struct ViewGroupCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let groupID: Swift.UInt16
      public let groupName: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public typealias GetGroupMembershipCommandResponse = GoogleHomeTypes.Matter.GroupsTrait.GetGroupMembershipCommand.Response
  public var supportsGetGroupMembershipCommand: Swift.Bool {
    get
  }
  public func getGroupMembership(groupList: [Swift.UInt16]) async throws -> GoogleHomeTypes.Matter.GroupsTrait.GetGroupMembershipCommandResponse
  public func getGroupMembershipBatchable(groupList: [Swift.UInt16]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GroupsTrait.GetGroupMembershipCommandResponse>
  public struct GetGroupMembershipCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let capacity: Swift.UInt8?
      public let groupList: [Swift.UInt16]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public typealias RemoveGroupCommandResponse = GoogleHomeTypes.Matter.GroupsTrait.RemoveGroupCommand.Response
  public var supportsRemoveGroupCommand: Swift.Bool {
    get
  }
  public func removeGroup(groupID: Swift.UInt16) async throws -> GoogleHomeTypes.Matter.GroupsTrait.RemoveGroupCommandResponse
  public func removeGroupBatchable(groupID: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.GroupsTrait.RemoveGroupCommandResponse>
  public struct RemoveGroupCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let groupID: Swift.UInt16
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public var supportsRemoveAllGroupsCommand: Swift.Bool {
    get
  }
  public func removeAllGroups() async throws
  public func removeAllGroupsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RemoveAllGroupsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public var supportsAddGroupIfIdentifyingCommand: Swift.Bool {
    get
  }
  public func addGroupIfIdentifying(groupID: Swift.UInt16, groupName: Swift.String) async throws
  public func addGroupIfIdentifyingBatchable(groupID: Swift.UInt16, groupName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct AddGroupIfIdentifyingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let groupNames: GoogleHomeTypes.Matter.GroupsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.GroupsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.GroupsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct NameSupportBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let groupNames: GoogleHomeTypes.Matter.GroupsTrait.NameSupportBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.GroupsTrait.NameSupportBitmap
    public typealias Element = GoogleHomeTypes.Matter.GroupsTrait.NameSupportBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nameSupport
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.GroupsTrait {
  public var nameSupport: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GroupsTrait.NameSupportBitmap> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.GroupsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.GroupsTrait.AddGroupCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupID
    case groupName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupsTrait.AddGroupCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupsTrait.AddGroupCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupsTrait.ViewGroupCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupsTrait.ViewGroupCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupsTrait.ViewGroupCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupsTrait.GetGroupMembershipCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupList
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupsTrait.GetGroupMembershipCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupsTrait.GetGroupMembershipCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupsTrait.RemoveGroupCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupsTrait.RemoveGroupCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupsTrait.RemoveGroupCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupsTrait.AddGroupIfIdentifyingCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case groupID
    case groupName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.GroupsTrait.AddGroupIfIdentifyingCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.GroupsTrait.AddGroupIfIdentifyingCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.GroupsTrait {
  public static func addGroup(groupID: Swift.UInt16, groupName: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func viewGroup(groupID: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func getGroupMembership(groupList: [Swift.UInt16]) -> GoogleHomeSDK.AutomationCommand
  public static func removeGroup(groupID: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func removeAllGroups() -> GoogleHomeSDK.AutomationCommand
  public static func addGroupIfIdentifying(groupID: Swift.UInt16, groupName: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct HepaFilterMonitoringTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.HepaFilterMonitoringTrait
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($condition) public var condition: Swift.UInt8? {
      get
    }
    public var $condition: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($degradationDirection) public var degradationDirection: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.DegradationDirectionEnum? {
      get
    }
    public var $degradationDirection: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.DegradationDirectionEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($changeIndication) public var changeIndication: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ChangeIndicationEnum? {
      get
    }
    public var $changeIndication: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ChangeIndicationEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($inPlaceIndicator) public var inPlaceIndicator: Swift.Bool? {
      get
    }
    public var $inPlaceIndicator: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastChangedTime) public var lastChangedTime: Swift.UInt32? {
      get
    }
    public var $lastChangedTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($replacementProductList) public var replacementProductList: [GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct]? {
      get
    }
    public var $replacementProductList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait, rhs: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attributes, rhs: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var lastChangedTimeIsSet: Swift.Bool {
      get
    }
    final public func setLastChangedTime(_ value: Swift.UInt32?)
    final public func clearLastChangedTime()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public struct ReplacementProductStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let productIdentifierType: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ProductIdentifierTypeEnum
    public let productIdentifierValue: Swift.String
    public init(productIdentifierType: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ProductIdentifierTypeEnum, productIdentifierValue: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct, b: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public var supportsResetConditionCommand: Swift.Bool {
    get
  }
  public func resetCondition() async throws
  public func resetConditionBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetConditionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public enum ChangeIndicationEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ChangeIndicationEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DegradationDirectionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.DegradationDirectionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ProductIdentifierTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case upc
    case gtin8
    case ean
    case gtin14
    case oem
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ProductIdentifierTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let condition: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature
    public static let warning: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature
    public static let replacementProductList: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case condition
    case degradationDirection
    case changeIndication
    case inPlaceIndicator
    case lastChangedTime
    case replacementProductList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public var condition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var degradationDirection: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.DegradationDirectionEnum> {
    get
  }
  public var changeIndication: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ChangeIndicationEnum> {
    get
  }
  public var inPlaceIndicator: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var lastChangedTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var replacementProductList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  final public func setLastChangedTime(_ value: Swift.UInt32?)
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait {
  public static func resetCondition() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case productIdentifierType
    case productIdentifierValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ReplacementProductStruct {
  public var productIdentifierType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.HepaFilterMonitoringTrait.ProductIdentifierTypeEnum> {
    get
  }
  public var productIdentifierValue: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct IcdManagementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.IcdManagementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($idleModeDuration) public var idleModeDuration: Swift.UInt32? {
      get
    }
    public var $idleModeDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeModeDuration) public var activeModeDuration: Swift.UInt32? {
      get
    }
    public var $activeModeDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeModeThreshold) public var activeModeThreshold: Swift.UInt16? {
      get
    }
    public var $activeModeThreshold: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($registeredClients) public var registeredClients: [GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct]? {
      get
    }
    public var $registeredClients: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($icdCounter) public var icdCounter: Swift.UInt32? {
      get
    }
    public var $icdCounter: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clientsSupportedPerFabric) public var clientsSupportedPerFabric: Swift.UInt16? {
      get
    }
    public var $clientsSupportedPerFabric: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($userActiveModeTriggerHint) public var userActiveModeTriggerHint: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap? {
      get
    }
    public var $userActiveModeTriggerHint: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($userActiveModeTriggerInstruction) public var userActiveModeTriggerInstruction: Swift.String? {
      get
    }
    public var $userActiveModeTriggerInstruction: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operatingMode) public var operatingMode: GoogleHomeTypes.Matter.IcdManagementTrait.OperatingModeEnum? {
      get
    }
    public var $operatingMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.IcdManagementTrait.OperatingModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maximumCheckInBackOff) public var maximumCheckInBackOff: Swift.UInt32? {
      get
    }
    public var $maximumCheckInBackOff: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.IcdManagementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.IcdManagementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.IcdManagementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.IcdManagementTrait, rhs: GoogleHomeTypes.Matter.IcdManagementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.IcdManagementTrait.Attributes, rhs: GoogleHomeTypes.Matter.IcdManagementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public struct MonitoringRegistrationStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let checkInNodeID: Swift.UInt64
    public let monitoredSubject: Swift.UInt64
    public let clientType: GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum
    public let fabricIndex: Swift.UInt8
    public init(checkInNodeID: Swift.UInt64, monitoredSubject: Swift.UInt64, clientType: GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct, b: GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public typealias RegisterClientCommandResponse = GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand.Response
  public var supportsRegisterClientCommand: Swift.Bool {
    get
  }
  public func registerClient(checkInNodeID: Swift.UInt64, monitoredSubject: Swift.UInt64, key: Foundation.Data, clientType: GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommandResponse
  public func registerClientBatchable(checkInNodeID: Swift.UInt64, monitoredSubject: Swift.UInt64, key: Foundation.Data, clientType: GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum, optionalArgsProvider: ((GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommandResponse>
  public struct RegisterClientCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var verificationKeyIsSet: Swift.Bool {
        get
      }
      final public func setVerificationKey(_ value: Foundation.Data)
      final public func clearVerificationKey()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let icdCounter: Swift.UInt32
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public var supportsUnregisterClientCommand: Swift.Bool {
    get
  }
  public func unregisterClient(checkInNodeID: Swift.UInt64, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.IcdManagementTrait.UnregisterClientCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func unregisterClientBatchable(checkInNodeID: Swift.UInt64, optionalArgsProvider: ((GoogleHomeTypes.Matter.IcdManagementTrait.UnregisterClientCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UnregisterClientCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var verificationKeyIsSet: Swift.Bool {
        get
      }
      final public func setVerificationKey(_ value: Foundation.Data)
      final public func clearVerificationKey()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public typealias StayActiveRequestCommandResponse = GoogleHomeTypes.Matter.IcdManagementTrait.StayActiveRequestCommand.Response
  public var supportsStayActiveRequestCommand: Swift.Bool {
    get
  }
  public func stayActiveRequest(stayActiveDuration: Swift.UInt32) async throws -> GoogleHomeTypes.Matter.IcdManagementTrait.StayActiveRequestCommandResponse
  public func stayActiveRequestBatchable(stayActiveDuration: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.IcdManagementTrait.StayActiveRequestCommandResponse>
  public struct StayActiveRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let promisedActiveDuration: Swift.UInt32
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public enum ClientTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case permanent
    case ephemeral
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperatingModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case sit
    case lit
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.IcdManagementTrait.OperatingModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let checkInProtocolSupport: GoogleHomeTypes.Matter.IcdManagementTrait.Feature
    public static let userActiveModeTrigger: GoogleHomeTypes.Matter.IcdManagementTrait.Feature
    public static let longIdleTimeSupport: GoogleHomeTypes.Matter.IcdManagementTrait.Feature
    public static let dynamicSitLitSupport: GoogleHomeTypes.Matter.IcdManagementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.IcdManagementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.IcdManagementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct UserActiveModeTriggerBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let powerCycle: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let settingsMenu: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let customInstruction: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let deviceManual: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let actuateSensor: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let actuateSensorSeconds: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let actuateSensorTimes: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let actuateSensorLightsBlink: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let resetButton: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let resetButtonLightsBlink: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let resetButtonSeconds: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let resetButtonTimes: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let setupButton: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let setupButtonSeconds: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let setupButtonLightsBlink: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let setupButtonTimes: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public static let appDefinedButton: GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public typealias Element = GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case idleModeDuration
    case activeModeDuration
    case activeModeThreshold
    case registeredClients
    case icdCounter
    case clientsSupportedPerFabric
    case userActiveModeTriggerHint
    case userActiveModeTriggerInstruction
    case operatingMode
    case maximumCheckInBackOff
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IcdManagementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IcdManagementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.IcdManagementTrait {
  public var idleModeDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var activeModeDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var activeModeThreshold: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var registeredClients: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct]> {
    get
  }
  public var icdCounter: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clientsSupportedPerFabric: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var userActiveModeTriggerHint: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.IcdManagementTrait.UserActiveModeTriggerBitmap> {
    get
  }
  public var userActiveModeTriggerInstruction: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var operatingMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.IcdManagementTrait.OperatingModeEnum> {
    get
  }
  public var maximumCheckInBackOff: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.IcdManagementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case checkInNodeID
    case monitoredSubject
    case key
    case verificationKey
    case clientType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.IcdManagementTrait.UnregisterClientCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case checkInNodeID
    case verificationKey
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IcdManagementTrait.UnregisterClientCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IcdManagementTrait.UnregisterClientCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.IcdManagementTrait.StayActiveRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stayActiveDuration
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IcdManagementTrait.StayActiveRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IcdManagementTrait.StayActiveRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.IcdManagementTrait {
  public static func registerClient(checkInNodeID: Swift.UInt64, monitoredSubject: Swift.UInt64, key: Foundation.Data, clientType: GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.IcdManagementTrait.RegisterClientCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func unregisterClient(checkInNodeID: Swift.UInt64, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.IcdManagementTrait.UnregisterClientCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func stayActiveRequest(stayActiveDuration: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case checkInNodeID
    case monitoredSubject
    case clientType
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.IcdManagementTrait.MonitoringRegistrationStruct {
  public var checkInNodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var monitoredSubject: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var clientType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.IcdManagementTrait.ClientTypeEnum> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct IdentifyTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.IdentifyTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.IdentifyTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.IdentifyTrait
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($identifyTime) public var identifyTime: Swift.UInt16? {
      get
    }
    public var $identifyTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($identifyType) public var identifyType: GoogleHomeTypes.Matter.IdentifyTrait.IdentifyTypeEnum? {
      get
    }
    public var $identifyType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.IdentifyTrait.IdentifyTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.IdentifyTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.IdentifyTrait, rhs: GoogleHomeTypes.Matter.IdentifyTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.IdentifyTrait.Attributes, rhs: GoogleHomeTypes.Matter.IdentifyTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var identifyTimeIsSet: Swift.Bool {
      get
    }
    final public func setIdentifyTime(_ value: Swift.UInt16)
    final public func clearIdentifyTime()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  public var supportsIdentifyCommand: Swift.Bool {
    get
  }
  public func identify(identifyTime: Swift.UInt16) async throws
  public func identifyBatchable(identifyTime: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct IdentifyCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  public var supportsTriggerEffectCommand: Swift.Bool {
    get
  }
  public func triggerEffect(effectIdentifier: GoogleHomeTypes.Matter.IdentifyTrait.EffectIdentifierEnum, effectVariant: GoogleHomeTypes.Matter.IdentifyTrait.EffectVariantEnum) async throws
  public func triggerEffectBatchable(effectIdentifier: GoogleHomeTypes.Matter.IdentifyTrait.EffectIdentifierEnum, effectVariant: GoogleHomeTypes.Matter.IdentifyTrait.EffectVariantEnum) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TriggerEffectCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  public enum EffectIdentifierEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case blink
    case breathe
    case okay
    case channelChange
    case finishEffect
    case stopEffect
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.IdentifyTrait.EffectIdentifierEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EffectVariantEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case `default`
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.IdentifyTrait.EffectVariantEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum IdentifyTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case none
    case lightOutput
    case visibleIndicator
    case audibleBeep
    case display
    case actuator
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.IdentifyTrait.IdentifyTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case identifyTime
    case identifyType
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IdentifyTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IdentifyTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.IdentifyTrait {
  public var identifyTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var identifyType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.IdentifyTrait.IdentifyTypeEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.IdentifyTrait {
  final public func setIdentifyTime(_ value: Swift.UInt16)
}
extension GoogleHomeTypes.Matter.IdentifyTrait.IdentifyCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case identifyTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IdentifyTrait.IdentifyCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IdentifyTrait.IdentifyCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.IdentifyTrait.TriggerEffectCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case effectIdentifier
    case effectVariant
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IdentifyTrait.TriggerEffectCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IdentifyTrait.TriggerEffectCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.IdentifyTrait {
  public static func identify(identifyTime: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func triggerEffect(effectIdentifier: GoogleHomeTypes.Matter.IdentifyTrait.EffectIdentifierEnum, effectVariant: GoogleHomeTypes.Matter.IdentifyTrait.EffectVariantEnum) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct IlluminanceMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.UInt16? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.UInt16? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.UInt16? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt16? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lightSensorType) public var lightSensorType: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.LightSensorTypeEnum? {
      get
    }
    public var $lightSensorType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.LightSensorTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait, rhs: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait {
  public enum LightSensorTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case photodiode
    case cmos
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.LightSensorTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.IlluminanceMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case lightSensorType
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.IlluminanceMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var lightSensorType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.IlluminanceMeasurementTrait.LightSensorTypeEnum?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct KeypadInputTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.KeypadInputTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.KeypadInputTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.KeypadInputTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.KeypadInputTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.KeypadInputTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.KeypadInputTrait, rhs: GoogleHomeTypes.Matter.KeypadInputTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.KeypadInputTrait.Attributes, rhs: GoogleHomeTypes.Matter.KeypadInputTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait {
  public typealias SendKeyCommandResponse = GoogleHomeTypes.Matter.KeypadInputTrait.SendKeyCommand.Response
  public var supportsSendKeyCommand: Swift.Bool {
    get
  }
  public func sendKey(keyCode: GoogleHomeTypes.Matter.KeypadInputTrait.CECKeyCodeEnum) async throws -> GoogleHomeTypes.Matter.KeypadInputTrait.SendKeyCommandResponse
  public func sendKeyBatchable(keyCode: GoogleHomeTypes.Matter.KeypadInputTrait.CECKeyCodeEnum) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.KeypadInputTrait.SendKeyCommandResponse>
  public struct SendKeyCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.KeypadInputTrait.StatusEnum
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait {
  public enum CECKeyCodeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case select
    case up
    case down
    case left
    case right
    case rightUp
    case rightDown
    case leftUp
    case leftDown
    case rootMenu
    case setupMenu
    case contentsMenu
    case favoriteMenu
    case exit
    case mediaTopMenu
    case mediaContextSensitiveMenu
    case numberEntryMode
    case number11
    case number12
    case number0OrNumber10
    case numbers1
    case numbers2
    case numbers3
    case numbers4
    case numbers5
    case numbers6
    case numbers7
    case numbers8
    case numbers9
    case dot
    case enter
    case clear
    case nextFavorite
    case channelUp
    case channelDown
    case previousChannel
    case soundSelect
    case inputSelect
    case displayInformation
    case help
    case pageUp
    case pageDown
    case power
    case volumeUp
    case volumeDown
    case mute
    case play
    case stop
    case pause
    case record
    case rewind
    case fastForward
    case eject
    case forward
    case backward
    case stopRecord
    case pauseRecord
    case reserved
    case angle
    case subPicture
    case videoOnDemand
    case electronicProgramGuide
    case timerProgramming
    case initialConfiguration
    case selectBroadcastType
    case selectSoundPresentation
    case playFunction
    case pausePlayFunction
    case recordFunction
    case pauseRecordFunction
    case stopFunction
    case muteFunction
    case restoreVolumeFunction
    case tuneFunction
    case selectMediaFunction
    case selectAvInputFunction
    case selectAudioInputFunction
    case powerToggleFunction
    case powerOffFunction
    case powerOnFunction
    case f1Blue
    case f2Red
    case f3Green
    case f4Yellow
    case f5
    case data
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.KeypadInputTrait.CECKeyCodeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case unsupportedKey
    case invalidKeyInCurrentState
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.KeypadInputTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let navigationKeyCodes: GoogleHomeTypes.Matter.KeypadInputTrait.Feature
    public static let locationKeys: GoogleHomeTypes.Matter.KeypadInputTrait.Feature
    public static let numberKeys: GoogleHomeTypes.Matter.KeypadInputTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.KeypadInputTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.KeypadInputTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.KeypadInputTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.KeypadInputTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.KeypadInputTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.KeypadInputTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.KeypadInputTrait.SendKeyCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case keyCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.KeypadInputTrait.SendKeyCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.KeypadInputTrait.SendKeyCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.KeypadInputTrait {
  public static func sendKey(keyCode: GoogleHomeTypes.Matter.KeypadInputTrait.CECKeyCodeEnum) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct LaundryDryerControlsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.LaundryDryerControlsTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.LaundryDryerControlsTrait
  }
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedDrynessLevels) public var supportedDrynessLevels: [GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum]? {
      get
    }
    public var $supportedDrynessLevels: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($selectedDrynessLevel) public var selectedDrynessLevel: GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum? {
      get
    }
    public var $selectedDrynessLevel: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LaundryDryerControlsTrait, rhs: GoogleHomeTypes.Matter.LaundryDryerControlsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attributes, rhs: GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var selectedDrynessLevelIsSet: Swift.Bool {
      get
    }
    final public func setSelectedDrynessLevel(_ value: GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum?)
    final public func clearSelectedDrynessLevel()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait {
  public enum DrynessLevelEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case low
    case normal
    case extra
    case max
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryDryerControlsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedDrynessLevels
    case selectedDrynessLevel
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LaundryDryerControlsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.LaundryDryerControlsTrait {
  public var supportedDrynessLevels: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum]> {
    get
  }
  public var selectedDrynessLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.LaundryDryerControlsTrait {
  final public func setSelectedDrynessLevel(_ value: GoogleHomeTypes.Matter.LaundryDryerControlsTrait.DrynessLevelEnum?)
}
extension GoogleHomeTypes.Matter {
  public struct LaundryWasherControlsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.LaundryWasherControlsTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.LaundryWasherControlsTrait
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($spinSpeeds) public var spinSpeeds: [Swift.String]? {
      get
    }
    public var $spinSpeeds: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($spinSpeedCurrent) public var spinSpeedCurrent: Swift.UInt8? {
      get
    }
    public var $spinSpeedCurrent: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfRinses) public var numberOfRinses: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum? {
      get
    }
    public var $numberOfRinses: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedRinses) public var supportedRinses: [GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum]? {
      get
    }
    public var $supportedRinses: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LaundryWasherControlsTrait, rhs: GoogleHomeTypes.Matter.LaundryWasherControlsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attributes, rhs: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var spinSpeedCurrentIsSet: Swift.Bool {
      get
    }
    final public func setSpinSpeedCurrent(_ value: Swift.UInt8?)
    final public func clearSpinSpeedCurrent()
    final public var numberOfRinsesIsSet: Swift.Bool {
      get
    }
    final public func setNumberOfRinses(_ value: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum)
    final public func clearNumberOfRinses()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  public enum NumberOfRinsesEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case none
    case normal
    case extra
    case max
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let spin: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature
    public static let rinse: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case spinSpeeds
    case spinSpeedCurrent
    case numberOfRinses
    case supportedRinses
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  public var spinSpeeds: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var spinSpeedCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var numberOfRinses: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum> {
    get
  }
  public var supportedRinses: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.LaundryWasherControlsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.LaundryWasherControlsTrait {
  final public func setSpinSpeedCurrent(_ value: Swift.UInt8?)
  final public func setNumberOfRinses(_ value: GoogleHomeTypes.Matter.LaundryWasherControlsTrait.NumberOfRinsesEnum)
}
extension GoogleHomeTypes.Matter {
  public struct LaundryWasherModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.LaundryWasherModeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.LaundryWasherModeTrait
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.LaundryWasherModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.LaundryWasherModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LaundryWasherModeTrait, rhs: GoogleHomeTypes.Matter.LaundryWasherModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.LaundryWasherModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.LaundryWasherModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.LaundryWasherModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case normal
    case delicate
    case heavy
    case whites
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.LaundryWasherModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.LaundryWasherModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.LaundryWasherModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.LaundryWasherModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.LaundryWasherModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct LevelControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.LevelControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.LevelControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.LevelControlTrait
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentLevel) public var currentLevel: Swift.UInt8? {
      get
    }
    public var $currentLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($remainingTime) public var remainingTime: Swift.UInt16? {
      get
    }
    public var $remainingTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minLevel) public var minLevel: Swift.UInt8? {
      get
    }
    public var $minLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxLevel) public var maxLevel: Swift.UInt8? {
      get
    }
    public var $maxLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFrequency) public var currentFrequency: Swift.UInt16? {
      get
    }
    public var $currentFrequency: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minFrequency) public var minFrequency: Swift.UInt16? {
      get
    }
    public var $minFrequency: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxFrequency) public var maxFrequency: Swift.UInt16? {
      get
    }
    public var $maxFrequency: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($options) public var options: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap? {
      get
    }
    public var $options: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onOffTransitionTime) public var onOffTransitionTime: Swift.UInt16? {
      get
    }
    public var $onOffTransitionTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onLevel) public var onLevel: Swift.UInt8? {
      get
    }
    public var $onLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onTransitionTime) public var onTransitionTime: Swift.UInt16? {
      get
    }
    public var $onTransitionTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($offTransitionTime) public var offTransitionTime: Swift.UInt16? {
      get
    }
    public var $offTransitionTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultMoveRate) public var defaultMoveRate: Swift.UInt8? {
      get
    }
    public var $defaultMoveRate: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpCurrentLevel) public var startUpCurrentLevel: Swift.UInt8? {
      get
    }
    public var $startUpCurrentLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.LevelControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.LevelControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.LevelControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LevelControlTrait, rhs: GoogleHomeTypes.Matter.LevelControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LevelControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.LevelControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var optionsIsSet: Swift.Bool {
      get
    }
    final public func setOptions(_ value: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap)
    final public func clearOptions()
    final public var onOffTransitionTimeIsSet: Swift.Bool {
      get
    }
    final public func setOnOffTransitionTime(_ value: Swift.UInt16)
    final public func clearOnOffTransitionTime()
    final public var onLevelIsSet: Swift.Bool {
      get
    }
    final public func setOnLevel(_ value: Swift.UInt8?)
    final public func clearOnLevel()
    final public var onTransitionTimeIsSet: Swift.Bool {
      get
    }
    final public func setOnTransitionTime(_ value: Swift.UInt16?)
    final public func clearOnTransitionTime()
    final public var offTransitionTimeIsSet: Swift.Bool {
      get
    }
    final public func setOffTransitionTime(_ value: Swift.UInt16?)
    final public func clearOffTransitionTime()
    final public var defaultMoveRateIsSet: Swift.Bool {
      get
    }
    final public func setDefaultMoveRate(_ value: Swift.UInt8?)
    final public func clearDefaultMoveRate()
    final public var startUpCurrentLevelIsSet: Swift.Bool {
      get
    }
    final public func setStartUpCurrentLevel(_ value: Swift.UInt8?)
    final public func clearStartUpCurrentLevel()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsMoveToLevelCommand: Swift.Bool {
    get
  }
  public func moveToLevel(level: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func moveToLevelBatchable(level: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToLevelCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsMoveCommand: Swift.Bool {
    get
  }
  public func move(moveMode: GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum, rate: Swift.UInt8?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func moveBatchable(moveMode: GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum, rate: Swift.UInt8?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsStepCommand: Swift.Bool {
    get
  }
  public func step(stepMode: GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func stepBatchable(stepMode: GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsStopCommand: Swift.Bool {
    get
  }
  public func stop(optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func stopBatchable(optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsMoveToLevelWithOnOffCommand: Swift.Bool {
    get
  }
  public func moveToLevelWithOnOff(level: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func moveToLevelWithOnOffBatchable(level: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToLevelWithOnOffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsMoveWithOnOffCommand: Swift.Bool {
    get
  }
  public func moveWithOnOff(moveMode: GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum, rate: Swift.UInt8?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func moveWithOnOffBatchable(moveMode: GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum, rate: Swift.UInt8?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveWithOnOffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsStepWithOnOffCommand: Swift.Bool {
    get
  }
  public func stepWithOnOff(stepMode: GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func stepWithOnOffBatchable(stepMode: GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepWithOnOffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsStopWithOnOffCommand: Swift.Bool {
    get
  }
  public func stopWithOnOff(optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) async throws
  public func stopWithOnOffBatchable(optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopWithOnOffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public var supportsMoveToClosestFrequencyCommand: Swift.Bool {
    get
  }
  public func moveToClosestFrequency(frequency: Swift.UInt16) async throws
  public func moveToClosestFrequencyBatchable(frequency: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToClosestFrequencyCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public enum MoveModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StepModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.LevelControlTrait.Feature
    public static let lighting: GoogleHomeTypes.Matter.LevelControlTrait.Feature
    public static let frequency: GoogleHomeTypes.Matter.LevelControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.LevelControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.LevelControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct OptionsBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let executeIfOff: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap
    public static let coupleColorTempToLevel: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap
    public typealias Element = GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentLevel
    case remainingTime
    case minLevel
    case maxLevel
    case currentFrequency
    case minFrequency
    case maxFrequency
    case options
    case onOffTransitionTime
    case onLevel
    case onTransitionTime
    case offTransitionTime
    case defaultMoveRate
    case startUpCurrentLevel
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.LevelControlTrait {
  public var currentLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var remainingTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var minLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var maxLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentFrequency: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var minFrequency: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var maxFrequency: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var options: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap> {
    get
  }
  public var onOffTransitionTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var onLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onTransitionTime: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var offTransitionTime: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var defaultMoveRate: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var startUpCurrentLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.LevelControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.LevelControlTrait {
  final public func setOptions(_ value: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap)
  final public func setOnOffTransitionTime(_ value: Swift.UInt16)
  final public func setOnLevel(_ value: Swift.UInt8?)
  final public func setOnTransitionTime(_ value: Swift.UInt16?)
  final public func setOffTransitionTime(_ value: Swift.UInt16?)
  final public func setDefaultMoveRate(_ value: Swift.UInt8?)
  final public func setStartUpCurrentLevel(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.LevelControlTrait.MoveToLevelCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case level
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.MoveToLevelCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.MoveToLevelCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.MoveCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case moveMode
    case rate
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.MoveCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.MoveCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.StepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case stepSize
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.StepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.StepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.StopCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.StopCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.StopCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.MoveToLevelWithOnOffCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case level
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.MoveToLevelWithOnOffCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.MoveToLevelWithOnOffCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.MoveWithOnOffCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case moveMode
    case rate
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.MoveWithOnOffCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.MoveWithOnOffCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.StepWithOnOffCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case stepSize
    case transitionTime
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.StepWithOnOffCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.StepWithOnOffCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.StopWithOnOffCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case optionsMask
    case optionsOverride
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.StopWithOnOffCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.StopWithOnOffCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait.MoveToClosestFrequencyCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case frequency
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LevelControlTrait.MoveToClosestFrequencyCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LevelControlTrait.MoveToClosestFrequencyCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.LevelControlTrait {
  public static func moveToLevel(level: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func move(moveMode: GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum, rate: Swift.UInt8?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func step(stepMode: GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stop(optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveToLevelWithOnOff(level: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveWithOnOff(moveMode: GoogleHomeTypes.Matter.LevelControlTrait.MoveModeEnum, rate: Swift.UInt8?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stepWithOnOff(stepMode: GoogleHomeTypes.Matter.LevelControlTrait.StepModeEnum, stepSize: Swift.UInt8, transitionTime: Swift.UInt16?, optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func stopWithOnOff(optionsMask: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap, optionsOverride: GoogleHomeTypes.Matter.LevelControlTrait.OptionsBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func moveToClosestFrequency(frequency: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct LocalizationConfigurationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.LocalizationConfigurationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.LocalizationConfigurationTrait
  }
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeLocale) public var activeLocale: Swift.String? {
      get
    }
    public var $activeLocale: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedLocales) public var supportedLocales: [Swift.String]? {
      get
    }
    public var $supportedLocales: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LocalizationConfigurationTrait, rhs: GoogleHomeTypes.Matter.LocalizationConfigurationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attributes, rhs: GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var activeLocaleIsSet: Swift.Bool {
      get
    }
    final public func setActiveLocale(_ value: Swift.String)
    final public func clearActiveLocale()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.LocalizationConfigurationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case activeLocale
    case supportedLocales
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LocalizationConfigurationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.LocalizationConfigurationTrait {
  public var activeLocale: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var supportedLocales: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.LocalizationConfigurationTrait {
  final public func setActiveLocale(_ value: Swift.String)
}
extension GoogleHomeTypes.Matter {
  public struct LowPowerTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.LowPowerTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.LowPowerTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.LowPowerTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.LowPowerTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.LowPowerTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LowPowerTrait, rhs: GoogleHomeTypes.Matter.LowPowerTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LowPowerTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.LowPowerTrait.Attributes, rhs: GoogleHomeTypes.Matter.LowPowerTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.LowPowerTrait {
  public var supportsSleepCommand: Swift.Bool {
    get
  }
  public func sleep() async throws
  public func sleepBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SleepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.LowPowerTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.LowPowerTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.LowPowerTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.LowPowerTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.LowPowerTrait {
  public static func sleep() -> GoogleHomeSDK.AutomationCommand
}
public enum Matter {
}
extension GoogleHomeTypes.Matter {
  public struct MediaInputTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.MediaInputTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($inputList) public var inputList: [GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct]? {
      get
    }
    public var $inputList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentInput) public var currentInput: Swift.UInt8? {
      get
    }
    public var $currentInput: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.MediaInputTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MediaInputTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.MediaInputTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MediaInputTrait, rhs: GoogleHomeTypes.Matter.MediaInputTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MediaInputTrait.Attributes, rhs: GoogleHomeTypes.Matter.MediaInputTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public struct InputInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let index: Swift.UInt8
    public let inputType: GoogleHomeTypes.Matter.MediaInputTrait.InputTypeEnum
    public let name: Swift.String
    public let description: Swift.String
    public init(index: Swift.UInt8, inputType: GoogleHomeTypes.Matter.MediaInputTrait.InputTypeEnum, name: Swift.String, description: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct, b: GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public var supportsSelectInputCommand: Swift.Bool {
    get
  }
  public func selectInput(index: Swift.UInt8) async throws
  public func selectInputBatchable(index: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SelectInputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public var supportsShowInputStatusCommand: Swift.Bool {
    get
  }
  public func showInputStatus() async throws
  public func showInputStatusBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ShowInputStatusCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public var supportsHideInputStatusCommand: Swift.Bool {
    get
  }
  public func hideInputStatus() async throws
  public func hideInputStatusBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct HideInputStatusCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public var supportsRenameInputCommand: Swift.Bool {
    get
  }
  public func renameInput(index: Swift.UInt8, name: Swift.String) async throws
  public func renameInputBatchable(index: Swift.UInt8, name: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RenameInputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public enum InputTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case `internal`
    case aux
    case coax
    case composite
    case hdmi
    case input
    case line
    case optical
    case video
    case scart
    case usb
    case other
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.MediaInputTrait.InputTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let nameUpdates: GoogleHomeTypes.Matter.MediaInputTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.MediaInputTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.MediaInputTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case inputList
    case currentInput
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaInputTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaInputTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.MediaInputTrait {
  public var inputList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct]> {
    get
  }
  public var currentInput: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaInputTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaInputTrait.SelectInputCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case index
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaInputTrait.SelectInputCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaInputTrait.SelectInputCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaInputTrait.RenameInputCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case index
    case name
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaInputTrait.RenameInputCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaInputTrait.RenameInputCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaInputTrait {
  public static func selectInput(index: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func showInputStatus() -> GoogleHomeSDK.AutomationCommand
  public static func hideInputStatus() -> GoogleHomeSDK.AutomationCommand
  public static func renameInput(index: Swift.UInt8, name: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case index
    case inputType
    case name
    case description
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.MediaInputTrait.InputInfoStruct {
  public var index: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var inputType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaInputTrait.InputTypeEnum> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var description: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct MediaPlaybackTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.MediaPlaybackTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentState) public var currentState: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum? {
      get
    }
    public var $currentState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startTime) public var startTime: Swift.UInt64? {
      get
    }
    public var $startTime: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($duration) public var duration: Swift.UInt64? {
      get
    }
    public var $duration: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sampledPosition) public var sampledPosition: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct? {
      get
    }
    public var $sampledPosition: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($playbackSpeed) public var playbackSpeed: Swift.Float32? {
      get
    }
    public var $playbackSpeed: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($seekRangeEnd) public var seekRangeEnd: Swift.UInt64? {
      get
    }
    public var $seekRangeEnd: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($seekRangeStart) public var seekRangeStart: Swift.UInt64? {
      get
    }
    public var $seekRangeStart: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeAudioTrack) public var activeAudioTrack: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct? {
      get
    }
    public var $activeAudioTrack: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableAudioTracks) public var availableAudioTracks: [GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct]? {
      get
    }
    public var $availableAudioTracks: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeTextTrack) public var activeTextTrack: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct? {
      get
    }
    public var $activeTextTrack: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableTextTracks) public var availableTextTracks: [GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct]? {
      get
    }
    public var $availableTextTracks: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MediaPlaybackTrait, rhs: GoogleHomeTypes.Matter.MediaPlaybackTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MediaPlaybackTrait.Attributes, rhs: GoogleHomeTypes.Matter.MediaPlaybackTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public struct TrackAttributesStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let languageCode: Swift.String
    public let displayName: Swift.String?
    public init(languageCode: Swift.String, displayName: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct, b: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TrackStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let id: Swift.String
    public let trackAttributes: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct?
    public init(id: Swift.String, trackAttributes: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct, b: GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PlaybackPositionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let updatedAt: Swift.UInt64
    public let position: Swift.UInt64?
    public init(updatedAt: Swift.UInt64, position: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct, b: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public struct StateChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let currentState: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum?
      public let startTime: Swift.UInt64?
      public let duration: Swift.UInt64?
      public let sampledPosition: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct?
      public let playbackSpeed: Swift.Float32?
      public let seekRangeEnd: Swift.UInt64?
      public let seekRangeStart: Swift.UInt64?
      public let data: Foundation.Data?
      public let audioAdvanceUnmuted: Swift.Bool?
      public init(currentState: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum?, startTime: Swift.UInt64?, duration: Swift.UInt64?, sampledPosition: GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct?, playbackSpeed: Swift.Float32?, seekRangeEnd: Swift.UInt64?, seekRangeStart: Swift.UInt64?, data: Foundation.Data?, audioAdvanceUnmuted: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent.Payload, b: GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent, b: GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias PlayCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.PlayCommand.Response
  public var supportsPlayCommand: Swift.Bool {
    get
  }
  public func play() async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.PlayCommandResponse
  public func playBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlayCommandResponse>
  public struct PlayCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias PauseCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.PauseCommand.Response
  public var supportsPauseCommand: Swift.Bool {
    get
  }
  public func pause() async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.PauseCommandResponse
  public func pauseBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.PauseCommandResponse>
  public struct PauseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias StopCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.StopCommand.Response
  public var supportsStopCommand: Swift.Bool {
    get
  }
  public func stop() async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.StopCommandResponse
  public func stopBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.StopCommandResponse>
  public struct StopCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias StartOverCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.StartOverCommand.Response
  public var supportsStartOverCommand: Swift.Bool {
    get
  }
  public func startOver() async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.StartOverCommandResponse
  public func startOverBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.StartOverCommandResponse>
  public struct StartOverCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias PreviousCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.PreviousCommand.Response
  public var supportsPreviousCommand: Swift.Bool {
    get
  }
  public func previous() async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.PreviousCommandResponse
  public func previousBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.PreviousCommandResponse>
  public struct PreviousCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias NextCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.NextCommand.Response
  public var supportsNextCommand: Swift.Bool {
    get
  }
  public func next() async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.NextCommandResponse
  public func nextBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.NextCommandResponse>
  public struct NextCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias RewindCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand.Response
  public var supportsRewindCommand: Swift.Bool {
    get
  }
  public func rewind(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommandResponse
  public func rewindBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommandResponse>
  public struct RewindCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var audioAdvanceUnmutedIsSet: Swift.Bool {
        get
      }
      final public func setAudioAdvanceUnmuted(_ value: Swift.Bool)
      final public func clearAudioAdvanceUnmuted()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias FastForwardCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand.Response
  public var supportsFastForwardCommand: Swift.Bool {
    get
  }
  public func fastForward(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommandResponse
  public func fastForwardBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommandResponse>
  public struct FastForwardCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var audioAdvanceUnmutedIsSet: Swift.Bool {
        get
      }
      final public func setAudioAdvanceUnmuted(_ value: Swift.Bool)
      final public func clearAudioAdvanceUnmuted()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias SkipForwardCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipForwardCommand.Response
  public var supportsSkipForwardCommand: Swift.Bool {
    get
  }
  public func skipForward(deltaPositionMilliseconds: Swift.UInt64) async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipForwardCommandResponse
  public func skipForwardBatchable(deltaPositionMilliseconds: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipForwardCommandResponse>
  public struct SkipForwardCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias SkipBackwardCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipBackwardCommand.Response
  public var supportsSkipBackwardCommand: Swift.Bool {
    get
  }
  public func skipBackward(deltaPositionMilliseconds: Swift.UInt64) async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipBackwardCommandResponse
  public func skipBackwardBatchable(deltaPositionMilliseconds: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipBackwardCommandResponse>
  public struct SkipBackwardCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public typealias SeekCommandResponse = GoogleHomeTypes.Matter.MediaPlaybackTrait.SeekCommand.Response
  public var supportsSeekCommand: Swift.Bool {
    get
  }
  public func seek(position: Swift.UInt64) async throws -> GoogleHomeTypes.Matter.MediaPlaybackTrait.SeekCommandResponse
  public func seekBatchable(position: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.MediaPlaybackTrait.SeekCommandResponse>
  public struct SeekCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public var supportsActivateAudioTrackCommand: Swift.Bool {
    get
  }
  public func activateAudioTrack(trackID: Swift.String, audioOutputIndex: Swift.UInt8) async throws
  public func activateAudioTrackBatchable(trackID: Swift.String, audioOutputIndex: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ActivateAudioTrackCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public var supportsActivateTextTrackCommand: Swift.Bool {
    get
  }
  public func activateTextTrack(trackID: Swift.String) async throws
  public func activateTextTrackBatchable(trackID: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ActivateTextTrackCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public var supportsDeactivateTextTrackCommand: Swift.Bool {
    get
  }
  public func deactivateTextTrack() async throws
  public func deactivateTextTrackBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DeactivateTextTrackCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public enum CharacteristicEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case forcedSubtitles
    case describesVideo
    case easyToRead
    case frameBased
    case mainProgram
    case originalContent
    case voiceOverTranslation
    case caption
    case subtitle
    case alternate
    case supplementary
    case commentary
    case dubbedTranslation
    case description
    case metadata
    case enhancedAudioIntelligibility
    case emergency
    case karaoke
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.MediaPlaybackTrait.CharacteristicEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PlaybackStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case playing
    case paused
    case notPlaying
    case buffering
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case invalidStateForCommand
    case notAllowed
    case notActive
    case speedOutOfRange
    case seekOutOfRange
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.MediaPlaybackTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let advancedSeek: GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public static let variableSpeed: GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public static let textTracks: GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public static let audioTracks: GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public static let audioAdvance: GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentState
    case startTime
    case duration
    case sampledPosition
    case playbackSpeed
    case seekRangeEnd
    case seekRangeStart
    case activeAudioTrack
    case availableAudioTracks
    case activeTextTrack
    case availableTextTracks
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public var currentState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum> {
    get
  }
  public var startTime: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var duration: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var sampledPosition: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct?> {
    get
  }
  public var playbackSpeed: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var seekRangeEnd: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var seekRangeStart: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var activeAudioTrack: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct?> {
    get
  }
  public var availableAudioTracks: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct]?> {
    get
  }
  public var activeTextTrack: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct?> {
    get
  }
  public var availableTextTracks: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct]?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentState
    case startTime
    case duration
    case sampledPosition
    case playbackSpeed
    case seekRangeEnd
    case seekRangeStart
    case data
    case audioAdvanceUnmuted
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.MediaPlaybackTrait.StateChangedEvent {
  public var currentState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackStateEnum> {
    get
  }
  public var startTime: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var duration: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var sampledPosition: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct> {
    get
  }
  public var playbackSpeed: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var seekRangeEnd: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var seekRangeStart: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var data: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var audioAdvanceUnmuted: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case audioAdvanceUnmuted
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case audioAdvanceUnmuted
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipForwardCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case deltaPositionMilliseconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipForwardCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipForwardCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipBackwardCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case deltaPositionMilliseconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipBackwardCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.SkipBackwardCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.SeekCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case position
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.SeekCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.SeekCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.ActivateAudioTrackCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case trackID
    case audioOutputIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.ActivateAudioTrackCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.ActivateAudioTrackCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.ActivateTextTrackCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case trackID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.ActivateTextTrackCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.ActivateTextTrackCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait {
  public static func play() -> GoogleHomeSDK.AutomationCommand
  public static func pause() -> GoogleHomeSDK.AutomationCommand
  public static func stop() -> GoogleHomeSDK.AutomationCommand
  public static func startOver() -> GoogleHomeSDK.AutomationCommand
  public static func previous() -> GoogleHomeSDK.AutomationCommand
  public static func next() -> GoogleHomeSDK.AutomationCommand
  public static func rewind(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.MediaPlaybackTrait.RewindCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func fastForward(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.MediaPlaybackTrait.FastForwardCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func skipForward(deltaPositionMilliseconds: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
  public static func skipBackward(deltaPositionMilliseconds: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
  public static func seek(position: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
  public static func activateAudioTrack(trackID: Swift.String, audioOutputIndex: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func activateTextTrack(trackID: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func deactivateTextTrack() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case languageCode
    case displayName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct {
  public var languageCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var displayName: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case id
    case trackAttributes
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackStruct {
  public var id: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var trackAttributes: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MediaPlaybackTrait.TrackAttributesStruct?> {
    get
  }
}
extension GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case updatedAt
    case position
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.MediaPlaybackTrait.PlaybackPositionStruct {
  public var updatedAt: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var position: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct MicrowaveOvenControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cookTime) public var cookTime: Swift.UInt32? {
      get
    }
    public var $cookTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxCookTime) public var maxCookTime: Swift.UInt32? {
      get
    }
    public var $maxCookTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($powerSetting) public var powerSetting: Swift.UInt8? {
      get
    }
    public var $powerSetting: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minPower) public var minPower: Swift.UInt8? {
      get
    }
    public var $minPower: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxPower) public var maxPower: Swift.UInt8? {
      get
    }
    public var $maxPower: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($powerStep) public var powerStep: Swift.UInt8? {
      get
    }
    public var $powerStep: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedWatts) public var supportedWatts: [Swift.UInt16]? {
      get
    }
    public var $supportedWatts: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($selectedWattIndex) public var selectedWattIndex: Swift.UInt8? {
      get
    }
    public var $selectedWattIndex: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wattRating) public var wattRating: Swift.UInt16? {
      get
    }
    public var $wattRating: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait, rhs: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public var supportsSetCookingParametersCommand: Swift.Bool {
    get
  }
  public func setCookingParameters(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.SetCookingParametersCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func setCookingParametersBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.SetCookingParametersCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetCookingParametersCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var cookModeIsSet: Swift.Bool {
        get
      }
      final public func setCookMode(_ value: Swift.UInt8)
      final public func clearCookMode()
      final public var cookTimeIsSet: Swift.Bool {
        get
      }
      final public func setCookTime(_ value: Swift.UInt32)
      final public func clearCookTime()
      final public var powerSettingIsSet: Swift.Bool {
        get
      }
      final public func setPowerSetting(_ value: Swift.UInt8)
      final public func clearPowerSetting()
      final public var wattSettingIndexIsSet: Swift.Bool {
        get
      }
      final public func setWattSettingIndex(_ value: Swift.UInt8)
      final public func clearWattSettingIndex()
      final public var startAfterSettingIsSet: Swift.Bool {
        get
      }
      final public func setStartAfterSetting(_ value: Swift.Bool)
      final public func clearStartAfterSetting()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public var supportsAddMoreTimeCommand: Swift.Bool {
    get
  }
  public func addMoreTime(timeToAdd: Swift.UInt32) async throws
  public func addMoreTimeBatchable(timeToAdd: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct AddMoreTimeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let powerAsNumber: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature
    public static let powerInWatts: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature
    public static let powerNumberLimits: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case cookTime
    case maxCookTime
    case powerSetting
    case minPower
    case maxPower
    case powerStep
    case supportedWatts
    case selectedWattIndex
    case wattRating
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public var cookTime: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxCookTime: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var powerSetting: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var minPower: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var maxPower: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var powerStep: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var supportedWatts: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var selectedWattIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var wattRating: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.SetCookingParametersCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case cookMode
    case cookTime
    case powerSetting
    case wattSettingIndex
    case startAfterSetting
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.SetCookingParametersCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.SetCookingParametersCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.AddMoreTimeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case timeToAdd
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.AddMoreTimeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.AddMoreTimeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.MicrowaveOvenControlTrait {
  public static func setCookingParameters(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.MicrowaveOvenControlTrait.SetCookingParametersCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func addMoreTime(timeToAdd: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct MicrowaveOvenModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait, rhs: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case normal
    case defrost
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.MicrowaveOvenModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.MicrowaveOvenModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ModeSelectTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ModeSelectTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.ModeSelectTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.ModeSelectTrait
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($description) public var description: Swift.String? {
      get
    }
    public var $description: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($standardNamespace) public var standardNamespace: Swift.UInt16? {
      get
    }
    public var $standardNamespace: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ModeSelectTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ModeSelectTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ModeSelectTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ModeSelectTrait, rhs: GoogleHomeTypes.Matter.ModeSelectTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ModeSelectTrait.Attributes, rhs: GoogleHomeTypes.Matter.ModeSelectTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  public struct SemanticTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct, b: GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let semanticTags: [GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, semanticTags: [GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.ModeSelectTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ModeSelectTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ModeSelectTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case description
    case standardNamespace
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ModeSelectTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ModeSelectTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ModeSelectTrait {
  public var description: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var standardNamespace: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ModeSelectTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.ModeSelectTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.ModeSelectTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ModeSelectTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ModeSelectTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ModeSelectTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case semanticTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ModeSelectTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var semanticTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ModeSelectTrait.SemanticTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct NetworkCommissioningTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxNetworks) public var maxNetworks: Swift.UInt8? {
      get
    }
    public var $maxNetworks: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networks) public var networks: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct]? {
      get
    }
    public var $networks: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scanMaxTimeSeconds) public var scanMaxTimeSeconds: Swift.UInt8? {
      get
    }
    public var $scanMaxTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($connectMaxTimeSeconds) public var connectMaxTimeSeconds: Swift.UInt8? {
      get
    }
    public var $connectMaxTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($interfaceEnabled) public var interfaceEnabled: Swift.Bool? {
      get
    }
    public var $interfaceEnabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastNetworkingStatus) public var lastNetworkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum? {
      get
    }
    public var $lastNetworkingStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastNetworkID) public var lastNetworkID: Foundation.Data? {
      get
    }
    public var $lastNetworkID: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastConnectErrorValue) public var lastConnectErrorValue: Swift.Int32? {
      get
    }
    public var $lastConnectErrorValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedWiFiBands) public var supportedWiFiBands: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum]? {
      get
    }
    public var $supportedWiFiBands: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedThreadFeatures) public var supportedThreadFeatures: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap? {
      get
    }
    public var $supportedThreadFeatures: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($threadVersion) public var threadVersion: Swift.UInt16? {
      get
    }
    public var $threadVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.NetworkCommissioningTrait, rhs: GoogleHomeTypes.Matter.NetworkCommissioningTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attributes, rhs: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var interfaceEnabledIsSet: Swift.Bool {
      get
    }
    final public func setInterfaceEnabled(_ value: Swift.Bool)
    final public func clearInterfaceEnabled()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public struct NetworkInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let networkID: Foundation.Data
    public let connected: Swift.Bool
    public let networkIdentifier: Foundation.Data?
    public let clientIdentifier: Foundation.Data?
    public init(networkID: Foundation.Data, connected: Swift.Bool, networkIdentifier: Foundation.Data?, clientIdentifier: Foundation.Data?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct, b: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ThreadInterfaceScanResultStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let panId: Swift.UInt16
    public let extendedPanId: Swift.UInt64
    public let networkName: Swift.String
    public let channel: Swift.UInt16
    public let version: Swift.UInt8
    public let extendedAddress: Foundation.Data
    public let rssi: Swift.Int8
    public let lqi: Swift.UInt8
    public init(panId: Swift.UInt16, extendedPanId: Swift.UInt64, networkName: Swift.String, channel: Swift.UInt16, version: Swift.UInt8, extendedAddress: Foundation.Data, rssi: Swift.Int8, lqi: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct, b: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct WiFiInterfaceScanResultStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let security: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public let ssid: Foundation.Data
    public let bssid: Foundation.Data
    public let channel: Swift.UInt16
    public let wiFiBand: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum
    public let rssi: Swift.Int8
    public init(security: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap, ssid: Foundation.Data, bssid: Foundation.Data, channel: Swift.UInt16, wiFiBand: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum, rssi: Swift.Int8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct, b: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias ScanNetworksCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand.Response
  public var supportsScanNetworksCommand: Swift.Bool {
    get
  }
  public func scanNetworks(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommandResponse
  public func scanNetworksBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommandResponse>
  public struct ScanNetworksCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var ssidIsSet: Swift.Bool {
        get
      }
      final public func setSsid(_ value: Foundation.Data?)
      final public func clearSsid()
      final public var breadcrumbIsSet: Swift.Bool {
        get
      }
      final public func setBreadcrumb(_ value: Swift.UInt64)
      final public func clearBreadcrumb()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let networkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
      public let debugText: Swift.String?
      public let wiFiScanResults: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct]?
      public let threadScanResults: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct]?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias AddOrUpdateWiFiNetworkCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand.Response
  public var supportsAddOrUpdateWiFiNetworkCommand: Swift.Bool {
    get
  }
  public func addOrUpdateWiFiNetwork(ssid: Foundation.Data, credentials: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommandResponse
  public func addOrUpdateWiFiNetworkBatchable(ssid: Foundation.Data, credentials: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommandResponse>
  public struct AddOrUpdateWiFiNetworkCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var breadcrumbIsSet: Swift.Bool {
        get
      }
      final public func setBreadcrumb(_ value: Swift.UInt64)
      final public func clearBreadcrumb()
      final public var networkIdentityIsSet: Swift.Bool {
        get
      }
      final public func setNetworkIdentity(_ value: Foundation.Data)
      final public func clearNetworkIdentity()
      final public var clientIdentifierIsSet: Swift.Bool {
        get
      }
      final public func setClientIdentifier(_ value: Foundation.Data)
      final public func clearClientIdentifier()
      final public var possessionNonceIsSet: Swift.Bool {
        get
      }
      final public func setPossessionNonce(_ value: Foundation.Data)
      final public func clearPossessionNonce()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let networkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
      public let debugText: Swift.String?
      public let networkIndex: Swift.UInt8?
      public let clientIdentity: Foundation.Data?
      public let possessionSignature: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias AddOrUpdateThreadNetworkCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand.Response
  public var supportsAddOrUpdateThreadNetworkCommand: Swift.Bool {
    get
  }
  public func addOrUpdateThreadNetwork(operationalDataset: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommandResponse
  public func addOrUpdateThreadNetworkBatchable(operationalDataset: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommandResponse>
  public struct AddOrUpdateThreadNetworkCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var breadcrumbIsSet: Swift.Bool {
        get
      }
      final public func setBreadcrumb(_ value: Swift.UInt64)
      final public func clearBreadcrumb()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let networkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
      public let debugText: Swift.String?
      public let networkIndex: Swift.UInt8?
      public let clientIdentity: Foundation.Data?
      public let possessionSignature: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias RemoveNetworkCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand.Response
  public var supportsRemoveNetworkCommand: Swift.Bool {
    get
  }
  public func removeNetwork(networkID: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommandResponse
  public func removeNetworkBatchable(networkID: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommandResponse>
  public struct RemoveNetworkCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var breadcrumbIsSet: Swift.Bool {
        get
      }
      final public func setBreadcrumb(_ value: Swift.UInt64)
      final public func clearBreadcrumb()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let networkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
      public let debugText: Swift.String?
      public let networkIndex: Swift.UInt8?
      public let clientIdentity: Foundation.Data?
      public let possessionSignature: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias ConnectNetworkCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand.Response
  public var supportsConnectNetworkCommand: Swift.Bool {
    get
  }
  public func connectNetwork(networkID: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommandResponse
  public func connectNetworkBatchable(networkID: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommandResponse>
  public struct ConnectNetworkCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var breadcrumbIsSet: Swift.Bool {
        get
      }
      final public func setBreadcrumb(_ value: Swift.UInt64)
      final public func clearBreadcrumb()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let networkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
      public let debugText: Swift.String?
      public let errorValue: Swift.Int32?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias ReorderNetworkCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand.Response
  public var supportsReorderNetworkCommand: Swift.Bool {
    get
  }
  public func reorderNetwork(networkID: Foundation.Data, networkIndex: Swift.UInt8, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommandResponse
  public func reorderNetworkBatchable(networkID: Foundation.Data, networkIndex: Swift.UInt8, optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommandResponse>
  public struct ReorderNetworkCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var breadcrumbIsSet: Swift.Bool {
        get
      }
      final public func setBreadcrumb(_ value: Swift.UInt64)
      final public func clearBreadcrumb()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let networkingStatus: GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
      public let debugText: Swift.String?
      public let networkIndex: Swift.UInt8?
      public let clientIdentity: Foundation.Data?
      public let possessionSignature: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public typealias QueryIdentityCommandResponse = GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand.Response
  public var supportsQueryIdentityCommand: Swift.Bool {
    get
  }
  public func queryIdentity(keyIdentifier: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommandResponse
  public func queryIdentityBatchable(keyIdentifier: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommandResponse>
  public struct QueryIdentityCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var possessionNonceIsSet: Swift.Bool {
        get
      }
      final public func setPossessionNonce(_ value: Foundation.Data)
      final public func clearPossessionNonce()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let identity: Foundation.Data
      public let possessionSignature: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public enum NetworkCommissioningStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case outOfRange
    case boundsExceeded
    case networkIDNotFound
    case duplicateNetworkID
    case networkNotFound
    case regulatoryError
    case authFailure
    case unsupportedSecurity
    case otherConnectionFailure
    case ipV6Failed
    case ipBindFailed
    case unknownError
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum WiFiBandEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case num2G4
    case num3G65
    case num5G
    case num6G
    case num60G
    case num1G
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let wiFiNetworkInterface: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature
    public static let threadNetworkInterface: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature
    public static let ethernetNetworkInterface: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature
    public static let perDeviceCredentials: GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct ThreadCapabilitiesBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let isBorderRouterCapable: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public static let isRouterCapable: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public static let isSleepyEndDeviceCapable: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public static let isFullThreadDevice: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public static let isSynchronizedSleepyEndDeviceCapable: GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public typealias Element = GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap
    public typealias RawValue = Swift.UInt16
  }
  public struct WiFiSecurityBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let unencrypted: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public static let wep: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public static let wpaPersonal: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public static let wpA2Personal: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public static let wpA3Personal: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public static let wpA3MatterPDC: GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public typealias Element = GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case maxNetworks
    case networks
    case scanMaxTimeSeconds
    case connectMaxTimeSeconds
    case interfaceEnabled
    case lastNetworkingStatus
    case lastNetworkID
    case lastConnectErrorValue
    case supportedWiFiBands
    case supportedThreadFeatures
    case threadVersion
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public var maxNetworks: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var networks: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct]> {
    get
  }
  public var scanMaxTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var connectMaxTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var interfaceEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var lastNetworkingStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkCommissioningStatusEnum?> {
    get
  }
  public var lastNetworkID: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var lastConnectErrorValue: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var supportedWiFiBands: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum]> {
    get
  }
  public var supportedThreadFeatures: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadCapabilitiesBitmap> {
    get
  }
  public var threadVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NetworkCommissioningTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  final public func setInterfaceEnabled(_ value: Swift.Bool)
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case ssid
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case ssid
    case credentials
    case breadcrumb
    case networkIdentity
    case clientIdentifier
    case possessionNonce
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationalDataset
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkID
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkID
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkID
    case networkIndex
    case breadcrumb
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case keyIdentifier
    case possessionNonce
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait {
  public static func scanNetworks(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.ScanNetworksCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func addOrUpdateWiFiNetwork(ssid: Foundation.Data, credentials: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateWiFiNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func addOrUpdateThreadNetwork(operationalDataset: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.AddOrUpdateThreadNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func removeNetwork(networkID: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.RemoveNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func connectNetwork(networkID: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.ConnectNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func reorderNetwork(networkID: Foundation.Data, networkIndex: Swift.UInt8, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.ReorderNetworkCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func queryIdentity(keyIdentifier: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.NetworkCommissioningTrait.QueryIdentityCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkID
    case connected
    case networkIdentifier
    case clientIdentifier
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.NetworkCommissioningTrait.NetworkInfoStruct {
  public var networkID: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var connected: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var networkIdentifier: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var clientIdentifier: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case panId
    case extendedPanId
    case networkName
    case channel
    case version
    case extendedAddress
    case rssi
    case lqi
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.NetworkCommissioningTrait.ThreadInterfaceScanResultStruct {
  public var panId: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var extendedPanId: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var networkName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var channel: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var version: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var extendedAddress: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var rssi: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
  public var lqi: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case security
    case ssid
    case bssid
    case channel
    case wiFiBand
    case rssi
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiInterfaceScanResultStruct {
  public var security: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiSecurityBitmap> {
    get
  }
  public var ssid: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var bssid: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var channel: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var wiFiBand: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NetworkCommissioningTrait.WiFiBandEnum> {
    get
  }
  public var rssi: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct NitrogenDioxideConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OccupancySensingTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OccupancySensingTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.OccupancySensingTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.OccupancySensingTrait
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupancy) public var occupancy: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap? {
      get
    }
    public var $occupancy: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupancySensorType) public var occupancySensorType: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeEnum? {
      get
    }
    public var $occupancySensorType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupancySensorTypeBitmap) public var occupancySensorTypeBitmap: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap? {
      get
    }
    public var $occupancySensorTypeBitmap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($holdTime) public var holdTime: Swift.UInt16? {
      get
    }
    public var $holdTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($holdTimeLimits) public var holdTimeLimits: GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct? {
      get
    }
    public var $holdTimeLimits: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pirOccupiedToUnoccupiedDelay) public var pirOccupiedToUnoccupiedDelay: Swift.UInt16? {
      get
    }
    public var $pirOccupiedToUnoccupiedDelay: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pirUnoccupiedToOccupiedDelay) public var pirUnoccupiedToOccupiedDelay: Swift.UInt16? {
      get
    }
    public var $pirUnoccupiedToOccupiedDelay: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pirUnoccupiedToOccupiedThreshold) public var pirUnoccupiedToOccupiedThreshold: Swift.UInt8? {
      get
    }
    public var $pirUnoccupiedToOccupiedThreshold: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ultrasonicOccupiedToUnoccupiedDelay) public var ultrasonicOccupiedToUnoccupiedDelay: Swift.UInt16? {
      get
    }
    public var $ultrasonicOccupiedToUnoccupiedDelay: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ultrasonicUnoccupiedToOccupiedDelay) public var ultrasonicUnoccupiedToOccupiedDelay: Swift.UInt16? {
      get
    }
    public var $ultrasonicUnoccupiedToOccupiedDelay: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ultrasonicUnoccupiedToOccupiedThreshold) public var ultrasonicUnoccupiedToOccupiedThreshold: Swift.UInt8? {
      get
    }
    public var $ultrasonicUnoccupiedToOccupiedThreshold: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($physicalContactOccupiedToUnoccupiedDelay) public var physicalContactOccupiedToUnoccupiedDelay: Swift.UInt16? {
      get
    }
    public var $physicalContactOccupiedToUnoccupiedDelay: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($physicalContactUnoccupiedToOccupiedDelay) public var physicalContactUnoccupiedToOccupiedDelay: Swift.UInt16? {
      get
    }
    public var $physicalContactUnoccupiedToOccupiedDelay: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($physicalContactUnoccupiedToOccupiedThreshold) public var physicalContactUnoccupiedToOccupiedThreshold: Swift.UInt8? {
      get
    }
    public var $physicalContactUnoccupiedToOccupiedThreshold: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OccupancySensingTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OccupancySensingTrait, rhs: GoogleHomeTypes.Matter.OccupancySensingTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OccupancySensingTrait.Attributes, rhs: GoogleHomeTypes.Matter.OccupancySensingTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var holdTimeIsSet: Swift.Bool {
      get
    }
    final public func setHoldTime(_ value: Swift.UInt16)
    final public func clearHoldTime()
    final public var pirOccupiedToUnoccupiedDelayIsSet: Swift.Bool {
      get
    }
    final public func setPirOccupiedToUnoccupiedDelay(_ value: Swift.UInt16)
    final public func clearPirOccupiedToUnoccupiedDelay()
    final public var pirUnoccupiedToOccupiedDelayIsSet: Swift.Bool {
      get
    }
    final public func setPirUnoccupiedToOccupiedDelay(_ value: Swift.UInt16)
    final public func clearPirUnoccupiedToOccupiedDelay()
    final public var pirUnoccupiedToOccupiedThresholdIsSet: Swift.Bool {
      get
    }
    final public func setPirUnoccupiedToOccupiedThreshold(_ value: Swift.UInt8)
    final public func clearPirUnoccupiedToOccupiedThreshold()
    final public var ultrasonicOccupiedToUnoccupiedDelayIsSet: Swift.Bool {
      get
    }
    final public func setUltrasonicOccupiedToUnoccupiedDelay(_ value: Swift.UInt16)
    final public func clearUltrasonicOccupiedToUnoccupiedDelay()
    final public var ultrasonicUnoccupiedToOccupiedDelayIsSet: Swift.Bool {
      get
    }
    final public func setUltrasonicUnoccupiedToOccupiedDelay(_ value: Swift.UInt16)
    final public func clearUltrasonicUnoccupiedToOccupiedDelay()
    final public var ultrasonicUnoccupiedToOccupiedThresholdIsSet: Swift.Bool {
      get
    }
    final public func setUltrasonicUnoccupiedToOccupiedThreshold(_ value: Swift.UInt8)
    final public func clearUltrasonicUnoccupiedToOccupiedThreshold()
    final public var physicalContactOccupiedToUnoccupiedDelayIsSet: Swift.Bool {
      get
    }
    final public func setPhysicalContactOccupiedToUnoccupiedDelay(_ value: Swift.UInt16)
    final public func clearPhysicalContactOccupiedToUnoccupiedDelay()
    final public var physicalContactUnoccupiedToOccupiedDelayIsSet: Swift.Bool {
      get
    }
    final public func setPhysicalContactUnoccupiedToOccupiedDelay(_ value: Swift.UInt16)
    final public func clearPhysicalContactUnoccupiedToOccupiedDelay()
    final public var physicalContactUnoccupiedToOccupiedThresholdIsSet: Swift.Bool {
      get
    }
    final public func setPhysicalContactUnoccupiedToOccupiedThreshold(_ value: Swift.UInt8)
    final public func clearPhysicalContactUnoccupiedToOccupiedThreshold()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  public struct HoldTimeLimitsStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let holdTimeMin: Swift.UInt16
    public let holdTimeMax: Swift.UInt16
    public let holdTimeDefault: Swift.UInt16
    public init(holdTimeMin: Swift.UInt16, holdTimeMax: Swift.UInt16, holdTimeDefault: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct, b: GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  public struct OccupancyChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let occupancy: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap?
      public init(occupancy: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent.Payload, b: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent, b: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  public enum OccupancySensorTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case pir
    case ultrasonic
    case pirAndUltrasonic
    case physicalContact
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let other: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let passiveInfrared: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let ultrasonic: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let physicalContact: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let activeInfrared: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let radar: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let rfSensing: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public static let vision: GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.OccupancySensingTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct OccupancyBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let occupied: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap
    public typealias Element = GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct OccupancySensorTypeBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let pir: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap
    public static let ultrasonic: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap
    public static let physicalContact: GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap
    public typealias Element = GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case occupancy
    case occupancySensorType
    case occupancySensorTypeBitmap
    case holdTime
    case holdTimeLimits
    case pirOccupiedToUnoccupiedDelay
    case pirUnoccupiedToOccupiedDelay
    case pirUnoccupiedToOccupiedThreshold
    case ultrasonicOccupiedToUnoccupiedDelay
    case ultrasonicUnoccupiedToOccupiedDelay
    case ultrasonicUnoccupiedToOccupiedThreshold
    case physicalContactOccupiedToUnoccupiedDelay
    case physicalContactUnoccupiedToOccupiedDelay
    case physicalContactUnoccupiedToOccupiedThreshold
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OccupancySensingTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OccupancySensingTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OccupancySensingTrait {
  public var occupancy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap> {
    get
  }
  public var occupancySensorType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeEnum> {
    get
  }
  public var occupancySensorTypeBitmap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancySensorTypeBitmap> {
    get
  }
  public var holdTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var holdTimeLimits: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct> {
    get
  }
  public var pirOccupiedToUnoccupiedDelay: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var pirUnoccupiedToOccupiedDelay: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var pirUnoccupiedToOccupiedThreshold: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var ultrasonicOccupiedToUnoccupiedDelay: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var ultrasonicUnoccupiedToOccupiedDelay: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var ultrasonicUnoccupiedToOccupiedThreshold: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var physicalContactOccupiedToUnoccupiedDelay: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var physicalContactUnoccupiedToOccupiedDelay: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var physicalContactUnoccupiedToOccupiedThreshold: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OccupancySensingTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.OccupancySensingTrait {
  final public func setHoldTime(_ value: Swift.UInt16)
  final public func setPirOccupiedToUnoccupiedDelay(_ value: Swift.UInt16)
  final public func setPirUnoccupiedToOccupiedDelay(_ value: Swift.UInt16)
  final public func setPirUnoccupiedToOccupiedThreshold(_ value: Swift.UInt8)
  final public func setUltrasonicOccupiedToUnoccupiedDelay(_ value: Swift.UInt16)
  final public func setUltrasonicUnoccupiedToOccupiedDelay(_ value: Swift.UInt16)
  final public func setUltrasonicUnoccupiedToOccupiedThreshold(_ value: Swift.UInt8)
  final public func setPhysicalContactOccupiedToUnoccupiedDelay(_ value: Swift.UInt16)
  final public func setPhysicalContactUnoccupiedToOccupiedDelay(_ value: Swift.UInt16)
  final public func setPhysicalContactUnoccupiedToOccupiedThreshold(_ value: Swift.UInt8)
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case occupancy
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyChangedEvent {
  public var occupancy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OccupancySensingTrait.OccupancyBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case holdTimeMin
    case holdTimeMax
    case holdTimeDefault
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OccupancySensingTrait.HoldTimeLimitsStruct {
  public var holdTimeMin: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var holdTimeMax: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var holdTimeDefault: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OnOffTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OnOffTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.OnOffTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.OnOffTrait
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onOff) public var onOff: Swift.Bool? {
      get
    }
    public var $onOff: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($globalSceneControl) public var globalSceneControl: Swift.Bool? {
      get
    }
    public var $globalSceneControl: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onTime) public var onTime: Swift.UInt16? {
      get
    }
    public var $onTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($offWaitTime) public var offWaitTime: Swift.UInt16? {
      get
    }
    public var $offWaitTime: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpOnOff) public var startUpOnOff: GoogleHomeTypes.Matter.OnOffTrait.StartUpOnOffEnum? {
      get
    }
    public var $startUpOnOff: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OnOffTrait.StartUpOnOffEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.OnOffTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OnOffTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OnOffTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OnOffTrait, rhs: GoogleHomeTypes.Matter.OnOffTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OnOffTrait.Attributes, rhs: GoogleHomeTypes.Matter.OnOffTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var onTimeIsSet: Swift.Bool {
      get
    }
    final public func setOnTime(_ value: Swift.UInt16)
    final public func clearOnTime()
    final public var offWaitTimeIsSet: Swift.Bool {
      get
    }
    final public func setOffWaitTime(_ value: Swift.UInt16)
    final public func clearOffWaitTime()
    final public var startUpOnOffIsSet: Swift.Bool {
      get
    }
    final public func setStartUpOnOff(_ value: GoogleHomeTypes.Matter.OnOffTrait.StartUpOnOffEnum?)
    final public func clearStartUpOnOff()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public var supportsOffCommand: Swift.Bool {
    get
  }
  public func off() async throws
  public func offBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public var supportsOnCommand: Swift.Bool {
    get
  }
  public func on() async throws
  public func onBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OnCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public var supportsToggleCommand: Swift.Bool {
    get
  }
  public func toggle() async throws
  public func toggleBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ToggleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public var supportsOffWithEffectCommand: Swift.Bool {
    get
  }
  public func offWithEffect(effectIdentifier: GoogleHomeTypes.Matter.OnOffTrait.EffectIdentifierEnum, effectVariant: Swift.UInt8) async throws
  public func offWithEffectBatchable(effectIdentifier: GoogleHomeTypes.Matter.OnOffTrait.EffectIdentifierEnum, effectVariant: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OffWithEffectCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public var supportsOnWithRecallGlobalSceneCommand: Swift.Bool {
    get
  }
  public func onWithRecallGlobalScene() async throws
  public func onWithRecallGlobalSceneBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OnWithRecallGlobalSceneCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public var supportsOnWithTimedOffCommand: Swift.Bool {
    get
  }
  public func onWithTimedOff(onOffControl: GoogleHomeTypes.Matter.OnOffTrait.OnOffControlBitmap, onTime: Swift.UInt16, offWaitTime: Swift.UInt16) async throws
  public func onWithTimedOffBatchable(onOffControl: GoogleHomeTypes.Matter.OnOffTrait.OnOffControlBitmap, onTime: Swift.UInt16, offWaitTime: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OnWithTimedOffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public enum DelayedAllOffEffectVariantEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case delayedOffFastFade
    case noFade
    case delayedOffSlowFade
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OnOffTrait.DelayedAllOffEffectVariantEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DyingLightEffectVariantEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case dyingLightFadeOff
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OnOffTrait.DyingLightEffectVariantEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EffectIdentifierEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case delayedAllOff
    case dyingLight
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OnOffTrait.EffectIdentifierEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StartUpOnOffEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case off
    case on
    case toggle
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OnOffTrait.StartUpOnOffEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let lighting: GoogleHomeTypes.Matter.OnOffTrait.Feature
    public static let deadFrontBehavior: GoogleHomeTypes.Matter.OnOffTrait.Feature
    public static let offOnly: GoogleHomeTypes.Matter.OnOffTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OnOffTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.OnOffTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct OnOffControlBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let acceptOnlyWhenOn: GoogleHomeTypes.Matter.OnOffTrait.OnOffControlBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OnOffTrait.OnOffControlBitmap
    public typealias Element = GoogleHomeTypes.Matter.OnOffTrait.OnOffControlBitmap
    public typealias RawValue = Swift.UInt8
  }
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case onOff
    case globalSceneControl
    case onTime
    case offWaitTime
    case startUpOnOff
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OnOffTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OnOffTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OnOffTrait {
  public var onOff: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var globalSceneControl: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var onTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var offWaitTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var startUpOnOff: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OnOffTrait.StartUpOnOffEnum?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OnOffTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.OnOffTrait {
  final public func setOnTime(_ value: Swift.UInt16)
  final public func setOffWaitTime(_ value: Swift.UInt16)
  final public func setStartUpOnOff(_ value: GoogleHomeTypes.Matter.OnOffTrait.StartUpOnOffEnum?)
}
extension GoogleHomeTypes.Matter.OnOffTrait.OffWithEffectCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case effectIdentifier
    case effectVariant
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OnOffTrait.OffWithEffectCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OnOffTrait.OffWithEffectCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OnOffTrait.OnWithTimedOffCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case onOffControl
    case onTime
    case offWaitTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OnOffTrait.OnWithTimedOffCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OnOffTrait.OnWithTimedOffCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OnOffTrait {
  public static func off() -> GoogleHomeSDK.AutomationCommand
  public static func on() -> GoogleHomeSDK.AutomationCommand
  public static func toggle() -> GoogleHomeSDK.AutomationCommand
  public static func offWithEffect(effectIdentifier: GoogleHomeTypes.Matter.OnOffTrait.EffectIdentifierEnum, effectVariant: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func onWithRecallGlobalScene() -> GoogleHomeSDK.AutomationCommand
  public static func onWithTimedOff(onOffControl: GoogleHomeTypes.Matter.OnOffTrait.OnOffControlBitmap, onTime: Swift.UInt16, offWaitTime: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct OperationalCredentialsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nocs) public var nocs: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct]? {
      get
    }
    public var $nocs: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($fabrics) public var fabrics: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct]? {
      get
    }
    public var $fabrics: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedFabrics) public var supportedFabrics: Swift.UInt8? {
      get
    }
    public var $supportedFabrics: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($commissionedFabrics) public var commissionedFabrics: Swift.UInt8? {
      get
    }
    public var $commissionedFabrics: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($trustedRootCertificates) public var trustedRootCertificates: [Foundation.Data]? {
      get
    }
    public var $trustedRootCertificates: GoogleHomeSDK.TraitAttribute<[Foundation.Data]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFabricIndex) public var currentFabricIndex: Swift.UInt8? {
      get
    }
    public var $currentFabricIndex: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OperationalCredentialsTrait, rhs: GoogleHomeTypes.Matter.OperationalCredentialsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attributes, rhs: GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public struct FabricDescriptorStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let rootPublicKey: Foundation.Data
    public let vendorID: Swift.UInt16
    public let fabricID: Swift.UInt64
    public let nodeID: Swift.UInt64
    public let label: Swift.String
    public let fabricIndex: Swift.UInt8
    public init(rootPublicKey: Foundation.Data, vendorID: Swift.UInt16, fabricID: Swift.UInt64, nodeID: Swift.UInt64, label: Swift.String, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct, b: GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NocStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let noc: Foundation.Data
    public let icac: Foundation.Data?
    public let fabricIndex: Swift.UInt8
    public init(noc: Foundation.Data, icac: Foundation.Data?, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct, b: GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias AttestationRequestCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.AttestationRequestCommand.Response
  public var supportsAttestationRequestCommand: Swift.Bool {
    get
  }
  public func attestationRequest(attestationNonce: Foundation.Data) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.AttestationRequestCommandResponse
  public func attestationRequestBatchable(attestationNonce: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.AttestationRequestCommandResponse>
  public struct AttestationRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let attestationElements: Foundation.Data
      public let attestationSignature: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias CertificateChainRequestCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainRequestCommand.Response
  public var supportsCertificateChainRequestCommand: Swift.Bool {
    get
  }
  public func certificateChainRequest(certificateType: GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainTypeEnum) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainRequestCommandResponse
  public func certificateChainRequestBatchable(certificateType: GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainTypeEnum) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainRequestCommandResponse>
  public struct CertificateChainRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let certificate: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias CsrRequestCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand.Response
  public var supportsCsrRequestCommand: Swift.Bool {
    get
  }
  public func csrRequest(csrNonce: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommandResponse
  public func csrRequestBatchable(csrNonce: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommandResponse>
  public struct CsrRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var isForUpdateNocIsSet: Swift.Bool {
        get
      }
      final public func setIsForUpdateNoc(_ value: Swift.Bool)
      final public func clearIsForUpdateNoc()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let nocsrElements: Foundation.Data
      public let attestationSignature: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias AddNocCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand.Response
  public var supportsAddNocCommand: Swift.Bool {
    get
  }
  public func addNoc(nocValue: Foundation.Data, ipkValue: Foundation.Data, caseAdminSubject: Swift.UInt64, adminVendorId: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommandResponse
  public func addNocBatchable(nocValue: Foundation.Data, ipkValue: Foundation.Data, caseAdminSubject: Swift.UInt64, adminVendorId: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommandResponse>
  public struct AddNocCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var icacValueIsSet: Swift.Bool {
        get
      }
      final public func setICACValue(_ value: Foundation.Data)
      final public func clearICACValue()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let statusCode: GoogleHomeTypes.Matter.OperationalCredentialsTrait.NodeOperationalCertStatusEnum
      public let fabricIndex: Swift.UInt8?
      public let debugText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias UpdateNocCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand.Response
  public var supportsUpdateNocCommand: Swift.Bool {
    get
  }
  public func updateNoc(nocValue: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommandResponse
  public func updateNocBatchable(nocValue: Foundation.Data, optionalArgsProvider: ((GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommandResponse>
  public struct UpdateNocCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var icacValueIsSet: Swift.Bool {
        get
      }
      final public func setICACValue(_ value: Foundation.Data)
      final public func clearICACValue()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let statusCode: GoogleHomeTypes.Matter.OperationalCredentialsTrait.NodeOperationalCertStatusEnum
      public let fabricIndex: Swift.UInt8?
      public let debugText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias UpdateFabricLabelCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateFabricLabelCommand.Response
  public var supportsUpdateFabricLabelCommand: Swift.Bool {
    get
  }
  public func updateFabricLabel(label: Swift.String) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateFabricLabelCommandResponse
  public func updateFabricLabelBatchable(label: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateFabricLabelCommandResponse>
  public struct UpdateFabricLabelCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let statusCode: GoogleHomeTypes.Matter.OperationalCredentialsTrait.NodeOperationalCertStatusEnum
      public let fabricIndex: Swift.UInt8?
      public let debugText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public typealias RemoveFabricCommandResponse = GoogleHomeTypes.Matter.OperationalCredentialsTrait.RemoveFabricCommand.Response
  public var supportsRemoveFabricCommand: Swift.Bool {
    get
  }
  public func removeFabric(fabricIndex: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.RemoveFabricCommandResponse
  public func removeFabricBatchable(fabricIndex: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalCredentialsTrait.RemoveFabricCommandResponse>
  public struct RemoveFabricCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let statusCode: GoogleHomeTypes.Matter.OperationalCredentialsTrait.NodeOperationalCertStatusEnum
      public let fabricIndex: Swift.UInt8?
      public let debugText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public var supportsAddTrustedRootCertificateCommand: Swift.Bool {
    get
  }
  public func addTrustedRootCertificate(rootCACertificate: Foundation.Data) async throws
  public func addTrustedRootCertificateBatchable(rootCACertificate: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct AddTrustedRootCertificateCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public enum CertificateChainTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case dacCertificate
    case paiCertificate
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum NodeOperationalCertStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ok
    case invalidPublicKey
    case invalidNodeOpId
    case invalidNoc
    case missingCsr
    case tableFull
    case invalidAdminSubject
    case fabricConflict
    case labelConflict
    case invalidFabricIndex
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OperationalCredentialsTrait.NodeOperationalCertStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nocs
    case fabrics
    case supportedFabrics
    case commissionedFabrics
    case trustedRootCertificates
    case currentFabricIndex
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public var nocs: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct]> {
    get
  }
  public var fabrics: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct]> {
    get
  }
  public var supportedFabrics: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var commissionedFabrics: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var trustedRootCertificates: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var currentFabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.AttestationRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case attestationNonce
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.AttestationRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.AttestationRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case certificateType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case csrNonce
    case isForUpdateNoc
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nocValue
    case icacValue
    case ipkValue
    case caseAdminSubject
    case adminVendorId
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nocValue
    case icacValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateFabricLabelCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateFabricLabelCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateFabricLabelCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.RemoveFabricCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.RemoveFabricCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.RemoveFabricCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddTrustedRootCertificateCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rootCACertificate
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddTrustedRootCertificateCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddTrustedRootCertificateCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait {
  public static func attestationRequest(attestationNonce: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
  public static func certificateChainRequest(certificateType: GoogleHomeTypes.Matter.OperationalCredentialsTrait.CertificateChainTypeEnum) -> GoogleHomeSDK.AutomationCommand
  public static func csrRequest(csrNonce: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OperationalCredentialsTrait.CsrRequestCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func addNoc(nocValue: Foundation.Data, ipkValue: Foundation.Data, caseAdminSubject: Swift.UInt64, adminVendorId: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OperationalCredentialsTrait.AddNocCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func updateNoc(nocValue: Foundation.Data, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OperationalCredentialsTrait.UpdateNocCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func updateFabricLabel(label: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func removeFabric(fabricIndex: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func addTrustedRootCertificate(rootCACertificate: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rootPublicKey
    case vendorID
    case fabricID
    case nodeID
    case label
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OperationalCredentialsTrait.FabricDescriptorStruct {
  public var rootPublicKey: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var vendorID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var fabricID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var nodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case noc
    case icac
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OperationalCredentialsTrait.NocStruct {
  public var noc: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var icac: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OperationalStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OperationalStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($phaseList) public var phaseList: [Swift.String]? {
      get
    }
    public var $phaseList: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPhase) public var currentPhase: Swift.UInt8? {
      get
    }
    public var $currentPhase: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($countdownTime) public var countdownTime: Swift.UInt32? {
      get
    }
    public var $countdownTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalStateList) public var operationalStateList: [GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct]? {
      get
    }
    public var $operationalStateList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalState) public var operationalState: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateEnum? {
      get
    }
    public var $operationalState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalError) public var operationalError: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct? {
      get
    }
    public var $operationalError: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OperationalStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OperationalStateTrait, rhs: GoogleHomeTypes.Matter.OperationalStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OperationalStateTrait.Attributes, rhs: GoogleHomeTypes.Matter.OperationalStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public struct ErrorStateStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let errorStateID: Swift.UInt8
    public let errorStateLabel: Swift.String?
    public let errorStateDetails: Swift.String?
    public init(errorStateID: Swift.UInt8, errorStateLabel: Swift.String?, errorStateDetails: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct, b: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationalStateStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let operationalStateID: Swift.UInt8
    public let operationalStateLabel: Swift.String?
    public init(operationalStateID: Swift.UInt8, operationalStateLabel: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct, b: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public struct OperationalErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorState: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct?
      public init(errorState: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent.Payload, b: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent, b: GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationCompletionEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let completionErrorCode: Swift.UInt8?
      public let totalOperationalTime: Swift.UInt32?
      public let pausedTime: Swift.UInt32?
      public init(completionErrorCode: Swift.UInt8?, totalOperationalTime: Swift.UInt32?, pausedTime: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent.Payload, b: GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent, b: GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public typealias PauseCommandResponse = GoogleHomeTypes.Matter.OperationalStateTrait.PauseCommand.Response
  public var supportsPauseCommand: Swift.Bool {
    get
  }
  public func pause() async throws -> GoogleHomeTypes.Matter.OperationalStateTrait.PauseCommandResponse
  public func pauseBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalStateTrait.PauseCommandResponse>
  public struct PauseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public typealias StopCommandResponse = GoogleHomeTypes.Matter.OperationalStateTrait.StopCommand.Response
  public var supportsStopCommand: Swift.Bool {
    get
  }
  public func stop() async throws -> GoogleHomeTypes.Matter.OperationalStateTrait.StopCommandResponse
  public func stopBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalStateTrait.StopCommandResponse>
  public struct StopCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public typealias StartCommandResponse = GoogleHomeTypes.Matter.OperationalStateTrait.StartCommand.Response
  public var supportsStartCommand: Swift.Bool {
    get
  }
  public func start() async throws -> GoogleHomeTypes.Matter.OperationalStateTrait.StartCommandResponse
  public func startBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalStateTrait.StartCommandResponse>
  public struct StartCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public typealias ResumeCommandResponse = GoogleHomeTypes.Matter.OperationalStateTrait.ResumeCommand.Response
  public var supportsResumeCommand: Swift.Bool {
    get
  }
  public func resume() async throws -> GoogleHomeTypes.Matter.OperationalStateTrait.ResumeCommandResponse
  public func resumeBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OperationalStateTrait.ResumeCommandResponse>
  public struct ResumeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public enum ErrorStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case noError
    case unableToStartOrResume
    case unableToCompleteOperation
    case commandInvalidInState
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperationalStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case stopped
    case running
    case paused
    case error
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case phaseList
    case currentPhase
    case countdownTime
    case operationalStateList
    case operationalState
    case operationalError
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OperationalStateTrait {
  public var phaseList: GoogleHomeSDK.TypedExpression<[Swift.String]?> {
    get
  }
  public var currentPhase: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var countdownTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var operationalStateList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct]> {
    get
  }
  public var operationalState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateEnum> {
    get
  }
  public var operationalError: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OperationalStateTrait.OperationalErrorEvent {
  public var errorState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case completionErrorCode
    case totalOperationalTime
    case pausedTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OperationalStateTrait.OperationCompletionEvent {
  public var completionErrorCode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var totalOperationalTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var pausedTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait {
  public static func pause() -> GoogleHomeSDK.AutomationCommand
  public static func stop() -> GoogleHomeSDK.AutomationCommand
  public static func start() -> GoogleHomeSDK.AutomationCommand
  public static func resume() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorStateID
    case errorStateLabel
    case errorStateDetails
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OperationalStateTrait.ErrorStateStruct {
  public var errorStateID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var errorStateLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var errorStateDetails: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationalStateID
    case operationalStateLabel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OperationalStateTrait.OperationalStateStruct {
  public var operationalStateID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var operationalStateLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OtaSoftwareUpdateProviderTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait, rhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attributes, rhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public typealias QueryImageCommandResponse = GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand.Response
  public var supportsQueryImageCommand: Swift.Bool {
    get
  }
  public func queryImage(vendorID: Swift.UInt16, productID: Swift.UInt16, softwareVersion: Swift.UInt32, protocolsSupported: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.DownloadProtocolEnum], optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommandResponse
  public func queryImageBatchable(vendorID: Swift.UInt16, productID: Swift.UInt16, softwareVersion: Swift.UInt32, protocolsSupported: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.DownloadProtocolEnum], optionalArgsProvider: ((GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommandResponse>
  public struct QueryImageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var hardwareVersionIsSet: Swift.Bool {
        get
      }
      final public func setHardwareVersion(_ value: Swift.UInt16)
      final public func clearHardwareVersion()
      final public var locationIsSet: Swift.Bool {
        get
      }
      final public func setLocation(_ value: Swift.String)
      final public func clearLocation()
      final public var requestorCanConsentIsSet: Swift.Bool {
        get
      }
      final public func setRequestorCanConsent(_ value: Swift.Bool)
      final public func clearRequestorCanConsent()
      final public var metadataForProviderIsSet: Swift.Bool {
        get
      }
      final public func setMetadataForProvider(_ value: Foundation.Data)
      final public func clearMetadataForProvider()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.StatusEnum
      public let delayedActionTime: Swift.UInt32?
      public let imageURI: Swift.String?
      public let softwareVersion: Swift.UInt32?
      public let softwareVersionString: Swift.String?
      public let updateToken: Foundation.Data?
      public let userConsentNeeded: Swift.Bool?
      public let metadataForRequestor: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public typealias ApplyUpdateRequestCommandResponse = GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateRequestCommand.Response
  public var supportsApplyUpdateRequestCommand: Swift.Bool {
    get
  }
  public func applyUpdateRequest(updateToken: Foundation.Data, newVersion: Swift.UInt32) async throws -> GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateRequestCommandResponse
  public func applyUpdateRequestBatchable(updateToken: Foundation.Data, newVersion: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateRequestCommandResponse>
  public struct ApplyUpdateRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let action: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateActionEnum
      public let delayedActionTime: Swift.UInt32
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public var supportsNotifyUpdateAppliedCommand: Swift.Bool {
    get
  }
  public func notifyUpdateApplied(updateToken: Foundation.Data, softwareVersion: Swift.UInt32) async throws
  public func notifyUpdateAppliedBatchable(updateToken: Foundation.Data, softwareVersion: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct NotifyUpdateAppliedCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public enum ApplyUpdateActionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case proceed
    case awaitNextAction
    case discontinue
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateActionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DownloadProtocolEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case bdxSynchronous
    case bdxAsynchronous
    case https
    case vendorSpecific
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.DownloadProtocolEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case updateAvailable
    case busy
    case notAvailable
    case downloadProtocolNotSupported
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case vendorID
    case productID
    case softwareVersion
    case protocolsSupported
    case hardwareVersion
    case location
    case requestorCanConsent
    case metadataForProvider
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case updateToken
    case newVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.ApplyUpdateRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.NotifyUpdateAppliedCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case updateToken
    case softwareVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.NotifyUpdateAppliedCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.NotifyUpdateAppliedCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait {
  public static func queryImage(vendorID: Swift.UInt16, productID: Swift.UInt16, softwareVersion: Swift.UInt32, protocolsSupported: [GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.DownloadProtocolEnum], optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait.QueryImageCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func applyUpdateRequest(updateToken: Foundation.Data, newVersion: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
  public static func notifyUpdateApplied(updateToken: Foundation.Data, softwareVersion: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct OtaSoftwareUpdateRequestorTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultOtaProviders) public var defaultOtaProviders: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation]? {
      get
    }
    public var $defaultOtaProviders: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($updatePossible) public var updatePossible: Swift.Bool? {
      get
    }
    public var $updatePossible: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($updateState) public var updateState: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum? {
      get
    }
    public var $updateState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($updateStateProgress) public var updateStateProgress: Swift.UInt8? {
      get
    }
    public var $updateStateProgress: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait, rhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attributes, rhs: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var defaultOtaProvidersIsSet: Swift.Bool {
      get
    }
    final public func setDefaultOtaProviders(_ value: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation])
    final public func clearDefaultOtaProviders()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public struct ProviderLocation : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let providerNodeID: Swift.UInt64
    public let endpoint: Swift.UInt16
    public let fabricIndex: Swift.UInt8
    public init(providerNodeID: Swift.UInt64, endpoint: Swift.UInt16, fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public struct StateTransitionEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let previousState: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum?
      public let newState: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum?
      public let reason: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ChangeReasonEnum?
      public let targetSoftwareVersion: Swift.UInt32?
      public init(previousState: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum?, newState: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum?, reason: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ChangeReasonEnum?, targetSoftwareVersion: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent.Payload, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct VersionAppliedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let softwareVersion: Swift.UInt32?
      public let productID: Swift.UInt16?
      public init(softwareVersion: Swift.UInt32?, productID: Swift.UInt16?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent.Payload, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DownloadErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let softwareVersion: Swift.UInt32?
      public let bytesDownloaded: Swift.UInt64?
      public let progressPercent: Swift.UInt8?
      public let platformCode: Swift.Int64?
      public init(softwareVersion: Swift.UInt32?, bytesDownloaded: Swift.UInt64?, progressPercent: Swift.UInt8?, platformCode: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent.Payload, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent, b: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public var supportsAnnounceOtaProviderCommand: Swift.Bool {
    get
  }
  public func announceOtaProvider(providerNodeID: Swift.UInt64, vendorID: Swift.UInt16, announcementReason: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnouncementReasonEnum, endpoint: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnounceOtaProviderCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func announceOtaProviderBatchable(providerNodeID: Swift.UInt64, vendorID: Swift.UInt16, announcementReason: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnouncementReasonEnum, endpoint: Swift.UInt16, optionalArgsProvider: ((GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnounceOtaProviderCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct AnnounceOtaProviderCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var metadataForNodeIsSet: Swift.Bool {
        get
      }
      final public func setMetadataForNode(_ value: Foundation.Data)
      final public func clearMetadataForNode()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public enum AnnouncementReasonEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case simpleAnnouncement
    case updateAvailable
    case urgentUpdateAvailable
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnouncementReasonEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ChangeReasonEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case success
    case failure
    case timeOut
    case delayByProvider
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ChangeReasonEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum UpdateStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case idle
    case querying
    case delayedOnQuery
    case downloading
    case applying
    case delayedOnApply
    case rollingBack
    case delayedOnUserConsent
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case defaultOtaProviders
    case updatePossible
    case updateState
    case updateStateProgress
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public var defaultOtaProviders: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation]> {
    get
  }
  public var updatePossible: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var updateState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum> {
    get
  }
  public var updateStateProgress: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  final public func setDefaultOtaProviders(_ value: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation])
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case previousState
    case newState
    case reason
    case targetSoftwareVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.StateTransitionEvent {
  public var previousState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum> {
    get
  }
  public var newState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.UpdateStateEnum> {
    get
  }
  public var reason: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ChangeReasonEnum> {
    get
  }
  public var targetSoftwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case softwareVersion
    case productID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.VersionAppliedEvent {
  public var softwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var productID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case softwareVersion
    case bytesDownloaded
    case progressPercent
    case platformCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.DownloadErrorEvent {
  public var softwareVersion: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var bytesDownloaded: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var progressPercent: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var platformCode: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnounceOtaProviderCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case providerNodeID
    case vendorID
    case announcementReason
    case metadataForNode
    case endpoint
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnounceOtaProviderCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnounceOtaProviderCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait {
  public static func announceOtaProvider(providerNodeID: Swift.UInt64, vendorID: Swift.UInt16, announcementReason: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnouncementReasonEnum, endpoint: Swift.UInt16, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.AnnounceOtaProviderCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case providerNodeID
    case endpoint
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait.ProviderLocation {
  public var providerNodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OvenCavityOperationalStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($phaseList) public var phaseList: [Swift.String]? {
      get
    }
    public var $phaseList: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPhase) public var currentPhase: Swift.UInt8? {
      get
    }
    public var $currentPhase: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($countdownTime) public var countdownTime: Swift.UInt32? {
      get
    }
    public var $countdownTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalStateList) public var operationalStateList: [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct]? {
      get
    }
    public var $operationalStateList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalState) public var operationalState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateEnum? {
      get
    }
    public var $operationalState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalError) public var operationalError: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct? {
      get
    }
    public var $operationalError: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait, rhs: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attributes, rhs: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public struct ErrorStateStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let errorStateID: Swift.UInt8
    public let errorStateLabel: Swift.String?
    public let errorStateDetails: Swift.String?
    public init(errorStateID: Swift.UInt8, errorStateLabel: Swift.String?, errorStateDetails: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct, b: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationalStateStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let operationalStateID: Swift.UInt8
    public let operationalStateLabel: Swift.String?
    public init(operationalStateID: Swift.UInt8, operationalStateLabel: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct, b: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public struct OperationalErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct?
      public init(errorState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent.Payload, b: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent, b: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationCompletionEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let completionErrorCode: Swift.UInt8?
      public let totalOperationalTime: Swift.UInt32?
      public let pausedTime: Swift.UInt32?
      public init(completionErrorCode: Swift.UInt8?, totalOperationalTime: Swift.UInt32?, pausedTime: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent.Payload, b: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent, b: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public typealias PauseCommandResponse = GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.PauseCommand.Response
  public var supportsPauseCommand: Swift.Bool {
    get
  }
  public func pause() async throws -> GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.PauseCommandResponse
  public func pauseBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.PauseCommandResponse>
  public struct PauseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public typealias StopCommandResponse = GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.StopCommand.Response
  public var supportsStopCommand: Swift.Bool {
    get
  }
  public func stop() async throws -> GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.StopCommandResponse
  public func stopBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.StopCommandResponse>
  public struct StopCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public typealias StartCommandResponse = GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.StartCommand.Response
  public var supportsStartCommand: Swift.Bool {
    get
  }
  public func start() async throws -> GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.StartCommandResponse
  public func startBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.StartCommandResponse>
  public struct StartCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public typealias ResumeCommandResponse = GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ResumeCommand.Response
  public var supportsResumeCommand: Swift.Bool {
    get
  }
  public func resume() async throws -> GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ResumeCommandResponse
  public func resumeBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ResumeCommandResponse>
  public struct ResumeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public enum ErrorStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case noError
    case unableToStartOrResume
    case unableToCompleteOperation
    case commandInvalidInState
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperationalStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case stopped
    case running
    case paused
    case error
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case phaseList
    case currentPhase
    case countdownTime
    case operationalStateList
    case operationalState
    case operationalError
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public var phaseList: GoogleHomeSDK.TypedExpression<[Swift.String]?> {
    get
  }
  public var currentPhase: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var countdownTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var operationalStateList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct]> {
    get
  }
  public var operationalState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateEnum> {
    get
  }
  public var operationalError: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalErrorEvent {
  public var errorState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case completionErrorCode
    case totalOperationalTime
    case pausedTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationCompletionEvent {
  public var completionErrorCode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var totalOperationalTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var pausedTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait {
  public static func pause() -> GoogleHomeSDK.AutomationCommand
  public static func stop() -> GoogleHomeSDK.AutomationCommand
  public static func start() -> GoogleHomeSDK.AutomationCommand
  public static func resume() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorStateID
    case errorStateLabel
    case errorStateDetails
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.ErrorStateStruct {
  public var errorStateID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var errorStateLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var errorStateDetails: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationalStateID
    case operationalStateLabel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait.OperationalStateStruct {
  public var operationalStateID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var operationalStateLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OvenModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OvenModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.OvenModeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.OvenModeTrait
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.OvenModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OvenModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OvenModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OvenModeTrait, rhs: GoogleHomeTypes.Matter.OvenModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OvenModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.OvenModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.OvenModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.OvenModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.OvenModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case bake
    case convection
    case grill
    case roast
    case clean
    case convectionBake
    case convectionRoast
    case warming
    case proofing
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OvenModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.OvenModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OvenModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.OvenModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OvenModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OvenModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.OvenModeTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.OvenModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.OvenModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.OvenModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.OvenModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct OzoneConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct Pm10ConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct Pm1ConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct Pm25ConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct PowerSourceTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.PowerSourceTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.PowerSourceTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($status) public var status: GoogleHomeTypes.Matter.PowerSourceTrait.PowerSourceStatusEnum? {
      get
    }
    public var $status: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.PowerSourceStatusEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($order) public var order: Swift.UInt8? {
      get
    }
    public var $order: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($description) public var description: Swift.String? {
      get
    }
    public var $description: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredAssessedInputVoltage) public var wiredAssessedInputVoltage: Swift.UInt32? {
      get
    }
    public var $wiredAssessedInputVoltage: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredAssessedInputFrequency) public var wiredAssessedInputFrequency: Swift.UInt16? {
      get
    }
    public var $wiredAssessedInputFrequency: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredCurrentType) public var wiredCurrentType: GoogleHomeTypes.Matter.PowerSourceTrait.WiredCurrentTypeEnum? {
      get
    }
    public var $wiredCurrentType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.WiredCurrentTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredAssessedCurrent) public var wiredAssessedCurrent: Swift.UInt32? {
      get
    }
    public var $wiredAssessedCurrent: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredNominalVoltage) public var wiredNominalVoltage: Swift.UInt32? {
      get
    }
    public var $wiredNominalVoltage: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredMaximumCurrent) public var wiredMaximumCurrent: Swift.UInt32? {
      get
    }
    public var $wiredMaximumCurrent: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiredPresent) public var wiredPresent: Swift.Bool? {
      get
    }
    public var $wiredPresent: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeWiredFaults) public var activeWiredFaults: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]? {
      get
    }
    public var $activeWiredFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batVoltage) public var batVoltage: Swift.UInt32? {
      get
    }
    public var $batVoltage: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batPercentRemaining) public var batPercentRemaining: Swift.UInt8? {
      get
    }
    public var $batPercentRemaining: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batTimeRemaining) public var batTimeRemaining: Swift.UInt32? {
      get
    }
    public var $batTimeRemaining: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batChargeLevel) public var batChargeLevel: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeLevelEnum? {
      get
    }
    public var $batChargeLevel: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeLevelEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batReplacementNeeded) public var batReplacementNeeded: Swift.Bool? {
      get
    }
    public var $batReplacementNeeded: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batReplaceability) public var batReplaceability: GoogleHomeTypes.Matter.PowerSourceTrait.BatReplaceabilityEnum? {
      get
    }
    public var $batReplaceability: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.BatReplaceabilityEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batPresent) public var batPresent: Swift.Bool? {
      get
    }
    public var $batPresent: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeBatFaults) public var activeBatFaults: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]? {
      get
    }
    public var $activeBatFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batReplacementDescription) public var batReplacementDescription: Swift.String? {
      get
    }
    public var $batReplacementDescription: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batCommonDesignation) public var batCommonDesignation: GoogleHomeTypes.Matter.PowerSourceTrait.BatCommonDesignationEnum? {
      get
    }
    public var $batCommonDesignation: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.BatCommonDesignationEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batAnsiDesignation) public var batAnsiDesignation: Swift.String? {
      get
    }
    public var $batAnsiDesignation: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batIecDesignation) public var batIecDesignation: Swift.String? {
      get
    }
    public var $batIecDesignation: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batApprovedChemistry) public var batApprovedChemistry: GoogleHomeTypes.Matter.PowerSourceTrait.BatApprovedChemistryEnum? {
      get
    }
    public var $batApprovedChemistry: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.BatApprovedChemistryEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batCapacity) public var batCapacity: Swift.UInt32? {
      get
    }
    public var $batCapacity: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batQuantity) public var batQuantity: Swift.UInt8? {
      get
    }
    public var $batQuantity: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batChargeState) public var batChargeState: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeStateEnum? {
      get
    }
    public var $batChargeState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batTimeToFullCharge) public var batTimeToFullCharge: Swift.UInt32? {
      get
    }
    public var $batTimeToFullCharge: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batFunctionalWhileCharging) public var batFunctionalWhileCharging: Swift.Bool? {
      get
    }
    public var $batFunctionalWhileCharging: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batChargingCurrent) public var batChargingCurrent: Swift.UInt32? {
      get
    }
    public var $batChargingCurrent: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeBatChargeFaults) public var activeBatChargeFaults: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]? {
      get
    }
    public var $activeBatChargeFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($endpointList) public var endpointList: [Swift.UInt16]? {
      get
    }
    public var $endpointList: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.PowerSourceTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerSourceTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.PowerSourceTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PowerSourceTrait, rhs: GoogleHomeTypes.Matter.PowerSourceTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PowerSourceTrait.Attributes, rhs: GoogleHomeTypes.Matter.PowerSourceTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait {
  public struct BatChargeFaultChangeType : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]
    public let previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]
    public init(current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum], previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeType, b: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BatFaultChangeType : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]
    public let previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]
    public init(current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum], previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeType, b: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct WiredFaultChangeType : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let current: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]
    public let previous: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]
    public init(current: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum], previous: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeType, b: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait {
  public struct WiredFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]?, previous: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent, b: GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BatFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]?, previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent, b: GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BatChargeFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]?, previous: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent, b: GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait {
  public enum BatApprovedChemistryEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case alkaline
    case lithiumCarbonFluoride
    case lithiumChromiumOxide
    case lithiumCopperOxide
    case lithiumIronDisulfide
    case lithiumManganeseDioxide
    case lithiumThionylChloride
    case magnesium
    case mercuryOxide
    case nickelOxyhydride
    case silverOxide
    case zincAir
    case zincCarbon
    case zincChloride
    case zincManganeseDioxide
    case leadAcid
    case lithiumCobaltOxide
    case lithiumIon
    case lithiumIonPolymer
    case lithiumIronPhosphate
    case lithiumSulfur
    case lithiumTitanate
    case nickelCadmium
    case nickelHydrogen
    case nickelIron
    case nickelMetalHydride
    case nickelZinc
    case silverZinc
    case sodiumIon
    case sodiumSulfur
    case zincBromide
    case zincCerium
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatApprovedChemistryEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum BatChargeFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case ambientTooHot
    case ambientTooCold
    case batteryTooHot
    case batteryTooCold
    case batteryAbsent
    case batteryOverVoltage
    case batteryUnderVoltage
    case chargerOverVoltage
    case chargerUnderVoltage
    case safetyTimeout
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum BatChargeLevelEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeLevelEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum BatChargeStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case isCharging
    case isAtFullCharge
    case isNotCharging
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum BatCommonDesignationEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case aaa
    case aa
    case c
    case d
    case num4v5
    case num6v0
    case num9v0
    case num12AA
    case aaaa
    case a
    case b
    case f
    case n
    case no6
    case subC
    case a23
    case a27
    case ba5800
    case duplex
    case num4SR44
    case num523
    case num531
    case num15v0
    case num22v5
    case num30v0
    case num45v0
    case num67v5
    case j
    case cr123a
    case cr2
    case num2CR5
    case crp2
    case crv3
    case sr41
    case sr43
    case sr44
    case sr45
    case sr48
    case sr54
    case sr55
    case sr57
    case sr58
    case sr59
    case sr60
    case sr63
    case sr64
    case sr65
    case sr66
    case sr67
    case sr68
    case sr69
    case sr516
    case sr731
    case sr712
    case lr932
    case a5
    case a10
    case a13
    case a312
    case a675
    case ac41e
    case num10180
    case num10280
    case num10440
    case num14250
    case num14430
    case num14500
    case num14650
    case num15270
    case num16340
    case rcr123a
    case num17500
    case num17670
    case num18350
    case num18500
    case num18650
    case num19670
    case num25500
    case num26650
    case num32600
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatCommonDesignationEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum BatFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case overTemp
    case underTemp
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum BatReplaceabilityEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case notReplaceable
    case userReplaceable
    case factoryReplaceable
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.BatReplaceabilityEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PowerSourceStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case active
    case standby
    case unavailable
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.PowerSourceStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum WiredCurrentTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ac
    case dc
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.WiredCurrentTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum WiredFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case overVoltage
    case underVoltage
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let wired: GoogleHomeTypes.Matter.PowerSourceTrait.Feature
    public static let battery: GoogleHomeTypes.Matter.PowerSourceTrait.Feature
    public static let rechargeable: GoogleHomeTypes.Matter.PowerSourceTrait.Feature
    public static let replaceable: GoogleHomeTypes.Matter.PowerSourceTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.PowerSourceTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.PowerSourceTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case status
    case order
    case description
    case wiredAssessedInputVoltage
    case wiredAssessedInputFrequency
    case wiredCurrentType
    case wiredAssessedCurrent
    case wiredNominalVoltage
    case wiredMaximumCurrent
    case wiredPresent
    case activeWiredFaults
    case batVoltage
    case batPercentRemaining
    case batTimeRemaining
    case batChargeLevel
    case batReplacementNeeded
    case batReplaceability
    case batPresent
    case activeBatFaults
    case batReplacementDescription
    case batCommonDesignation
    case batAnsiDesignation
    case batIecDesignation
    case batApprovedChemistry
    case batCapacity
    case batQuantity
    case batChargeState
    case batTimeToFullCharge
    case batFunctionalWhileCharging
    case batChargingCurrent
    case activeBatChargeFaults
    case endpointList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PowerSourceTrait {
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.PowerSourceStatusEnum> {
    get
  }
  public var order: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var description: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var wiredAssessedInputVoltage: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var wiredAssessedInputFrequency: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var wiredCurrentType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.WiredCurrentTypeEnum> {
    get
  }
  public var wiredAssessedCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var wiredNominalVoltage: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var wiredMaximumCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var wiredPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var activeWiredFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]> {
    get
  }
  public var batVoltage: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var batPercentRemaining: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var batTimeRemaining: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var batChargeLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeLevelEnum> {
    get
  }
  public var batReplacementNeeded: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var batReplaceability: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.BatReplaceabilityEnum> {
    get
  }
  public var batPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var activeBatFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]> {
    get
  }
  public var batReplacementDescription: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var batCommonDesignation: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.BatCommonDesignationEnum> {
    get
  }
  public var batAnsiDesignation: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var batIecDesignation: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var batApprovedChemistry: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.BatApprovedChemistryEnum> {
    get
  }
  public var batCapacity: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var batQuantity: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var batChargeState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeStateEnum> {
    get
  }
  public var batTimeToFullCharge: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var batFunctionalWhileCharging: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var batChargingCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var activeBatChargeFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]> {
    get
  }
  public var endpointList: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerSourceTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeType {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeType.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeType.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultChangeType {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatChargeFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeType {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeType.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeType.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultChangeType {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.BatFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeType {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeType.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeType.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultChangeType {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.PowerSourceTrait.WiredFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct PowerSourceConfigurationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.PowerSourceConfigurationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.PowerSourceConfigurationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sources) public var sources: [Swift.UInt16]? {
      get
    }
    public var $sources: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.PowerSourceConfigurationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait, rhs: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attributes, rhs: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerSourceConfigurationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sources
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerSourceConfigurationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PowerSourceConfigurationTrait {
  public var sources: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct PowerTopologyTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.PowerTopologyTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableEndpoints) public var availableEndpoints: [Swift.UInt16]? {
      get
    }
    public var $availableEndpoints: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeEndpoints) public var activeEndpoints: [Swift.UInt16]? {
      get
    }
    public var $activeEndpoints: GoogleHomeSDK.TraitAttribute<[Swift.UInt16]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.PowerTopologyTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PowerTopologyTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PowerTopologyTrait, rhs: GoogleHomeTypes.Matter.PowerTopologyTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PowerTopologyTrait.Attributes, rhs: GoogleHomeTypes.Matter.PowerTopologyTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let nodeTopology: GoogleHomeTypes.Matter.PowerTopologyTrait.Feature
    public static let treeTopology: GoogleHomeTypes.Matter.PowerTopologyTrait.Feature
    public static let setTopology: GoogleHomeTypes.Matter.PowerTopologyTrait.Feature
    public static let dynamicPowerFlow: GoogleHomeTypes.Matter.PowerTopologyTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.PowerTopologyTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.PowerTopologyTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.PowerTopologyTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case availableEndpoints
    case activeEndpoints
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PowerTopologyTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PowerTopologyTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PowerTopologyTrait {
  public var availableEndpoints: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var activeEndpoints: GoogleHomeSDK.TypedExpression<[Swift.UInt16]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PowerTopologyTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct PressureMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.PressureMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Int16? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Int16? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Int16? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt16? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scaledValue) public var scaledValue: Swift.Int16? {
      get
    }
    public var $scaledValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minScaledValue) public var minScaledValue: Swift.Int16? {
      get
    }
    public var $minScaledValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxScaledValue) public var maxScaledValue: Swift.Int16? {
      get
    }
    public var $maxScaledValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scaledTolerance) public var scaledTolerance: Swift.UInt16? {
      get
    }
    public var $scaledTolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scale) public var scale: Swift.Int8? {
      get
    }
    public var $scale: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.PressureMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PressureMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PressureMeasurementTrait, rhs: GoogleHomeTypes.Matter.PressureMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PressureMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.PressureMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let extended: GoogleHomeTypes.Matter.PressureMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.PressureMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.PressureMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.PressureMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case scaledValue
    case minScaledValue
    case maxScaledValue
    case scaledTolerance
    case scale
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PressureMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PressureMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PressureMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var scaledValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var minScaledValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxScaledValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var scaledTolerance: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var scale: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PressureMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ProxyConfigurationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ProxyConfigurationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ProxyConfigurationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ProxyConfigurationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ProxyConfigurationTrait, rhs: GoogleHomeTypes.Matter.ProxyConfigurationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attributes, rhs: GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ProxyConfigurationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ProxyConfigurationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ProxyConfigurationTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ProxyDiscoveryTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ProxyDiscoveryTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ProxyDiscoveryTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ProxyDiscoveryTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ProxyDiscoveryTrait, rhs: GoogleHomeTypes.Matter.ProxyDiscoveryTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attributes, rhs: GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ProxyDiscoveryTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ProxyDiscoveryTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ProxyDiscoveryTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ProxyValidTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ProxyValidTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ProxyValidTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ProxyValidTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ProxyValidTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ProxyValidTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ProxyValidTrait, rhs: GoogleHomeTypes.Matter.ProxyValidTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ProxyValidTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ProxyValidTrait.Attributes, rhs: GoogleHomeTypes.Matter.ProxyValidTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ProxyValidTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ProxyValidTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ProxyValidTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ProxyValidTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct PulseWidthModulationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.PulseWidthModulationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.PulseWidthModulationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.PulseWidthModulationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PulseWidthModulationTrait, rhs: GoogleHomeTypes.Matter.PulseWidthModulationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attributes, rhs: GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PulseWidthModulationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PulseWidthModulationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PulseWidthModulationTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct PumpConfigurationAndControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxPressure) public var maxPressure: Swift.Int16? {
      get
    }
    public var $maxPressure: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxSpeed) public var maxSpeed: Swift.UInt16? {
      get
    }
    public var $maxSpeed: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxFlow) public var maxFlow: Swift.UInt16? {
      get
    }
    public var $maxFlow: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minConstPressure) public var minConstPressure: Swift.Int16? {
      get
    }
    public var $minConstPressure: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxConstPressure) public var maxConstPressure: Swift.Int16? {
      get
    }
    public var $maxConstPressure: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minCompPressure) public var minCompPressure: Swift.Int16? {
      get
    }
    public var $minCompPressure: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxCompPressure) public var maxCompPressure: Swift.Int16? {
      get
    }
    public var $maxCompPressure: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minConstSpeed) public var minConstSpeed: Swift.UInt16? {
      get
    }
    public var $minConstSpeed: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxConstSpeed) public var maxConstSpeed: Swift.UInt16? {
      get
    }
    public var $maxConstSpeed: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minConstFlow) public var minConstFlow: Swift.UInt16? {
      get
    }
    public var $minConstFlow: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxConstFlow) public var maxConstFlow: Swift.UInt16? {
      get
    }
    public var $maxConstFlow: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minConstTemp) public var minConstTemp: Swift.Int16? {
      get
    }
    public var $minConstTemp: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxConstTemp) public var maxConstTemp: Swift.Int16? {
      get
    }
    public var $maxConstTemp: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pumpStatus) public var pumpStatus: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap? {
      get
    }
    public var $pumpStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($effectiveOperationMode) public var effectiveOperationMode: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum? {
      get
    }
    public var $effectiveOperationMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($effectiveControlMode) public var effectiveControlMode: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum? {
      get
    }
    public var $effectiveControlMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($capacity) public var capacity: Swift.Int16? {
      get
    }
    public var $capacity: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($speed) public var speed: Swift.UInt16? {
      get
    }
    public var $speed: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lifetimeRunningHours) public var lifetimeRunningHours: Swift.UInt32? {
      get
    }
    public var $lifetimeRunningHours: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($power) public var power: Swift.UInt32? {
      get
    }
    public var $power: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lifetimeEnergyConsumed) public var lifetimeEnergyConsumed: Swift.UInt32? {
      get
    }
    public var $lifetimeEnergyConsumed: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationMode) public var operationMode: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum? {
      get
    }
    public var $operationMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($controlMode) public var controlMode: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum? {
      get
    }
    public var $controlMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait, rhs: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var lifetimeRunningHoursIsSet: Swift.Bool {
      get
    }
    final public func setLifetimeRunningHours(_ value: Swift.UInt32?)
    final public func clearLifetimeRunningHours()
    final public var lifetimeEnergyConsumedIsSet: Swift.Bool {
      get
    }
    final public func setLifetimeEnergyConsumed(_ value: Swift.UInt32?)
    final public func clearLifetimeEnergyConsumed()
    final public var operationModeIsSet: Swift.Bool {
      get
    }
    final public func setOperationMode(_ value: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum)
    final public func clearOperationMode()
    final public var controlModeIsSet: Swift.Bool {
      get
    }
    final public func setControlMode(_ value: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum)
    final public func clearControlMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  public struct SupplyVoltageLowEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageLowEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageLowEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageLowEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageLowEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageLowEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageLowEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SupplyVoltageHighEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageHighEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageHighEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageHighEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageHighEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageHighEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SupplyVoltageHighEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PowerMissingPhaseEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PowerMissingPhaseEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PowerMissingPhaseEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PowerMissingPhaseEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PowerMissingPhaseEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PowerMissingPhaseEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PowerMissingPhaseEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SystemPressureLowEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureLowEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureLowEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureLowEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureLowEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureLowEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureLowEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SystemPressureHighEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureHighEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureHighEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureHighEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureHighEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureHighEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SystemPressureHighEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DryRunningEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.DryRunningEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.DryRunningEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.DryRunningEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.DryRunningEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.DryRunningEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.DryRunningEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MotorTemperatureHighEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MotorTemperatureHighEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MotorTemperatureHighEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MotorTemperatureHighEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MotorTemperatureHighEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MotorTemperatureHighEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.MotorTemperatureHighEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PumpMotorFatalFailureEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpMotorFatalFailureEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpMotorFatalFailureEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpMotorFatalFailureEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpMotorFatalFailureEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpMotorFatalFailureEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpMotorFatalFailureEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ElectronicTemperatureHighEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicTemperatureHighEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicTemperatureHighEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicTemperatureHighEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicTemperatureHighEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicTemperatureHighEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicTemperatureHighEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PumpBlockedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpBlockedEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpBlockedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpBlockedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpBlockedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpBlockedEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpBlockedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SensorFailureEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SensorFailureEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SensorFailureEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SensorFailureEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SensorFailureEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SensorFailureEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.SensorFailureEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ElectronicNonFatalFailureEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicNonFatalFailureEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicNonFatalFailureEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicNonFatalFailureEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicNonFatalFailureEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicNonFatalFailureEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicNonFatalFailureEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ElectronicFatalFailureEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicFatalFailureEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicFatalFailureEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicFatalFailureEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicFatalFailureEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicFatalFailureEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ElectronicFatalFailureEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GeneralFaultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.GeneralFaultEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.GeneralFaultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.GeneralFaultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.GeneralFaultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.GeneralFaultEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.GeneralFaultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LeakageEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.LeakageEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.LeakageEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.LeakageEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.LeakageEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.LeakageEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.LeakageEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AirDetectionEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.AirDetectionEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.AirDetectionEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.AirDetectionEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.AirDetectionEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.AirDetectionEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.AirDetectionEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TurbineOperationEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.TurbineOperationEvent.Payload, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.TurbineOperationEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.TurbineOperationEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.TurbineOperationEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.TurbineOperationEvent, b: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.TurbineOperationEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  public enum ControlModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case constantSpeed
    case constantPressure
    case proportionalPressure
    case constantFlow
    case constantTemperature
    case automatic
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperationModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case normal
    case minimum
    case maximum
    case local
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let constantPressure: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public static let compensatedPressure: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public static let constantFlow: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public static let constantSpeed: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public static let constantTemperature: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public static let automatic: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public static let localOperation: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct PumpStatusBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let deviceFault: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let supplyFault: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let speedLow: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let speedHigh: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let localOverride: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let running: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let remotePressure: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let remoteFlow: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public static let remoteTemperature: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public typealias Element = GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap
    public typealias RawValue = Swift.UInt16
  }
}
extension GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case maxPressure
    case maxSpeed
    case maxFlow
    case minConstPressure
    case maxConstPressure
    case minCompPressure
    case maxCompPressure
    case minConstSpeed
    case maxConstSpeed
    case minConstFlow
    case maxConstFlow
    case minConstTemp
    case maxConstTemp
    case pumpStatus
    case effectiveOperationMode
    case effectiveControlMode
    case capacity
    case speed
    case lifetimeRunningHours
    case power
    case lifetimeEnergyConsumed
    case operationMode
    case controlMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  public var maxPressure: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxSpeed: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var maxFlow: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var minConstPressure: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxConstPressure: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var minCompPressure: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxCompPressure: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var minConstSpeed: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var maxConstSpeed: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var minConstFlow: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var maxConstFlow: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var minConstTemp: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxConstTemp: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var pumpStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.PumpStatusBitmap> {
    get
  }
  public var effectiveOperationMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum> {
    get
  }
  public var effectiveControlMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum> {
    get
  }
  public var capacity: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var speed: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var lifetimeRunningHours: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var power: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var lifetimeEnergyConsumed: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var operationMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum> {
    get
  }
  public var controlMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait {
  final public func setLifetimeRunningHours(_ value: Swift.UInt32?)
  final public func setLifetimeEnergyConsumed(_ value: Swift.UInt32?)
  final public func setOperationMode(_ value: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.OperationModeEnum)
  final public func setControlMode(_ value: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait.ControlModeEnum)
}
extension GoogleHomeTypes.Matter {
  public struct RadonConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct RefrigeratorAlarmTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($mask) public var mask: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap? {
      get
    }
    public var $mask: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($state) public var state: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap? {
      get
    }
    public var $state: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supported) public var supported: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap? {
      get
    }
    public var $supported: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait, rhs: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attributes, rhs: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait {
  public struct NotifyEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let active: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?
      public let inactive: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?
      public let state: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?
      public let mask: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?
      public init(active: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?, inactive: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?, state: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?, mask: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent.Payload, b: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent, b: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait {
  public struct AlarmBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let doorOpen: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap
    public typealias Element = GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mask
    case state
    case supported
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RefrigeratorAlarmTrait {
  public var mask: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
  public var supported: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case active
    case inactive
    case state
    case mask
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.NotifyEvent {
  public var active: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
  public var inactive: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
  public var mask: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAlarmTrait.AlarmBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct RefrigeratorAndTemperatureControlledCabinetModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait, rhs: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case rapidCool
    case rapidFreeze
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct RelativeHumidityMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.UInt16? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.UInt16? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.UInt16? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt16? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait, rhs: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct RvcCleanModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RvcCleanModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.RvcCleanModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RvcCleanModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RvcCleanModeTrait, rhs: GoogleHomeTypes.Matter.RvcCleanModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RvcCleanModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.RvcCleanModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.RvcCleanModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.RvcCleanModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.RvcCleanModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case deepClean
    case vacuum
    case mop
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusCode : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case cleaningInProgress
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RvcCleanModeTrait.StatusCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let directModeChange: GoogleHomeTypes.Matter.RvcCleanModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.RvcCleanModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.RvcCleanModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcCleanModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcCleanModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RvcCleanModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcCleanModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcCleanModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RvcCleanModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct RvcOperationalStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($phaseList) public var phaseList: [Swift.String]? {
      get
    }
    public var $phaseList: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPhase) public var currentPhase: Swift.UInt8? {
      get
    }
    public var $currentPhase: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($countdownTime) public var countdownTime: Swift.UInt32? {
      get
    }
    public var $countdownTime: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalStateList) public var operationalStateList: [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct]? {
      get
    }
    public var $operationalStateList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalState) public var operationalState: Swift.UInt8? {
      get
    }
    public var $operationalState: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalError) public var operationalError: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct? {
      get
    }
    public var $operationalError: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RvcOperationalStateTrait, rhs: GoogleHomeTypes.Matter.RvcOperationalStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attributes, rhs: GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public struct ErrorStateStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let errorStateID: Swift.UInt8
    public let errorStateLabel: Swift.String?
    public let errorStateDetails: Swift.String?
    public init(errorStateID: Swift.UInt8, errorStateLabel: Swift.String?, errorStateDetails: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct, b: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationalStateStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let operationalStateID: Swift.UInt8
    public let operationalStateLabel: Swift.String?
    public init(operationalStateID: Swift.UInt8, operationalStateLabel: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct, b: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public struct OperationalErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorState: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct?
      public init(errorState: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent.Payload, b: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent, b: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationCompletionEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let completionErrorCode: Swift.UInt8?
      public let totalOperationalTime: Swift.UInt32?
      public let pausedTime: Swift.UInt32?
      public init(completionErrorCode: Swift.UInt8?, totalOperationalTime: Swift.UInt32?, pausedTime: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent.Payload, b: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent, b: GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public typealias PauseCommandResponse = GoogleHomeTypes.Matter.RvcOperationalStateTrait.PauseCommand.Response
  public var supportsPauseCommand: Swift.Bool {
    get
  }
  public func pause() async throws -> GoogleHomeTypes.Matter.RvcOperationalStateTrait.PauseCommandResponse
  public func pauseBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.RvcOperationalStateTrait.PauseCommandResponse>
  public struct PauseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public typealias ResumeCommandResponse = GoogleHomeTypes.Matter.RvcOperationalStateTrait.ResumeCommand.Response
  public var supportsResumeCommand: Swift.Bool {
    get
  }
  public func resume() async throws -> GoogleHomeTypes.Matter.RvcOperationalStateTrait.ResumeCommandResponse
  public func resumeBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.RvcOperationalStateTrait.ResumeCommandResponse>
  public struct ResumeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public typealias GoHomeCommandResponse = GoogleHomeTypes.Matter.RvcOperationalStateTrait.GoHomeCommand.Response
  public var supportsGoHomeCommand: Swift.Bool {
    get
  }
  public func goHome() async throws -> GoogleHomeTypes.Matter.RvcOperationalStateTrait.GoHomeCommandResponse
  public func goHomeBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.RvcOperationalStateTrait.GoHomeCommandResponse>
  public struct GoHomeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let commandResponseState: GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public enum ErrorStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case noError
    case unableToStartOrResume
    case unableToCompleteOperation
    case commandInvalidInState
    case failedToFindChargingDock
    case stuck
    case dustBinMissing
    case dustBinFull
    case waterTankEmpty
    case waterTankMissing
    case waterTankLidOpen
    case mopCleaningPadMissing
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum OperationalStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case stopped
    case running
    case paused
    case error
    case seekingCharger
    case charging
    case docked
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case phaseList
    case currentPhase
    case countdownTime
    case operationalStateList
    case operationalState
    case operationalError
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcOperationalStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public var phaseList: GoogleHomeSDK.TypedExpression<[Swift.String]?> {
    get
  }
  public var currentPhase: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var countdownTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var operationalStateList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct]> {
    get
  }
  public var operationalState: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var operationalError: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalErrorEvent {
  public var errorState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case completionErrorCode
    case totalOperationalTime
    case pausedTime
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationCompletionEvent {
  public var completionErrorCode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var totalOperationalTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var pausedTime: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait {
  public static func pause() -> GoogleHomeSDK.AutomationCommand
  public static func resume() -> GoogleHomeSDK.AutomationCommand
  public static func goHome() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorStateID
    case errorStateLabel
    case errorStateDetails
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RvcOperationalStateTrait.ErrorStateStruct {
  public var errorStateID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var errorStateLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var errorStateDetails: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationalStateID
    case operationalStateLabel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RvcOperationalStateTrait.OperationalStateStruct {
  public var operationalStateID: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var operationalStateLabel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct RvcRunModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.RvcRunModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.RvcRunModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.RvcRunModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RvcRunModeTrait, rhs: GoogleHomeTypes.Matter.RvcRunModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.RvcRunModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.RvcRunModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.RvcRunModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.RvcRunModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.RvcRunModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case idle
    case cleaning
    case mapping
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusCode : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case stuck
    case dustBinMissing
    case dustBinFull
    case waterTankEmpty
    case waterTankMissing
    case waterTankLidOpen
    case mopCleaningPadMissing
    case batteryLow
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.RvcRunModeTrait.StatusCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let directModeChange: GoogleHomeTypes.Matter.RvcRunModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.RvcRunModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.RvcRunModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcRunModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcRunModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.RvcRunModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.RvcRunModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcRunModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcRunModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.RvcRunModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.RvcRunModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct SampleMeiTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.SampleMeiTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.SampleMeiTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.SampleMeiTrait
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($flipFlop) public var flipFlop: Swift.Bool? {
      get
    }
    public var $flipFlop: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.SampleMeiTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SampleMeiTrait, rhs: GoogleHomeTypes.Matter.SampleMeiTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SampleMeiTrait.Attributes, rhs: GoogleHomeTypes.Matter.SampleMeiTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var flipFlopIsSet: Swift.Bool {
      get
    }
    final public func setFlipFlop(_ value: Swift.Bool)
    final public func clearFlipFlop()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  public struct PingCountEventEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let count: Swift.UInt32?
      public let fabricIndex: Swift.UInt8?
      public init(count: Swift.UInt32?, fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent.Payload, b: GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent, b: GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  public var supportsPingCommand: Swift.Bool {
    get
  }
  public func ping() async throws
  public func pingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct PingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  public typealias AddArgumentsCommandResponse = GoogleHomeTypes.Matter.SampleMeiTrait.AddArgumentsCommand.Response
  public var supportsAddArgumentsCommand: Swift.Bool {
    get
  }
  public func addArguments(arg1: Swift.UInt8, arg2: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.SampleMeiTrait.AddArgumentsCommandResponse
  public func addArgumentsBatchable(arg1: Swift.UInt8, arg2: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.SampleMeiTrait.AddArgumentsCommandResponse>
  public struct AddArgumentsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let returnValue: Swift.UInt8
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case flipFlop
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SampleMeiTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SampleMeiTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SampleMeiTrait {
  public var flipFlop: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.SampleMeiTrait {
  final public func setFlipFlop(_ value: Swift.Bool)
}
extension GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case count
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SampleMeiTrait.PingCountEventEvent {
  public var count: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SampleMeiTrait.AddArgumentsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    case arg2
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SampleMeiTrait.AddArgumentsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SampleMeiTrait.AddArgumentsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.SampleMeiTrait {
  public static func ping() -> GoogleHomeSDK.AutomationCommand
  public static func addArguments(arg1: Swift.UInt8, arg2: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct SmokeCoAlarmTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($expressedState) public var expressedState: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ExpressedStateEnum? {
      get
    }
    public var $expressedState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ExpressedStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($smokeState) public var smokeState: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum? {
      get
    }
    public var $smokeState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($coState) public var coState: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum? {
      get
    }
    public var $coState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batteryAlert) public var batteryAlert: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum? {
      get
    }
    public var $batteryAlert: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($deviceMuted) public var deviceMuted: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteStateEnum? {
      get
    }
    public var $deviceMuted: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($testInProgress) public var testInProgress: Swift.Bool? {
      get
    }
    public var $testInProgress: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hardwareFaultAlert) public var hardwareFaultAlert: Swift.Bool? {
      get
    }
    public var $hardwareFaultAlert: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($endOfServiceAlert) public var endOfServiceAlert: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEnum? {
      get
    }
    public var $endOfServiceAlert: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($interconnectSmokeAlarm) public var interconnectSmokeAlarm: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum? {
      get
    }
    public var $interconnectSmokeAlarm: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($interconnectCOAlarm) public var interconnectCOAlarm: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum? {
      get
    }
    public var $interconnectCOAlarm: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($contaminationState) public var contaminationState: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ContaminationStateEnum? {
      get
    }
    public var $contaminationState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ContaminationStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($smokeSensitivityLevel) public var smokeSensitivityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SensitivityEnum? {
      get
    }
    public var $smokeSensitivityLevel: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SensitivityEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($expiryDate) public var expiryDate: Swift.UInt32? {
      get
    }
    public var $expiryDate: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SmokeCoAlarmTrait, rhs: GoogleHomeTypes.Matter.SmokeCoAlarmTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attributes, rhs: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var smokeSensitivityLevelIsSet: Swift.Bool {
      get
    }
    final public func setSmokeSensitivityLevel(_ value: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SensitivityEnum)
    final public func clearSmokeSensitivityLevel()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public struct SmokeAlarmEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?
      public init(alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct COAlarmEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?
      public init(alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LowBatteryEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?
      public init(alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct HardwareFaultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.HardwareFaultEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.HardwareFaultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.HardwareFaultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.HardwareFaultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.HardwareFaultEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.HardwareFaultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EndOfServiceEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SelfTestCompleteEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SelfTestCompleteEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SelfTestCompleteEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SelfTestCompleteEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SelfTestCompleteEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SelfTestCompleteEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SelfTestCompleteEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AlarmMutedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmMutedEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmMutedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmMutedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmMutedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmMutedEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmMutedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MuteEndedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteEndedEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteEndedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteEndedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteEndedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteEndedEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteEndedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct InterconnectSmokeAlarmEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?
      public init(alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct InterconnectCOAlarmEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?
      public init(alarmSeverityLevel: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AllClearEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AllClearEvent.Payload, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AllClearEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AllClearEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AllClearEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AllClearEvent, b: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AllClearEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public var supportsSelfTestRequestCommand: Swift.Bool {
    get
  }
  public func selfTestRequest() async throws
  public func selfTestRequestBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SelfTestRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public enum AlarmStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case normal
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ContaminationStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case normal
    case low
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ContaminationStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EndOfServiceEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case normal
    case expired
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ExpressedStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case normal
    case smokeAlarm
    case coAlarm
    case batteryAlert
    case testing
    case hardwareFault
    case endOfService
    case interconnectSmoke
    case interconnectCO
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ExpressedStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MuteStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case notMuted
    case muted
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SensitivityEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case high
    case standard
    case low
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SensitivityEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let smokeAlarm: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature
    public static let coAlarm: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case expressedState
    case smokeState
    case coState
    case batteryAlert
    case deviceMuted
    case testInProgress
    case hardwareFaultAlert
    case endOfServiceAlert
    case interconnectSmokeAlarm
    case interconnectCOAlarm
    case contaminationState
    case smokeSensitivityLevel
    case expiryDate
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public var expressedState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ExpressedStateEnum> {
    get
  }
  public var smokeState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
  public var coState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
  public var batteryAlert: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
  public var deviceMuted: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.MuteStateEnum> {
    get
  }
  public var testInProgress: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var hardwareFaultAlert: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var endOfServiceAlert: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.EndOfServiceEnum> {
    get
  }
  public var interconnectSmokeAlarm: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
  public var interconnectCOAlarm: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
  public var contaminationState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.ContaminationStateEnum> {
    get
  }
  public var smokeSensitivityLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SensitivityEnum> {
    get
  }
  public var expiryDate: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  final public func setSmokeSensitivityLevel(_ value: GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SensitivityEnum)
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmSeverityLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait.SmokeAlarmEvent {
  public var alarmSeverityLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmSeverityLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait.COAlarmEvent {
  public var alarmSeverityLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmSeverityLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait.LowBatteryEvent {
  public var alarmSeverityLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmSeverityLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectSmokeAlarmEvent {
  public var alarmSeverityLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case alarmSeverityLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SmokeCoAlarmTrait.InterconnectCOAlarmEvent {
  public var alarmSeverityLevel: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SmokeCoAlarmTrait.AlarmStateEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.SmokeCoAlarmTrait {
  public static func selfTestRequest() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct SoftwareDiagnosticsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($threadMetrics) public var threadMetrics: [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct]? {
      get
    }
    public var $threadMetrics: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentHeapFree) public var currentHeapFree: Swift.UInt64? {
      get
    }
    public var $currentHeapFree: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentHeapUsed) public var currentHeapUsed: Swift.UInt64? {
      get
    }
    public var $currentHeapUsed: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentHeapHighWatermark) public var currentHeapHighWatermark: Swift.UInt64? {
      get
    }
    public var $currentHeapHighWatermark: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait, rhs: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attributes, rhs: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public struct ThreadMetricsStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let id: Swift.UInt64
    public let name: Swift.String?
    public let stackFreeCurrent: Swift.UInt32?
    public let stackFreeMinimum: Swift.UInt32?
    public let stackSize: Swift.UInt32?
    public init(id: Swift.UInt64, name: Swift.String?, stackFreeCurrent: Swift.UInt32?, stackFreeMinimum: Swift.UInt32?, stackSize: Swift.UInt32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct, b: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public struct SoftwareFaultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let id: Swift.UInt64?
      public let name: Swift.String?
      public let faultRecording: Foundation.Data?
      public init(id: Swift.UInt64?, name: Swift.String?, faultRecording: Foundation.Data?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent.Payload, b: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent, b: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public var supportsResetWatermarksCommand: Swift.Bool {
    get
  }
  public func resetWatermarks() async throws
  public func resetWatermarksBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetWatermarksCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let watermarks: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case threadMetrics
    case currentHeapFree
    case currentHeapUsed
    case currentHeapHighWatermark
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public var threadMetrics: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct]> {
    get
  }
  public var currentHeapFree: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var currentHeapUsed: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var currentHeapHighWatermark: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case id
    case name
    case faultRecording
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.SoftwareFaultEvent {
  public var id: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var faultRecording: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait {
  public static func resetWatermarks() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case id
    case name
    case stackFreeCurrent
    case stackFreeMinimum
    case stackSize
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait.ThreadMetricsStruct {
  public var id: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var stackFreeCurrent: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var stackFreeMinimum: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var stackSize: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct SwitchTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.SwitchTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.SwitchTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfPositions) public var numberOfPositions: Swift.UInt8? {
      get
    }
    public var $numberOfPositions: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPosition) public var currentPosition: Swift.UInt8? {
      get
    }
    public var $currentPosition: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($multiPressMax) public var multiPressMax: Swift.UInt8? {
      get
    }
    public var $multiPressMax: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.SwitchTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SwitchTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($googleSyntheticFeatures) public var googleSyntheticFeatures: GoogleHomeTypes.Matter.SwitchTrait.GoogleSyntheticFeatures? {
      get
    }
    public var $googleSyntheticFeatures: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.SwitchTrait.GoogleSyntheticFeatures> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.SwitchTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SwitchTrait, rhs: GoogleHomeTypes.Matter.SwitchTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.SwitchTrait.Attributes, rhs: GoogleHomeTypes.Matter.SwitchTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait {
  public struct SwitchLatchedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let newPosition: Swift.UInt8?
      public init(newPosition: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent, b: GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct InitialPressEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let newPosition: Swift.UInt8?
      public init(newPosition: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent, b: GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LongPressEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let newPosition: Swift.UInt8?
      public init(newPosition: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent, b: GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ShortReleaseEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let previousPosition: Swift.UInt8?
      public init(previousPosition: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent, b: GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LongReleaseEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let previousPosition: Swift.UInt8?
      public init(previousPosition: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent, b: GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MultiPressOngoingEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let newPosition: Swift.UInt8?
      public let currentNumberOfPressesCounted: Swift.UInt8?
      public init(newPosition: Swift.UInt8?, currentNumberOfPressesCounted: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent, b: GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MultiPressCompleteEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let previousPosition: Swift.UInt8?
      public let totalNumberOfPressesCounted: Swift.UInt8?
      public init(previousPosition: Swift.UInt8?, totalNumberOfPressesCounted: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent, b: GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SyntheticButtonPressEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let pressCount: Swift.UInt32?
      public let latchPosition: Swift.UInt32?
      public init(pressCount: Swift.UInt32?, latchPosition: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent, b: GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SyntheticLongPressStartEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressStartEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressStartEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressStartEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressStartEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressStartEvent, b: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressStartEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SyntheticLongPressReleaseEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressReleaseEvent.Payload, b: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressReleaseEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressReleaseEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressReleaseEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressReleaseEvent, b: GoogleHomeTypes.Matter.SwitchTrait.SyntheticLongPressReleaseEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let latchingSwitch: GoogleHomeTypes.Matter.SwitchTrait.Feature
    public static let momentarySwitch: GoogleHomeTypes.Matter.SwitchTrait.Feature
    public static let momentarySwitchRelease: GoogleHomeTypes.Matter.SwitchTrait.Feature
    public static let momentarySwitchLongPress: GoogleHomeTypes.Matter.SwitchTrait.Feature
    public static let momentarySwitchMultiPress: GoogleHomeTypes.Matter.SwitchTrait.Feature
    public static let actionSwitch: GoogleHomeTypes.Matter.SwitchTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.SwitchTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.SwitchTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct GoogleSyntheticFeatures : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let hasSyntheticEvents: GoogleHomeTypes.Matter.SwitchTrait.GoogleSyntheticFeatures
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.SwitchTrait.GoogleSyntheticFeatures
    public typealias Element = GoogleHomeTypes.Matter.SwitchTrait.GoogleSyntheticFeatures
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case numberOfPositions
    case currentPosition
    case multiPressMax
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    case googleSyntheticFeatures
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait {
  public var numberOfPositions: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var multiPressMax: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SwitchTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var googleSyntheticFeatures: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.SwitchTrait.GoogleSyntheticFeatures> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.SwitchLatchedEvent {
  public var newPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.InitialPressEvent {
  public var newPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.LongPressEvent {
  public var newPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case previousPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.ShortReleaseEvent {
  public var previousPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case previousPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.LongReleaseEvent {
  public var previousPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newPosition
    case currentNumberOfPressesCounted
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.MultiPressOngoingEvent {
  public var newPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentNumberOfPressesCounted: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case previousPosition
    case totalNumberOfPressesCounted
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.MultiPressCompleteEvent {
  public var previousPosition: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var totalNumberOfPressesCounted: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case pressCount
    case latchPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.SwitchTrait.SyntheticButtonPressEvent {
  public var pressCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var latchPosition: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct TargetNavigatorTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.TargetNavigatorTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetList) public var targetList: [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct]? {
      get
    }
    public var $targetList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentTarget) public var currentTarget: Swift.UInt8? {
      get
    }
    public var $currentTarget: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TargetNavigatorTrait, rhs: GoogleHomeTypes.Matter.TargetNavigatorTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TargetNavigatorTrait.Attributes, rhs: GoogleHomeTypes.Matter.TargetNavigatorTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public struct TargetInfoStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let identifier: Swift.UInt8
    public let name: Swift.String
    public init(identifier: Swift.UInt8, name: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct, b: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public struct TargetUpdatedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let targetList: [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct]?
      public let currentTarget: Swift.UInt8?
      public let data: Foundation.Data?
      public init(targetList: [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct]?, currentTarget: Swift.UInt8?, data: Foundation.Data?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent.Payload, b: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent, b: GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public typealias NavigateTargetCommandResponse = GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand.Response
  public var supportsNavigateTargetCommand: Swift.Bool {
    get
  }
  public func navigateTarget(target: Swift.UInt8, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommandResponse
  public func navigateTargetBatchable(target: Swift.UInt8, optionalArgsProvider: ((GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommandResponse>
  public struct NavigateTargetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var dataIsSet: Swift.Bool {
        get
      }
      final public func setData(_ value: Swift.String)
      final public func clearData()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: GoogleHomeTypes.Matter.TargetNavigatorTrait.StatusEnum
      public let data: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case success
    case targetNotFound
    case notAllowed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TargetNavigatorTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case targetList
    case currentTarget
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TargetNavigatorTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TargetNavigatorTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public var targetList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct]> {
    get
  }
  public var currentTarget: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case targetList
    case currentTarget
    case data
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetUpdatedEvent {
  public var targetList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct]> {
    get
  }
  public var currentTarget: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var data: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case target
    case data
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait {
  public static func navigateTarget(target: Swift.UInt8, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.TargetNavigatorTrait.NavigateTargetCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case identifier
    case name
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.TargetNavigatorTrait.TargetInfoStruct {
  public var identifier: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct TemperatureControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.TemperatureControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureSetpoint) public var temperatureSetpoint: Swift.Int16? {
      get
    }
    public var $temperatureSetpoint: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minTemperature) public var minTemperature: Swift.Int16? {
      get
    }
    public var $minTemperature: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxTemperature) public var maxTemperature: Swift.Int16? {
      get
    }
    public var $maxTemperature: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($step) public var step: Swift.Int16? {
      get
    }
    public var $step: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($selectedTemperatureLevel) public var selectedTemperatureLevel: Swift.UInt8? {
      get
    }
    public var $selectedTemperatureLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedTemperatureLevels) public var supportedTemperatureLevels: [Swift.String]? {
      get
    }
    public var $supportedTemperatureLevels: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.TemperatureControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TemperatureControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TemperatureControlTrait, rhs: GoogleHomeTypes.Matter.TemperatureControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TemperatureControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.TemperatureControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait {
  public var supportsSetTemperatureCommand: Swift.Bool {
    get
  }
  public func setTemperature(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.TemperatureControlTrait.SetTemperatureCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func setTemperatureBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.TemperatureControlTrait.SetTemperatureCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetTemperatureCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var targetTemperatureIsSet: Swift.Bool {
        get
      }
      final public func setTargetTemperature(_ value: Swift.Int16)
      final public func clearTargetTemperature()
      final public var targetTemperatureLevelIsSet: Swift.Bool {
        get
      }
      final public func setTargetTemperatureLevel(_ value: Swift.UInt8)
      final public func clearTargetTemperatureLevel()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let temperatureNumber: GoogleHomeTypes.Matter.TemperatureControlTrait.Feature
    public static let temperatureLevel: GoogleHomeTypes.Matter.TemperatureControlTrait.Feature
    public static let temperatureStep: GoogleHomeTypes.Matter.TemperatureControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.TemperatureControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.TemperatureControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case temperatureSetpoint
    case minTemperature
    case maxTemperature
    case step
    case selectedTemperatureLevel
    case supportedTemperatureLevels
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TemperatureControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TemperatureControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TemperatureControlTrait {
  public var temperatureSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var minTemperature: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var maxTemperature: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var step: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var selectedTemperatureLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var supportedTemperatureLevels: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TemperatureControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait.SetTemperatureCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case targetTemperature
    case targetTemperatureLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TemperatureControlTrait.SetTemperatureCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TemperatureControlTrait.SetTemperatureCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TemperatureControlTrait {
  public static func setTemperature(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.TemperatureControlTrait.SetTemperatureCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct TemperatureMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.TemperatureMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.TemperatureMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Int16? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Int16? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Int16? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt16? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.TemperatureMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TemperatureMeasurementTrait, rhs: GoogleHomeTypes.Matter.TemperatureMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TemperatureMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TemperatureMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TemperatureMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ThermostatTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ThermostatTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.ThermostatTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.ThermostatTrait
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($localTemperature) public var localTemperature: Swift.Int16? {
      get
    }
    public var $localTemperature: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($outdoorTemperature) public var outdoorTemperature: Swift.Int16? {
      get
    }
    public var $outdoorTemperature: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupancy) public var occupancy: GoogleHomeTypes.Matter.ThermostatTrait.OccupancyBitmap? {
      get
    }
    public var $occupancy: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.OccupancyBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($absMinHeatSetpointLimit) public var absMinHeatSetpointLimit: Swift.Int16? {
      get
    }
    public var $absMinHeatSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($absMaxHeatSetpointLimit) public var absMaxHeatSetpointLimit: Swift.Int16? {
      get
    }
    public var $absMaxHeatSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($absMinCoolSetpointLimit) public var absMinCoolSetpointLimit: Swift.Int16? {
      get
    }
    public var $absMinCoolSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($absMaxCoolSetpointLimit) public var absMaxCoolSetpointLimit: Swift.Int16? {
      get
    }
    public var $absMaxCoolSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($piCoolingDemand) public var piCoolingDemand: Swift.UInt8? {
      get
    }
    public var $piCoolingDemand: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($piHeatingDemand) public var piHeatingDemand: Swift.UInt8? {
      get
    }
    public var $piHeatingDemand: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hvacSystemTypeConfiguration) public var hvacSystemTypeConfiguration: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap? {
      get
    }
    public var $hvacSystemTypeConfiguration: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($localTemperatureCalibration) public var localTemperatureCalibration: Swift.Int8? {
      get
    }
    public var $localTemperatureCalibration: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupiedCoolingSetpoint) public var occupiedCoolingSetpoint: Swift.Int16? {
      get
    }
    public var $occupiedCoolingSetpoint: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupiedHeatingSetpoint) public var occupiedHeatingSetpoint: Swift.Int16? {
      get
    }
    public var $occupiedHeatingSetpoint: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($unoccupiedCoolingSetpoint) public var unoccupiedCoolingSetpoint: Swift.Int16? {
      get
    }
    public var $unoccupiedCoolingSetpoint: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($unoccupiedHeatingSetpoint) public var unoccupiedHeatingSetpoint: Swift.Int16? {
      get
    }
    public var $unoccupiedHeatingSetpoint: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minHeatSetpointLimit) public var minHeatSetpointLimit: Swift.Int16? {
      get
    }
    public var $minHeatSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxHeatSetpointLimit) public var maxHeatSetpointLimit: Swift.Int16? {
      get
    }
    public var $maxHeatSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minCoolSetpointLimit) public var minCoolSetpointLimit: Swift.Int16? {
      get
    }
    public var $minCoolSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxCoolSetpointLimit) public var maxCoolSetpointLimit: Swift.Int16? {
      get
    }
    public var $maxCoolSetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minSetpointDeadBand) public var minSetpointDeadBand: Swift.Int8? {
      get
    }
    public var $minSetpointDeadBand: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($remoteSensing) public var remoteSensing: GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap? {
      get
    }
    public var $remoteSensing: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($controlSequenceOfOperation) public var controlSequenceOfOperation: GoogleHomeTypes.Matter.ThermostatTrait.ControlSequenceOfOperationEnum? {
      get
    }
    public var $controlSequenceOfOperation: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ControlSequenceOfOperationEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($systemMode) public var systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum? {
      get
    }
    public var $systemMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($thermostatRunningMode) public var thermostatRunningMode: GoogleHomeTypes.Matter.ThermostatTrait.ThermostatRunningModeEnum? {
      get
    }
    public var $thermostatRunningMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ThermostatRunningModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startOfWeek) public var startOfWeek: GoogleHomeTypes.Matter.ThermostatTrait.StartOfWeekEnum? {
      get
    }
    public var $startOfWeek: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.StartOfWeekEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfWeeklyTransitions) public var numberOfWeeklyTransitions: Swift.UInt8? {
      get
    }
    public var $numberOfWeeklyTransitions: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfDailyTransitions) public var numberOfDailyTransitions: Swift.UInt8? {
      get
    }
    public var $numberOfDailyTransitions: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureSetpointHold) public var temperatureSetpointHold: GoogleHomeTypes.Matter.ThermostatTrait.TemperatureSetpointHoldEnum? {
      get
    }
    public var $temperatureSetpointHold: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.TemperatureSetpointHoldEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureSetpointHoldDuration) public var temperatureSetpointHoldDuration: Swift.UInt16? {
      get
    }
    public var $temperatureSetpointHoldDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($thermostatProgrammingOperationMode) public var thermostatProgrammingOperationMode: GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap? {
      get
    }
    public var $thermostatProgrammingOperationMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($thermostatRunningState) public var thermostatRunningState: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap? {
      get
    }
    public var $thermostatRunningState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($setpointChangeSource) public var setpointChangeSource: GoogleHomeTypes.Matter.ThermostatTrait.SetpointChangeSourceEnum? {
      get
    }
    public var $setpointChangeSource: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.SetpointChangeSourceEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($setpointChangeAmount) public var setpointChangeAmount: Swift.Int16? {
      get
    }
    public var $setpointChangeAmount: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($setpointChangeSourceTimestamp) public var setpointChangeSourceTimestamp: Swift.UInt32? {
      get
    }
    public var $setpointChangeSourceTimestamp: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupiedSetback) public var occupiedSetback: Swift.UInt8? {
      get
    }
    public var $occupiedSetback: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupiedSetbackMin) public var occupiedSetbackMin: Swift.UInt8? {
      get
    }
    public var $occupiedSetbackMin: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($occupiedSetbackMax) public var occupiedSetbackMax: Swift.UInt8? {
      get
    }
    public var $occupiedSetbackMax: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($unoccupiedSetback) public var unoccupiedSetback: Swift.UInt8? {
      get
    }
    public var $unoccupiedSetback: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($unoccupiedSetbackMin) public var unoccupiedSetbackMin: Swift.UInt8? {
      get
    }
    public var $unoccupiedSetbackMin: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($unoccupiedSetbackMax) public var unoccupiedSetbackMax: Swift.UInt8? {
      get
    }
    public var $unoccupiedSetbackMax: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($emergencyHeatDelta) public var emergencyHeatDelta: Swift.UInt8? {
      get
    }
    public var $emergencyHeatDelta: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acType) public var acType: GoogleHomeTypes.Matter.ThermostatTrait.ACTypeEnum? {
      get
    }
    public var $acType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ACTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acCapacity) public var acCapacity: Swift.UInt16? {
      get
    }
    public var $acCapacity: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acRefrigerantType) public var acRefrigerantType: GoogleHomeTypes.Matter.ThermostatTrait.ACRefrigerantTypeEnum? {
      get
    }
    public var $acRefrigerantType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ACRefrigerantTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acCompressorType) public var acCompressorType: GoogleHomeTypes.Matter.ThermostatTrait.ACCompressorTypeEnum? {
      get
    }
    public var $acCompressorType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ACCompressorTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acErrorCode) public var acErrorCode: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap? {
      get
    }
    public var $acErrorCode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acLouverPosition) public var acLouverPosition: GoogleHomeTypes.Matter.ThermostatTrait.ACLouverPositionEnum? {
      get
    }
    public var $acLouverPosition: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ACLouverPositionEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acCoilTemperature) public var acCoilTemperature: Swift.Int16? {
      get
    }
    public var $acCoilTemperature: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acCapacityformat) public var acCapacityformat: GoogleHomeTypes.Matter.ThermostatTrait.ACCapacityFormatEnum? {
      get
    }
    public var $acCapacityformat: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.ACCapacityFormatEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($presetTypes) public var presetTypes: [GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct]? {
      get
    }
    public var $presetTypes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scheduleTypes) public var scheduleTypes: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct]? {
      get
    }
    public var $scheduleTypes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfPresets) public var numberOfPresets: Swift.UInt8? {
      get
    }
    public var $numberOfPresets: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfSchedules) public var numberOfSchedules: Swift.UInt8? {
      get
    }
    public var $numberOfSchedules: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfScheduleTransitions) public var numberOfScheduleTransitions: Swift.UInt8? {
      get
    }
    public var $numberOfScheduleTransitions: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfScheduleTransitionPerDay) public var numberOfScheduleTransitionPerDay: Swift.UInt8? {
      get
    }
    public var $numberOfScheduleTransitionPerDay: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activePresetHandle) public var activePresetHandle: Foundation.Data? {
      get
    }
    public var $activePresetHandle: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeScheduleHandle) public var activeScheduleHandle: Foundation.Data? {
      get
    }
    public var $activeScheduleHandle: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($presets) public var presets: [GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct]? {
      get
    }
    public var $presets: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($schedules) public var schedules: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct]? {
      get
    }
    public var $schedules: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($setpointHoldExpiryTimestamp) public var setpointHoldExpiryTimestamp: Swift.UInt32? {
      get
    }
    public var $setpointHoldExpiryTimestamp: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ThermostatTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ThermostatTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ThermostatTrait, rhs: GoogleHomeTypes.Matter.ThermostatTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ThermostatTrait.Attributes, rhs: GoogleHomeTypes.Matter.ThermostatTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var hvacSystemTypeConfigurationIsSet: Swift.Bool {
      get
    }
    final public func setHvacSystemTypeConfiguration(_ value: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap)
    final public func clearHvacSystemTypeConfiguration()
    final public var localTemperatureCalibrationIsSet: Swift.Bool {
      get
    }
    final public func setLocalTemperatureCalibration(_ value: Swift.Int8)
    final public func clearLocalTemperatureCalibration()
    final public var occupiedCoolingSetpointIsSet: Swift.Bool {
      get
    }
    final public func setOccupiedCoolingSetpoint(_ value: Swift.Int16)
    final public func clearOccupiedCoolingSetpoint()
    final public var occupiedHeatingSetpointIsSet: Swift.Bool {
      get
    }
    final public func setOccupiedHeatingSetpoint(_ value: Swift.Int16)
    final public func clearOccupiedHeatingSetpoint()
    final public var unoccupiedCoolingSetpointIsSet: Swift.Bool {
      get
    }
    final public func setUnoccupiedCoolingSetpoint(_ value: Swift.Int16)
    final public func clearUnoccupiedCoolingSetpoint()
    final public var unoccupiedHeatingSetpointIsSet: Swift.Bool {
      get
    }
    final public func setUnoccupiedHeatingSetpoint(_ value: Swift.Int16)
    final public func clearUnoccupiedHeatingSetpoint()
    final public var minHeatSetpointLimitIsSet: Swift.Bool {
      get
    }
    final public func setMinHeatSetpointLimit(_ value: Swift.Int16)
    final public func clearMinHeatSetpointLimit()
    final public var maxHeatSetpointLimitIsSet: Swift.Bool {
      get
    }
    final public func setMaxHeatSetpointLimit(_ value: Swift.Int16)
    final public func clearMaxHeatSetpointLimit()
    final public var minCoolSetpointLimitIsSet: Swift.Bool {
      get
    }
    final public func setMinCoolSetpointLimit(_ value: Swift.Int16)
    final public func clearMinCoolSetpointLimit()
    final public var maxCoolSetpointLimitIsSet: Swift.Bool {
      get
    }
    final public func setMaxCoolSetpointLimit(_ value: Swift.Int16)
    final public func clearMaxCoolSetpointLimit()
    final public var minSetpointDeadBandIsSet: Swift.Bool {
      get
    }
    final public func setMinSetpointDeadBand(_ value: Swift.Int8)
    final public func clearMinSetpointDeadBand()
    final public var remoteSensingIsSet: Swift.Bool {
      get
    }
    final public func setRemoteSensing(_ value: GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap)
    final public func clearRemoteSensing()
    final public var controlSequenceOfOperationIsSet: Swift.Bool {
      get
    }
    final public func setControlSequenceOfOperation(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ControlSequenceOfOperationEnum)
    final public func clearControlSequenceOfOperation()
    final public var systemModeIsSet: Swift.Bool {
      get
    }
    final public func setSystemMode(_ value: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum)
    final public func clearSystemMode()
    final public var temperatureSetpointHoldIsSet: Swift.Bool {
      get
    }
    final public func setTemperatureSetpointHold(_ value: GoogleHomeTypes.Matter.ThermostatTrait.TemperatureSetpointHoldEnum)
    final public func clearTemperatureSetpointHold()
    final public var temperatureSetpointHoldDurationIsSet: Swift.Bool {
      get
    }
    final public func setTemperatureSetpointHoldDuration(_ value: Swift.UInt16?)
    final public func clearTemperatureSetpointHoldDuration()
    final public var thermostatProgrammingOperationModeIsSet: Swift.Bool {
      get
    }
    final public func setThermostatProgrammingOperationMode(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap)
    final public func clearThermostatProgrammingOperationMode()
    final public var occupiedSetbackIsSet: Swift.Bool {
      get
    }
    final public func setOccupiedSetback(_ value: Swift.UInt8?)
    final public func clearOccupiedSetback()
    final public var unoccupiedSetbackIsSet: Swift.Bool {
      get
    }
    final public func setUnoccupiedSetback(_ value: Swift.UInt8?)
    final public func clearUnoccupiedSetback()
    final public var emergencyHeatDeltaIsSet: Swift.Bool {
      get
    }
    final public func setEmergencyHeatDelta(_ value: Swift.UInt8)
    final public func clearEmergencyHeatDelta()
    final public var acTypeIsSet: Swift.Bool {
      get
    }
    final public func setACType(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACTypeEnum)
    final public func clearACType()
    final public var acCapacityIsSet: Swift.Bool {
      get
    }
    final public func setACCapacity(_ value: Swift.UInt16)
    final public func clearACCapacity()
    final public var acRefrigerantTypeIsSet: Swift.Bool {
      get
    }
    final public func setACRefrigerantType(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACRefrigerantTypeEnum)
    final public func clearACRefrigerantType()
    final public var acCompressorTypeIsSet: Swift.Bool {
      get
    }
    final public func setACCompressorType(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACCompressorTypeEnum)
    final public func clearACCompressorType()
    final public var acErrorCodeIsSet: Swift.Bool {
      get
    }
    final public func setACErrorCode(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap)
    final public func clearACErrorCode()
    final public var acLouverPositionIsSet: Swift.Bool {
      get
    }
    final public func setACLouverPosition(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACLouverPositionEnum)
    final public func clearACLouverPosition()
    final public var acCapacityformatIsSet: Swift.Bool {
      get
    }
    final public func setACCapacityformat(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACCapacityFormatEnum)
    final public func clearACCapacityformat()
    final public var presetsIsSet: Swift.Bool {
      get
    }
    final public func setPresets(_ value: [GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct])
    final public func clearPresets()
    final public var schedulesIsSet: Swift.Bool {
      get
    }
    final public func setSchedules(_ value: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct])
    final public func clearSchedules()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public struct ScheduleTransitionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let dayOfWeek: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public let transitionTime: Swift.UInt16
    public let presetHandle: Foundation.Data?
    public let systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum?
    public let coolingSetpoint: Swift.Int16?
    public let heatingSetpoint: Swift.Int16?
    public init(dayOfWeek: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, transitionTime: Swift.UInt16, presetHandle: Foundation.Data?, systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum?, coolingSetpoint: Swift.Int16?, heatingSetpoint: Swift.Int16?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ScheduleStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let scheduleHandle: Foundation.Data?
    public let systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum
    public let name: Swift.String?
    public let presetHandle: Foundation.Data?
    public let transitions: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct]
    public let builtIn: Swift.Bool?
    public init(scheduleHandle: Foundation.Data?, systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum, name: Swift.String?, presetHandle: Foundation.Data?, transitions: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct], builtIn: Swift.Bool?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PresetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let presetHandle: Foundation.Data?
    public let presetScenario: GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum
    public let name: Swift.String?
    public let coolingSetpoint: Swift.Int16?
    public let heatingSetpoint: Swift.Int16?
    public let builtIn: Swift.Bool?
    public init(presetHandle: Foundation.Data?, presetScenario: GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum, name: Swift.String?, coolingSetpoint: Swift.Int16?, heatingSetpoint: Swift.Int16?, builtIn: Swift.Bool?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PresetTypeStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let presetScenario: GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum
    public let numberOfPresets: Swift.UInt8
    public let presetTypeFeatures: GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap
    public init(presetScenario: GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum, numberOfPresets: Swift.UInt8, presetTypeFeatures: GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ScheduleTypeStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum
    public let numberOfSchedules: Swift.UInt8
    public let scheduleTypeFeatures: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public init(systemMode: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum, numberOfSchedules: Swift.UInt8, scheduleTypeFeatures: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct WeeklyScheduleTransitionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let transitionTime: Swift.UInt16
    public let heatSetpoint: Swift.Int16?
    public let coolSetpoint: Swift.Int16?
    public init(transitionTime: Swift.UInt16, heatSetpoint: Swift.Int16?, coolSetpoint: Swift.Int16?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AtomicAttributeStatusStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let attributeID: Swift.UInt32
    public let statusCode: Swift.UInt8
    public init(attributeID: Swift.UInt32, statusCode: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct, b: GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public var supportsSetpointRaiseLowerCommand: Swift.Bool {
    get
  }
  public func setpointRaiseLower(mode: GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerModeEnum, amount: Swift.Int8) async throws
  public func setpointRaiseLowerBatchable(mode: GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerModeEnum, amount: Swift.Int8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetpointRaiseLowerCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public var supportsSetWeeklyScheduleCommand: Swift.Bool {
    get
  }
  public func setWeeklySchedule(numberOfTransitionsForSequence: Swift.UInt8, dayOfWeekForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, modeForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap, transitions: [GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct]) async throws
  public func setWeeklyScheduleBatchable(numberOfTransitionsForSequence: Swift.UInt8, dayOfWeekForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, modeForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap, transitions: [GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetWeeklyScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public typealias GetWeeklyScheduleCommandResponse = GoogleHomeTypes.Matter.ThermostatTrait.GetWeeklyScheduleCommand.Response
  public var supportsGetWeeklyScheduleCommand: Swift.Bool {
    get
  }
  public func getWeeklySchedule(daysToReturn: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, modeToReturn: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap) async throws -> GoogleHomeTypes.Matter.ThermostatTrait.GetWeeklyScheduleCommandResponse
  public func getWeeklyScheduleBatchable(daysToReturn: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, modeToReturn: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ThermostatTrait.GetWeeklyScheduleCommandResponse>
  public struct GetWeeklyScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let numberOfTransitionsForSequence: Swift.UInt8
      public let dayOfWeekForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
      public let modeForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap
      public let transitions: [GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public var supportsClearWeeklyScheduleCommand: Swift.Bool {
    get
  }
  public func clearWeeklySchedule() async throws
  public func clearWeeklyScheduleBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearWeeklyScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public var supportsSetActiveScheduleRequestCommand: Swift.Bool {
    get
  }
  public func setActiveScheduleRequest(scheduleHandle: Foundation.Data) async throws
  public func setActiveScheduleRequestBatchable(scheduleHandle: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetActiveScheduleRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public var supportsSetActivePresetRequestCommand: Swift.Bool {
    get
  }
  public func setActivePresetRequest(presetHandle: Foundation.Data?) async throws
  public func setActivePresetRequestBatchable(presetHandle: Foundation.Data?) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetActivePresetRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public typealias AtomicRequestCommandResponse = GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand.Response
  public var supportsAtomicRequestCommand: Swift.Bool {
    get
  }
  public func atomicRequest(requestType: GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestTypeEnum, attributeRequests: [Swift.UInt32], optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommandResponse
  public func atomicRequestBatchable(requestType: GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestTypeEnum, attributeRequests: [Swift.UInt32], optionalArgsProvider: ((GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommandResponse>
  public struct AtomicRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var timeoutIsSet: Swift.Bool {
        get
      }
      final public func setTimeout(_ value: Swift.UInt16)
      final public func clearTimeout()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let statusCode: Swift.UInt8
      public let attributeStatus: [GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct]
      public let timeout: Swift.UInt16?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public enum ACCapacityFormatEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case btUh
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ACCapacityFormatEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ACCompressorTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case t1
    case t2
    case t3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ACCompressorTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ACLouverPositionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case closed
    case open
    case quarter
    case half
    case threeQuarters
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ACLouverPositionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ACRefrigerantTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case r22
    case r410a
    case r407c
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ACRefrigerantTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ACTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case coolingFixed
    case heatPumpFixed
    case coolingInverter
    case heatPumpInverter
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ACTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ControlSequenceOfOperationEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case coolingOnly
    case coolingWithReheat
    case heatingOnly
    case heatingWithReheat
    case coolingAndHeating
    case coolingAndHeatingWithReheat
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ControlSequenceOfOperationEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PresetScenarioEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case occupied
    case unoccupied
    case sleep
    case wake
    case vacation
    case goingToSleep
    case userDefined
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SetpointChangeSourceEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case manual
    case schedule
    case external
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.SetpointChangeSourceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SetpointRaiseLowerModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case heat
    case cool
    case both
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StartOfWeekEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case sunday
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.StartOfWeekEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SystemModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case off
    case auto
    case cool
    case heat
    case emergencyHeat
    case precooling
    case fanOnly
    case dry
    case sleep
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum TemperatureSetpointHoldEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case setpointHoldOff
    case setpointHoldOn
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.TemperatureSetpointHoldEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ThermostatRunningModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case off
    case cool
    case heat
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.ThermostatRunningModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum AtomicRequestTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case beginWrite
    case commitWrite
    case rollbackWrite
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public struct ACErrorCodeBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let compressorFail: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public static let roomSensorFail: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public static let outdoorSensorFail: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public static let coilSensorFail: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public static let fanFail: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap
    public typealias RawValue = Swift.UInt32
  }
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let heating: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let cooling: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let occupancy: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let scheduleConfiguration: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let setback: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let autoMode: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let localTemperatureNotExposed: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let matterScheduleConfiguration: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public static let presets: GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct HvacSystemTypeBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let coolingStage: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap
    public static let heatingStage: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap
    public static let heatingIsHeatPump: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap
    public static let heatingUsesFuel: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct OccupancyBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let occupied: GoogleHomeTypes.Matter.ThermostatTrait.OccupancyBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.OccupancyBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.OccupancyBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct PresetTypeFeaturesBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let automatic: GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap
    public static let supportsNames: GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap
    public typealias RawValue = Swift.UInt16
  }
  public struct ProgrammingOperationModeBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let scheduleActive: GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap
    public static let autoRecovery: GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap
    public static let economy: GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct RelayStateBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let heat: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public static let cool: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public static let fan: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public static let heatStage2: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public static let coolStage2: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public static let fanStage2: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public static let fanStage3: GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap
    public typealias RawValue = Swift.UInt16
  }
  public struct RemoteSensingBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let localTemperature: GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap
    public static let outdoorTemperature: GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap
    public static let occupancy: GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct ScheduleDayOfWeekBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let sunday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let monday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let tuesday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let wednesday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let thursday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let friday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let saturday: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public static let away: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct ScheduleModeBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let heatSetpointPresent: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap
    public static let coolSetpointPresent: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct ScheduleTypeFeaturesBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let supportsPresets: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public static let supportsSetpoints: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public static let supportsNames: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public static let supportsOff: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public typealias Element = GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap
    public typealias RawValue = Swift.UInt16
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case localTemperature
    case outdoorTemperature
    case occupancy
    case absMinHeatSetpointLimit
    case absMaxHeatSetpointLimit
    case absMinCoolSetpointLimit
    case absMaxCoolSetpointLimit
    case piCoolingDemand
    case piHeatingDemand
    case hvacSystemTypeConfiguration
    case localTemperatureCalibration
    case occupiedCoolingSetpoint
    case occupiedHeatingSetpoint
    case unoccupiedCoolingSetpoint
    case unoccupiedHeatingSetpoint
    case minHeatSetpointLimit
    case maxHeatSetpointLimit
    case minCoolSetpointLimit
    case maxCoolSetpointLimit
    case minSetpointDeadBand
    case remoteSensing
    case controlSequenceOfOperation
    case systemMode
    case thermostatRunningMode
    case startOfWeek
    case numberOfWeeklyTransitions
    case numberOfDailyTransitions
    case temperatureSetpointHold
    case temperatureSetpointHoldDuration
    case thermostatProgrammingOperationMode
    case thermostatRunningState
    case setpointChangeSource
    case setpointChangeAmount
    case setpointChangeSourceTimestamp
    case occupiedSetback
    case occupiedSetbackMin
    case occupiedSetbackMax
    case unoccupiedSetback
    case unoccupiedSetbackMin
    case unoccupiedSetbackMax
    case emergencyHeatDelta
    case acType
    case acCapacity
    case acRefrigerantType
    case acCompressorType
    case acErrorCode
    case acLouverPosition
    case acCoilTemperature
    case acCapacityformat
    case presetTypes
    case scheduleTypes
    case numberOfPresets
    case numberOfSchedules
    case numberOfScheduleTransitions
    case numberOfScheduleTransitionPerDay
    case activePresetHandle
    case activeScheduleHandle
    case presets
    case schedules
    case setpointHoldExpiryTimestamp
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ThermostatTrait {
  public var localTemperature: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var outdoorTemperature: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var occupancy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.OccupancyBitmap> {
    get
  }
  public var absMinHeatSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var absMaxHeatSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var absMinCoolSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var absMaxCoolSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var piCoolingDemand: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var piHeatingDemand: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var hvacSystemTypeConfiguration: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap> {
    get
  }
  public var localTemperatureCalibration: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
  public var occupiedCoolingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var occupiedHeatingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var unoccupiedCoolingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var unoccupiedHeatingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var minHeatSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var maxHeatSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var minCoolSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var maxCoolSetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var minSetpointDeadBand: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
  public var remoteSensing: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap> {
    get
  }
  public var controlSequenceOfOperation: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ControlSequenceOfOperationEnum> {
    get
  }
  public var systemMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum> {
    get
  }
  public var thermostatRunningMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ThermostatRunningModeEnum> {
    get
  }
  public var startOfWeek: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.StartOfWeekEnum> {
    get
  }
  public var numberOfWeeklyTransitions: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfDailyTransitions: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var temperatureSetpointHold: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.TemperatureSetpointHoldEnum> {
    get
  }
  public var temperatureSetpointHoldDuration: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var thermostatProgrammingOperationMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap> {
    get
  }
  public var thermostatRunningState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.RelayStateBitmap> {
    get
  }
  public var setpointChangeSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.SetpointChangeSourceEnum> {
    get
  }
  public var setpointChangeAmount: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var setpointChangeSourceTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var occupiedSetback: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var occupiedSetbackMin: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var occupiedSetbackMax: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var unoccupiedSetback: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var unoccupiedSetbackMin: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var unoccupiedSetbackMax: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var emergencyHeatDelta: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var acType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ACTypeEnum> {
    get
  }
  public var acCapacity: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var acRefrigerantType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ACRefrigerantTypeEnum> {
    get
  }
  public var acCompressorType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ACCompressorTypeEnum> {
    get
  }
  public var acErrorCode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap> {
    get
  }
  public var acLouverPosition: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ACLouverPositionEnum> {
    get
  }
  public var acCoilTemperature: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var acCapacityformat: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ACCapacityFormatEnum> {
    get
  }
  public var presetTypes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct]> {
    get
  }
  public var scheduleTypes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct]> {
    get
  }
  public var numberOfPresets: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfSchedules: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfScheduleTransitions: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var numberOfScheduleTransitionPerDay: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var activePresetHandle: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var activeScheduleHandle: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var presets: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct]> {
    get
  }
  public var schedules: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct]> {
    get
  }
  public var setpointHoldExpiryTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.ThermostatTrait {
  final public func setHvacSystemTypeConfiguration(_ value: GoogleHomeTypes.Matter.ThermostatTrait.HvacSystemTypeBitmap)
  final public func setLocalTemperatureCalibration(_ value: Swift.Int8)
  final public func setOccupiedCoolingSetpoint(_ value: Swift.Int16)
  final public func setOccupiedHeatingSetpoint(_ value: Swift.Int16)
  final public func setUnoccupiedCoolingSetpoint(_ value: Swift.Int16)
  final public func setUnoccupiedHeatingSetpoint(_ value: Swift.Int16)
  final public func setMinHeatSetpointLimit(_ value: Swift.Int16)
  final public func setMaxHeatSetpointLimit(_ value: Swift.Int16)
  final public func setMinCoolSetpointLimit(_ value: Swift.Int16)
  final public func setMaxCoolSetpointLimit(_ value: Swift.Int16)
  final public func setMinSetpointDeadBand(_ value: Swift.Int8)
  final public func setRemoteSensing(_ value: GoogleHomeTypes.Matter.ThermostatTrait.RemoteSensingBitmap)
  final public func setControlSequenceOfOperation(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ControlSequenceOfOperationEnum)
  final public func setSystemMode(_ value: GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum)
  final public func setTemperatureSetpointHold(_ value: GoogleHomeTypes.Matter.ThermostatTrait.TemperatureSetpointHoldEnum)
  final public func setTemperatureSetpointHoldDuration(_ value: Swift.UInt16?)
  final public func setThermostatProgrammingOperationMode(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ProgrammingOperationModeBitmap)
  final public func setOccupiedSetback(_ value: Swift.UInt8?)
  final public func setUnoccupiedSetback(_ value: Swift.UInt8?)
  final public func setEmergencyHeatDelta(_ value: Swift.UInt8)
  final public func setAcType(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACTypeEnum)
  final public func setAcCapacity(_ value: Swift.UInt16)
  final public func setAcRefrigerantType(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACRefrigerantTypeEnum)
  final public func setAcCompressorType(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACCompressorTypeEnum)
  final public func setAcErrorCode(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACErrorCodeBitmap)
  final public func setAcLouverPosition(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACLouverPositionEnum)
  final public func setAcCapacityformat(_ value: GoogleHomeTypes.Matter.ThermostatTrait.ACCapacityFormatEnum)
  final public func setPresets(_ value: [GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct])
  final public func setSchedules(_ value: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct])
}
extension GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mode
    case amount
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ThermostatTrait.SetWeeklyScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case numberOfTransitionsForSequence
    case dayOfWeekForSequence
    case modeForSequence
    case transitions
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.SetWeeklyScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.SetWeeklyScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ThermostatTrait.GetWeeklyScheduleCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case daysToReturn
    case modeToReturn
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.GetWeeklyScheduleCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.GetWeeklyScheduleCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ThermostatTrait.SetActiveScheduleRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case scheduleHandle
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.SetActiveScheduleRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.SetActiveScheduleRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ThermostatTrait.SetActivePresetRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case presetHandle
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.SetActivePresetRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.SetActivePresetRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case requestType
    case attributeRequests
    case timeout
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ThermostatTrait {
  public static func setpointRaiseLower(mode: GoogleHomeTypes.Matter.ThermostatTrait.SetpointRaiseLowerModeEnum, amount: Swift.Int8) -> GoogleHomeSDK.AutomationCommand
  public static func setWeeklySchedule(numberOfTransitionsForSequence: Swift.UInt8, dayOfWeekForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, modeForSequence: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap, transitions: [GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct]) -> GoogleHomeSDK.AutomationCommand
  public static func getWeeklySchedule(daysToReturn: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap, modeToReturn: GoogleHomeTypes.Matter.ThermostatTrait.ScheduleModeBitmap) -> GoogleHomeSDK.AutomationCommand
  public static func clearWeeklySchedule() -> GoogleHomeSDK.AutomationCommand
  public static func setActiveScheduleRequest(scheduleHandle: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
  public static func setActivePresetRequest(presetHandle: Foundation.Data?) -> GoogleHomeSDK.AutomationCommand
  public static func atomicRequest(requestType: GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestTypeEnum, attributeRequests: [Swift.UInt32], optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ThermostatTrait.AtomicRequestCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dayOfWeek
    case transitionTime
    case presetHandle
    case systemMode
    case coolingSetpoint
    case heatingSetpoint
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct {
  public var dayOfWeek: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ScheduleDayOfWeekBitmap> {
    get
  }
  public var transitionTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var presetHandle: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var systemMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum> {
    get
  }
  public var coolingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var heatingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case scheduleHandle
    case systemMode
    case name
    case presetHandle
    case transitions
    case builtIn
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.ScheduleStruct {
  public var scheduleHandle: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var systemMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var presetHandle: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var transitions: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTransitionStruct]> {
    get
  }
  public var builtIn: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case presetHandle
    case presetScenario
    case name
    case coolingSetpoint
    case heatingSetpoint
    case builtIn
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.PresetStruct {
  public var presetHandle: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var presetScenario: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var coolingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var heatingSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var builtIn: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case presetScenario
    case numberOfPresets
    case presetTypeFeatures
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeStruct {
  public var presetScenario: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.PresetScenarioEnum> {
    get
  }
  public var numberOfPresets: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var presetTypeFeatures: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.PresetTypeFeaturesBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case systemMode
    case numberOfSchedules
    case scheduleTypeFeatures
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeStruct {
  public var systemMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.SystemModeEnum> {
    get
  }
  public var numberOfSchedules: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var scheduleTypeFeatures: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatTrait.ScheduleTypeFeaturesBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case transitionTime
    case heatSetpoint
    case coolSetpoint
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.WeeklyScheduleTransitionStruct {
  public var transitionTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var heatSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var coolSetpoint: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case attributeID
    case statusCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThermostatTrait.AtomicAttributeStatusStruct {
  public var attributeID: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var statusCode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ThermostatUserInterfaceConfigurationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait
  }
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureDisplayMode) public var temperatureDisplayMode: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.TemperatureDisplayModeEnum? {
      get
    }
    public var $temperatureDisplayMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.TemperatureDisplayModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($keypadLockout) public var keypadLockout: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.KeypadLockoutEnum? {
      get
    }
    public var $keypadLockout: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.KeypadLockoutEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scheduleProgrammingVisibility) public var scheduleProgrammingVisibility: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.ScheduleProgrammingVisibilityEnum? {
      get
    }
    public var $scheduleProgrammingVisibility: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.ScheduleProgrammingVisibilityEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait, rhs: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attributes, rhs: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var temperatureDisplayModeIsSet: Swift.Bool {
      get
    }
    final public func setTemperatureDisplayMode(_ value: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.TemperatureDisplayModeEnum)
    final public func clearTemperatureDisplayMode()
    final public var keypadLockoutIsSet: Swift.Bool {
      get
    }
    final public func setKeypadLockout(_ value: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.KeypadLockoutEnum)
    final public func clearKeypadLockout()
    final public var scheduleProgrammingVisibilityIsSet: Swift.Bool {
      get
    }
    final public func setScheduleProgrammingVisibility(_ value: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.ScheduleProgrammingVisibilityEnum)
    final public func clearScheduleProgrammingVisibility()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait {
  public enum KeypadLockoutEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case noLockout
    case lockout1
    case lockout2
    case lockout3
    case lockout4
    case lockout5
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.KeypadLockoutEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ScheduleProgrammingVisibilityEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case scheduleProgrammingPermitted
    case scheduleProgrammingDenied
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.ScheduleProgrammingVisibilityEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum TemperatureDisplayModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case celsius
    case fahrenheit
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.TemperatureDisplayModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case temperatureDisplayMode
    case keypadLockout
    case scheduleProgrammingVisibility
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait {
  public var temperatureDisplayMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.TemperatureDisplayModeEnum> {
    get
  }
  public var keypadLockout: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.KeypadLockoutEnum> {
    get
  }
  public var scheduleProgrammingVisibility: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.ScheduleProgrammingVisibilityEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait {
  final public func setTemperatureDisplayMode(_ value: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.TemperatureDisplayModeEnum)
  final public func setKeypadLockout(_ value: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.KeypadLockoutEnum)
  final public func setScheduleProgrammingVisibility(_ value: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait.ScheduleProgrammingVisibilityEnum)
}
extension GoogleHomeTypes.Matter {
  public struct ThreadNetworkDiagnosticsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($channel) public var channel: Swift.UInt16? {
      get
    }
    public var $channel: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($routingRole) public var routingRole: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RoutingRoleEnum? {
      get
    }
    public var $routingRole: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RoutingRoleEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkName) public var networkName: Swift.String? {
      get
    }
    public var $networkName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($panId) public var panId: Swift.UInt16? {
      get
    }
    public var $panId: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedPanId) public var extendedPanId: Swift.UInt64? {
      get
    }
    public var $extendedPanId: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($meshLocalPrefix) public var meshLocalPrefix: Foundation.Data? {
      get
    }
    public var $meshLocalPrefix: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($overrunCount) public var overrunCount: Swift.UInt64? {
      get
    }
    public var $overrunCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($neighborTable) public var neighborTable: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct]? {
      get
    }
    public var $neighborTable: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($routeTable) public var routeTable: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct]? {
      get
    }
    public var $routeTable: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($partitionId) public var partitionId: Swift.UInt32? {
      get
    }
    public var $partitionId: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($weighting) public var weighting: Swift.UInt16? {
      get
    }
    public var $weighting: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dataVersion) public var dataVersion: Swift.UInt16? {
      get
    }
    public var $dataVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($stableDataVersion) public var stableDataVersion: Swift.UInt16? {
      get
    }
    public var $stableDataVersion: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($leaderRouterId) public var leaderRouterId: Swift.UInt8? {
      get
    }
    public var $leaderRouterId: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($detachedRoleCount) public var detachedRoleCount: Swift.UInt16? {
      get
    }
    public var $detachedRoleCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($childRoleCount) public var childRoleCount: Swift.UInt16? {
      get
    }
    public var $childRoleCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($routerRoleCount) public var routerRoleCount: Swift.UInt16? {
      get
    }
    public var $routerRoleCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($leaderRoleCount) public var leaderRoleCount: Swift.UInt16? {
      get
    }
    public var $leaderRoleCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attachAttemptCount) public var attachAttemptCount: Swift.UInt16? {
      get
    }
    public var $attachAttemptCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($partitionIdChangeCount) public var partitionIdChangeCount: Swift.UInt16? {
      get
    }
    public var $partitionIdChangeCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($betterPartitionAttachAttemptCount) public var betterPartitionAttachAttemptCount: Swift.UInt16? {
      get
    }
    public var $betterPartitionAttachAttemptCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($parentChangeCount) public var parentChangeCount: Swift.UInt16? {
      get
    }
    public var $parentChangeCount: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txTotalCount) public var txTotalCount: Swift.UInt32? {
      get
    }
    public var $txTotalCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txUnicastCount) public var txUnicastCount: Swift.UInt32? {
      get
    }
    public var $txUnicastCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txBroadcastCount) public var txBroadcastCount: Swift.UInt32? {
      get
    }
    public var $txBroadcastCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txAckRequestedCount) public var txAckRequestedCount: Swift.UInt32? {
      get
    }
    public var $txAckRequestedCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txAckedCount) public var txAckedCount: Swift.UInt32? {
      get
    }
    public var $txAckedCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txNoAckRequestedCount) public var txNoAckRequestedCount: Swift.UInt32? {
      get
    }
    public var $txNoAckRequestedCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txDataCount) public var txDataCount: Swift.UInt32? {
      get
    }
    public var $txDataCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txDataPollCount) public var txDataPollCount: Swift.UInt32? {
      get
    }
    public var $txDataPollCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txBeaconCount) public var txBeaconCount: Swift.UInt32? {
      get
    }
    public var $txBeaconCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txBeaconRequestCount) public var txBeaconRequestCount: Swift.UInt32? {
      get
    }
    public var $txBeaconRequestCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txOtherCount) public var txOtherCount: Swift.UInt32? {
      get
    }
    public var $txOtherCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txRetryCount) public var txRetryCount: Swift.UInt32? {
      get
    }
    public var $txRetryCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txDirectMaxRetryExpiryCount) public var txDirectMaxRetryExpiryCount: Swift.UInt32? {
      get
    }
    public var $txDirectMaxRetryExpiryCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txIndirectMaxRetryExpiryCount) public var txIndirectMaxRetryExpiryCount: Swift.UInt32? {
      get
    }
    public var $txIndirectMaxRetryExpiryCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txErrCcaCount) public var txErrCcaCount: Swift.UInt32? {
      get
    }
    public var $txErrCcaCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txErrAbortCount) public var txErrAbortCount: Swift.UInt32? {
      get
    }
    public var $txErrAbortCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($txErrBusyChannelCount) public var txErrBusyChannelCount: Swift.UInt32? {
      get
    }
    public var $txErrBusyChannelCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxTotalCount) public var rxTotalCount: Swift.UInt32? {
      get
    }
    public var $rxTotalCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxUnicastCount) public var rxUnicastCount: Swift.UInt32? {
      get
    }
    public var $rxUnicastCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxBroadcastCount) public var rxBroadcastCount: Swift.UInt32? {
      get
    }
    public var $rxBroadcastCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxDataCount) public var rxDataCount: Swift.UInt32? {
      get
    }
    public var $rxDataCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxDataPollCount) public var rxDataPollCount: Swift.UInt32? {
      get
    }
    public var $rxDataPollCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxBeaconCount) public var rxBeaconCount: Swift.UInt32? {
      get
    }
    public var $rxBeaconCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxBeaconRequestCount) public var rxBeaconRequestCount: Swift.UInt32? {
      get
    }
    public var $rxBeaconRequestCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxOtherCount) public var rxOtherCount: Swift.UInt32? {
      get
    }
    public var $rxOtherCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxAddressFilteredCount) public var rxAddressFilteredCount: Swift.UInt32? {
      get
    }
    public var $rxAddressFilteredCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxDestAddrFilteredCount) public var rxDestAddrFilteredCount: Swift.UInt32? {
      get
    }
    public var $rxDestAddrFilteredCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxDuplicatedCount) public var rxDuplicatedCount: Swift.UInt32? {
      get
    }
    public var $rxDuplicatedCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxErrNoFrameCount) public var rxErrNoFrameCount: Swift.UInt32? {
      get
    }
    public var $rxErrNoFrameCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxErrUnknownNeighborCount) public var rxErrUnknownNeighborCount: Swift.UInt32? {
      get
    }
    public var $rxErrUnknownNeighborCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxErrInvalidSrcAddrCount) public var rxErrInvalidSrcAddrCount: Swift.UInt32? {
      get
    }
    public var $rxErrInvalidSrcAddrCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxErrSecCount) public var rxErrSecCount: Swift.UInt32? {
      get
    }
    public var $rxErrSecCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxErrFcsCount) public var rxErrFcsCount: Swift.UInt32? {
      get
    }
    public var $rxErrFcsCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rxErrOtherCount) public var rxErrOtherCount: Swift.UInt32? {
      get
    }
    public var $rxErrOtherCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeTimestamp) public var activeTimestamp: Swift.UInt64? {
      get
    }
    public var $activeTimestamp: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pendingTimestamp) public var pendingTimestamp: Swift.UInt64? {
      get
    }
    public var $pendingTimestamp: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($delay) public var delay: Swift.UInt32? {
      get
    }
    public var $delay: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($securityPolicy) public var securityPolicy: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy? {
      get
    }
    public var $securityPolicy: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($channelPage0Mask) public var channelPage0Mask: Foundation.Data? {
      get
    }
    public var $channelPage0Mask: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalDatasetComponents) public var operationalDatasetComponents: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents? {
      get
    }
    public var $operationalDatasetComponents: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeNetworkFaultsList) public var activeNetworkFaultsList: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]? {
      get
    }
    public var $activeNetworkFaultsList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait, rhs: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attributes, rhs: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public struct NeighborTableStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let extAddress: Swift.UInt64
    public let age: Swift.UInt32
    public let rloc16: Swift.UInt16
    public let linkFrameCounter: Swift.UInt32
    public let mleFrameCounter: Swift.UInt32
    public let lqi: Swift.UInt8
    public let averageRssi: Swift.Int8?
    public let lastRssi: Swift.Int8?
    public let frameErrorRate: Swift.UInt8
    public let messageErrorRate: Swift.UInt8
    public let rxOnWhenIdle: Swift.Bool
    public let fullThreadDevice: Swift.Bool
    public let fullNetworkData: Swift.Bool
    public let isChild: Swift.Bool
    public init(extAddress: Swift.UInt64, age: Swift.UInt32, rloc16: Swift.UInt16, linkFrameCounter: Swift.UInt32, mleFrameCounter: Swift.UInt32, lqi: Swift.UInt8, averageRssi: Swift.Int8?, lastRssi: Swift.Int8?, frameErrorRate: Swift.UInt8, messageErrorRate: Swift.UInt8, rxOnWhenIdle: Swift.Bool, fullThreadDevice: Swift.Bool, fullNetworkData: Swift.Bool, isChild: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OperationalDatasetComponents : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let activeTimestampPresent: Swift.Bool
    public let pendingTimestampPresent: Swift.Bool
    public let masterKeyPresent: Swift.Bool
    public let networkNamePresent: Swift.Bool
    public let extendedPanIdPresent: Swift.Bool
    public let meshLocalPrefixPresent: Swift.Bool
    public let delayPresent: Swift.Bool
    public let panIdPresent: Swift.Bool
    public let channelPresent: Swift.Bool
    public let pskcPresent: Swift.Bool
    public let securityPolicyPresent: Swift.Bool
    public let channelMaskPresent: Swift.Bool
    public init(activeTimestampPresent: Swift.Bool, pendingTimestampPresent: Swift.Bool, masterKeyPresent: Swift.Bool, networkNamePresent: Swift.Bool, extendedPanIdPresent: Swift.Bool, meshLocalPrefixPresent: Swift.Bool, delayPresent: Swift.Bool, panIdPresent: Swift.Bool, channelPresent: Swift.Bool, pskcPresent: Swift.Bool, securityPolicyPresent: Swift.Bool, channelMaskPresent: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct RouteTableStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let extAddress: Swift.UInt64
    public let rloc16: Swift.UInt16
    public let routerId: Swift.UInt8
    public let nextHop: Swift.UInt8
    public let pathCost: Swift.UInt8
    public let lqiIn: Swift.UInt8
    public let lqiOut: Swift.UInt8
    public let age: Swift.UInt8
    public let allocated: Swift.Bool
    public let linkEstablished: Swift.Bool
    public init(extAddress: Swift.UInt64, rloc16: Swift.UInt16, routerId: Swift.UInt8, nextHop: Swift.UInt8, pathCost: Swift.UInt8, lqiIn: Swift.UInt8, lqiOut: Swift.UInt8, age: Swift.UInt8, allocated: Swift.Bool, linkEstablished: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SecurityPolicy : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let rotationTime: Swift.UInt16
    public let flags: Swift.UInt16
    public init(rotationTime: Swift.UInt16, flags: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public struct ConnectionStatusEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let connectionStatus: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEnum?
      public init(connectionStatus: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NetworkFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let current: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]?
      public let previous: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]?
      public init(current: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]?, previous: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent.Payload, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent, b: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public var supportsResetCountsCommand: Swift.Bool {
    get
  }
  public func resetCounts() async throws
  public func resetCountsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetCountsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public enum ConnectionStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case connected
    case notConnected
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum NetworkFaultEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case linkDown
    case hardwareFailure
    case networkJammed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum RoutingRoleEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case unassigned
    case sleepyEndDevice
    case endDevice
    case reed
    case router
    case leader
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RoutingRoleEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let packetCounts: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature
    public static let errorCounts: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature
    public static let mleCounts: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature
    public static let macCounts: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case channel
    case routingRole
    case networkName
    case panId
    case extendedPanId
    case meshLocalPrefix
    case overrunCount
    case neighborTable
    case routeTable
    case partitionId
    case weighting
    case dataVersion
    case stableDataVersion
    case leaderRouterId
    case detachedRoleCount
    case childRoleCount
    case routerRoleCount
    case leaderRoleCount
    case attachAttemptCount
    case partitionIdChangeCount
    case betterPartitionAttachAttemptCount
    case parentChangeCount
    case txTotalCount
    case txUnicastCount
    case txBroadcastCount
    case txAckRequestedCount
    case txAckedCount
    case txNoAckRequestedCount
    case txDataCount
    case txDataPollCount
    case txBeaconCount
    case txBeaconRequestCount
    case txOtherCount
    case txRetryCount
    case txDirectMaxRetryExpiryCount
    case txIndirectMaxRetryExpiryCount
    case txErrCcaCount
    case txErrAbortCount
    case txErrBusyChannelCount
    case rxTotalCount
    case rxUnicastCount
    case rxBroadcastCount
    case rxDataCount
    case rxDataPollCount
    case rxBeaconCount
    case rxBeaconRequestCount
    case rxOtherCount
    case rxAddressFilteredCount
    case rxDestAddrFilteredCount
    case rxDuplicatedCount
    case rxErrNoFrameCount
    case rxErrUnknownNeighborCount
    case rxErrInvalidSrcAddrCount
    case rxErrSecCount
    case rxErrFcsCount
    case rxErrOtherCount
    case activeTimestamp
    case pendingTimestamp
    case delay
    case securityPolicy
    case channelPage0Mask
    case operationalDatasetComponents
    case activeNetworkFaultsList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public var channel: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var routingRole: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RoutingRoleEnum?> {
    get
  }
  public var networkName: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var panId: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var extendedPanId: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var meshLocalPrefix: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var overrunCount: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var neighborTable: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct]> {
    get
  }
  public var routeTable: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct]> {
    get
  }
  public var partitionId: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var weighting: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var dataVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var stableDataVersion: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var leaderRouterId: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var detachedRoleCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var childRoleCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var routerRoleCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var leaderRoleCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var attachAttemptCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var partitionIdChangeCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var betterPartitionAttachAttemptCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var parentChangeCount: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var txTotalCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txUnicastCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txBroadcastCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txAckRequestedCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txAckedCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txNoAckRequestedCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txDataCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txDataPollCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txBeaconCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txBeaconRequestCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txOtherCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txRetryCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txDirectMaxRetryExpiryCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txIndirectMaxRetryExpiryCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txErrCcaCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txErrAbortCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var txErrBusyChannelCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxTotalCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxUnicastCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxBroadcastCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxDataCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxDataPollCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxBeaconCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxBeaconRequestCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxOtherCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxAddressFilteredCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxDestAddrFilteredCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxDuplicatedCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxErrNoFrameCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxErrUnknownNeighborCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxErrInvalidSrcAddrCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxErrSecCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxErrFcsCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rxErrOtherCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var activeTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var pendingTimestamp: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var delay: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var securityPolicy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy?> {
    get
  }
  public var channelPage0Mask: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var operationalDatasetComponents: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents?> {
    get
  }
  public var activeNetworkFaultsList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case connectionStatus
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEvent {
  public var connectionStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.ConnectionStatusEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case current
    case previous
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultChangeEvent {
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NetworkFaultEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait {
  public static func resetCounts() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extAddress
    case age
    case rloc16
    case linkFrameCounter
    case mleFrameCounter
    case lqi
    case averageRssi
    case lastRssi
    case frameErrorRate
    case messageErrorRate
    case rxOnWhenIdle
    case fullThreadDevice
    case fullNetworkData
    case isChild
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.NeighborTableStruct {
  public var extAddress: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var age: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var rloc16: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var linkFrameCounter: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var mleFrameCounter: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var lqi: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var averageRssi: GoogleHomeSDK.TypedExpression<Swift.Int8?> {
    get
  }
  public var lastRssi: GoogleHomeSDK.TypedExpression<Swift.Int8?> {
    get
  }
  public var frameErrorRate: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var messageErrorRate: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var rxOnWhenIdle: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var fullThreadDevice: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var fullNetworkData: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var isChild: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case activeTimestampPresent
    case pendingTimestampPresent
    case masterKeyPresent
    case networkNamePresent
    case extendedPanIdPresent
    case meshLocalPrefixPresent
    case delayPresent
    case panIdPresent
    case channelPresent
    case pskcPresent
    case securityPolicyPresent
    case channelMaskPresent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.OperationalDatasetComponents {
  public var activeTimestampPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var pendingTimestampPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var masterKeyPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var networkNamePresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var extendedPanIdPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var meshLocalPrefixPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var delayPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var panIdPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var channelPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var pskcPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var securityPolicyPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var channelMaskPresent: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extAddress
    case rloc16
    case routerId
    case nextHop
    case pathCost
    case lqiIn
    case lqiOut
    case age
    case allocated
    case linkEstablished
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.RouteTableStruct {
  public var extAddress: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var rloc16: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var routerId: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var nextHop: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var pathCost: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var lqiIn: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var lqiOut: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var age: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var allocated: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var linkEstablished: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rotationTime
    case flags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait.SecurityPolicy {
  public var rotationTime: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var flags: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct TimeFormatLocalizationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.TimeFormatLocalizationTrait
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($hourFormat) public var hourFormat: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.HourFormatEnum? {
      get
    }
    public var $hourFormat: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.HourFormatEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeCalendarType) public var activeCalendarType: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum? {
      get
    }
    public var $activeCalendarType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedCalendarTypes) public var supportedCalendarTypes: [GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum]? {
      get
    }
    public var $supportedCalendarTypes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait, rhs: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attributes, rhs: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var hourFormatIsSet: Swift.Bool {
      get
    }
    final public func setHourFormat(_ value: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.HourFormatEnum)
    final public func clearHourFormat()
    final public var activeCalendarTypeIsSet: Swift.Bool {
      get
    }
    final public func setActiveCalendarType(_ value: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum)
    final public func clearActiveCalendarType()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  public enum CalendarTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case buddhist
    case chinese
    case coptic
    case ethiopian
    case gregorian
    case hebrew
    case indian
    case islamic
    case japanese
    case korean
    case persian
    case taiwanese
    case useActiveLocale
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum HourFormatEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case num12hr
    case num24hr
    case useActiveLocale
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.HourFormatEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let calendarFormat: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case hourFormat
    case activeCalendarType
    case supportedCalendarTypes
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  public var hourFormat: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.HourFormatEnum> {
    get
  }
  public var activeCalendarType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum> {
    get
  }
  public var supportedCalendarTypes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.TimeFormatLocalizationTrait {
  final public func setHourFormat(_ value: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.HourFormatEnum)
  final public func setActiveCalendarType(_ value: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait.CalendarTypeEnum)
}
extension GoogleHomeTypes.Matter {
  public struct TimeSynchronizationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($utcTime) public var utcTime: Swift.UInt64? {
      get
    }
    public var $utcTime: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($granularity) public var granularity: GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum? {
      get
    }
    public var $granularity: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timeSource) public var timeSource: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeSourceEnum? {
      get
    }
    public var $timeSource: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeSourceEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($trustedTimeSource) public var trustedTimeSource: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct? {
      get
    }
    public var $trustedTimeSource: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultNTP) public var defaultNTP: Swift.String? {
      get
    }
    public var $defaultNTP: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timeZone) public var timeZone: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct]? {
      get
    }
    public var $timeZone: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dstOffset) public var dstOffset: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct]? {
      get
    }
    public var $dstOffset: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($localTime) public var localTime: Swift.UInt64? {
      get
    }
    public var $localTime: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timeZoneDatabase) public var timeZoneDatabase: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneDatabaseEnum? {
      get
    }
    public var $timeZoneDatabase: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneDatabaseEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ntpServerAvailable) public var ntpServerAvailable: Swift.Bool? {
      get
    }
    public var $ntpServerAvailable: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timeZoneListMaxSize) public var timeZoneListMaxSize: Swift.UInt8? {
      get
    }
    public var $timeZoneListMaxSize: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dstOffsetListMaxSize) public var dstOffsetListMaxSize: Swift.UInt8? {
      get
    }
    public var $dstOffsetListMaxSize: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportsDNSResolve) public var supportsDNSResolve: Swift.Bool? {
      get
    }
    public var $supportsDNSResolve: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TimeSynchronizationTrait, rhs: GoogleHomeTypes.Matter.TimeSynchronizationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attributes, rhs: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public struct DSTOffsetStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let offset: Swift.Int32
    public let validStarting: Swift.UInt64
    public let validUntil: Swift.UInt64?
    public init(offset: Swift.Int32, validStarting: Swift.UInt64, validUntil: Swift.UInt64?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct FabricScopedTrustedTimeSourceStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let nodeID: Swift.UInt64
    public let endpoint: Swift.UInt16
    public init(nodeID: Swift.UInt64, endpoint: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TimeZoneStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let offset: Swift.Int32
    public let validAt: Swift.UInt64
    public let name: Swift.String?
    public init(offset: Swift.Int32, validAt: Swift.UInt64, name: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TrustedTimeSourceStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let fabricIndex: Swift.UInt8
    public let nodeID: Swift.UInt64
    public let endpoint: Swift.UInt16
    public init(fabricIndex: Swift.UInt8, nodeID: Swift.UInt64, endpoint: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public struct DSTTableEmptyEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTTableEmptyEvent.Payload, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTTableEmptyEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTTableEmptyEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTTableEmptyEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTTableEmptyEvent, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTTableEmptyEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DSTStatusEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let dstOffsetActive: Swift.Bool?
      public init(dstOffsetActive: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent.Payload, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TimeZoneStatusEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let offset: Swift.Int32?
      public let name: Swift.String?
      public init(offset: Swift.Int32?, name: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent.Payload, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TimeFailureEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeFailureEvent.Payload, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeFailureEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeFailureEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeFailureEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeFailureEvent, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeFailureEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MissingTrustedTimeSourceEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.MissingTrustedTimeSourceEvent.Payload, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.MissingTrustedTimeSourceEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.MissingTrustedTimeSourceEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.TimeSynchronizationTrait.MissingTrustedTimeSourceEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.TimeSynchronizationTrait.MissingTrustedTimeSourceEvent, b: GoogleHomeTypes.Matter.TimeSynchronizationTrait.MissingTrustedTimeSourceEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public var supportsSetUtcTimeCommand: Swift.Bool {
    get
  }
  public func setUtcTime(utcTime: Swift.UInt64, granularity: GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetUtcTimeCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func setUtcTimeBatchable(utcTime: Swift.UInt64, granularity: GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum, optionalArgsProvider: ((GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetUtcTimeCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetUtcTimeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var timeSourceIsSet: Swift.Bool {
        get
      }
      final public func setTimeSource(_ value: GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeSourceEnum)
      final public func clearTimeSource()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public var supportsSetTrustedTimeSourceCommand: Swift.Bool {
    get
  }
  public func setTrustedTimeSource(trustedTimeSource: GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct?) async throws
  public func setTrustedTimeSourceBatchable(trustedTimeSource: GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct?) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetTrustedTimeSourceCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public typealias SetTimeZoneCommandResponse = GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTimeZoneCommand.Response
  public var supportsSetTimeZoneCommand: Swift.Bool {
    get
  }
  public func setTimeZone(timeZone: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct]) async throws -> GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTimeZoneCommandResponse
  public func setTimeZoneBatchable(timeZone: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTimeZoneCommandResponse>
  public struct SetTimeZoneCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let dstOffsetRequired: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public var supportsSetDSTOffsetCommand: Swift.Bool {
    get
  }
  public func setDSTOffset(dstOffset: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct]) async throws
  public func setDSTOffsetBatchable(dstOffset: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetDSTOffsetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public var supportsSetDefaultNTPCommand: Swift.Bool {
    get
  }
  public func setDefaultNTP(defaultNTP: Swift.String?) async throws
  public func setDefaultNTPBatchable(defaultNTP: Swift.String?) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetDefaultNTPCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public enum GranularityEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case noTimeGranularity
    case minutesGranularity
    case secondsGranularity
    case millisecondsGranularity
    case microsecondsGranularity
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusCode : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case timeNotAccepted
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TimeSynchronizationTrait.StatusCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum TimeSourceEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case none
    case unknown
    case admin
    case nodeTimeCluster
    case nonMatterSNTP
    case nonMatterNTP
    case matterSNTP
    case matterNTP
    case mixedNTP
    case nonMatterSNTPNTS
    case nonMatterNTPNTS
    case matterSNTPNTS
    case matterNTPNTS
    case mixedNTPNTS
    case cloudSource
    case ptp
    case gnss
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeSourceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum TimeZoneDatabaseEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case full
    case partial
    case none
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneDatabaseEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let timeZone: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature
    public static let ntpClient: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature
    public static let ntpServer: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature
    public static let timeSyncClient: GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case utcTime
    case granularity
    case timeSource
    case trustedTimeSource
    case defaultNTP
    case timeZone
    case dstOffset
    case localTime
    case timeZoneDatabase
    case ntpServerAvailable
    case timeZoneListMaxSize
    case dstOffsetListMaxSize
    case supportsDNSResolve
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public var utcTime: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var granularity: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum> {
    get
  }
  public var timeSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeSourceEnum> {
    get
  }
  public var trustedTimeSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct?> {
    get
  }
  public var defaultNTP: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var timeZone: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct]> {
    get
  }
  public var dstOffset: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct]> {
    get
  }
  public var localTime: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var timeZoneDatabase: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneDatabaseEnum> {
    get
  }
  public var ntpServerAvailable: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var timeZoneListMaxSize: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var dstOffsetListMaxSize: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var supportsDNSResolve: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TimeSynchronizationTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dstOffsetActive
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTStatusEvent {
  public var dstOffsetActive: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case offset
    case name
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStatusEvent {
  public var offset: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetUtcTimeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case utcTime
    case granularity
    case timeSource
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetUtcTimeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetUtcTimeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTrustedTimeSourceCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case trustedTimeSource
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTrustedTimeSourceCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTrustedTimeSourceCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTimeZoneCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case timeZone
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTimeZoneCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetTimeZoneCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetDSTOffsetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dstOffset
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetDSTOffsetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetDSTOffsetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetDefaultNTPCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case defaultNTP
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetDefaultNTPCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetDefaultNTPCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait {
  public static func setUtcTime(utcTime: Swift.UInt64, granularity: GoogleHomeTypes.Matter.TimeSynchronizationTrait.GranularityEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.TimeSynchronizationTrait.SetUtcTimeCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func setTrustedTimeSource(trustedTimeSource: GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct?) -> GoogleHomeSDK.AutomationCommand
  public static func setTimeZone(timeZone: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct]) -> GoogleHomeSDK.AutomationCommand
  public static func setDSTOffset(dstOffset: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct]) -> GoogleHomeSDK.AutomationCommand
  public static func setDefaultNTP(defaultNTP: Swift.String?) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case offset
    case validStarting
    case validUntil
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.TimeSynchronizationTrait.DSTOffsetStruct {
  public var offset: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var validStarting: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var validUntil: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nodeID
    case endpoint
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.TimeSynchronizationTrait.FabricScopedTrustedTimeSourceStruct {
  public var nodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case offset
    case validAt
    case name
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.TimeSynchronizationTrait.TimeZoneStruct {
  public var offset: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var validAt: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fabricIndex
    case nodeID
    case endpoint
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.TimeSynchronizationTrait.TrustedTimeSourceStruct {
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var nodeID: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var endpoint: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct TotalVolatileOrganicCompoundsConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Float32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Float32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Float32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValue) public var peakMeasuredValue: Swift.Float32? {
      get
    }
    public var $peakMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($peakMeasuredValueWindow) public var peakMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $peakMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValue) public var averageMeasuredValue: Swift.Float32? {
      get
    }
    public var $averageMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageMeasuredValueWindow) public var averageMeasuredValueWindow: Swift.UInt32? {
      get
    }
    public var $averageMeasuredValueWindow: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($uncertainty) public var uncertainty: Swift.Float32? {
      get
    }
    public var $uncertainty: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementUnitEnum? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementMedium) public var measurementMedium: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementMediumEnum? {
      get
    }
    public var $measurementMedium: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementMediumEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.LevelValueEnum? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.LevelValueEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait {
  public enum LevelValueEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.LevelValueEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementMediumEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case air
    case water
    case soil
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementMediumEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case ppm
    case ppb
    case ppt
    case mgm3
    case ugm3
    case ngm3
    case pm3
    case bqm3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public static let levelIndication: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public static let mediumLevel: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public static let criticalLevel: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public static let peakMeasurement: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public static let averageMeasurement: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case peakMeasuredValue
    case peakMeasuredValueWindow
    case averageMeasuredValue
    case averageMeasuredValueWindow
    case uncertainty
    case measurementUnit
    case measurementMedium
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var peakMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var averageMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var averageMeasuredValueWindow: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var uncertainty: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementUnitEnum> {
    get
  }
  public var measurementMedium: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.MeasurementMediumEnum> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.LevelValueEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct UnitLocalizationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.UnitLocalizationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.UnitLocalizationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.UnitLocalizationTrait
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureUnit) public var temperatureUnit: GoogleHomeTypes.Matter.UnitLocalizationTrait.TempUnitEnum? {
      get
    }
    public var $temperatureUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitLocalizationTrait.TempUnitEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.UnitLocalizationTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitLocalizationTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.UnitLocalizationTrait, rhs: GoogleHomeTypes.Matter.UnitLocalizationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.UnitLocalizationTrait.Attributes, rhs: GoogleHomeTypes.Matter.UnitLocalizationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var temperatureUnitIsSet: Swift.Bool {
      get
    }
    final public func setTemperatureUnit(_ value: GoogleHomeTypes.Matter.UnitLocalizationTrait.TempUnitEnum)
    final public func clearTemperatureUnit()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait {
  public enum TempUnitEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case fahrenheit
    case celsius
    case kelvin
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.UnitLocalizationTrait.TempUnitEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let temperatureUnit: GoogleHomeTypes.Matter.UnitLocalizationTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitLocalizationTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.UnitLocalizationTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.UnitLocalizationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case temperatureUnit
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitLocalizationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitLocalizationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.UnitLocalizationTrait {
  public var temperatureUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitLocalizationTrait.TempUnitEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitLocalizationTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.UnitLocalizationTrait {
  final public func setTemperatureUnit(_ value: GoogleHomeTypes.Matter.UnitLocalizationTrait.TempUnitEnum)
}
extension GoogleHomeTypes.Matter {
  public struct UnitTestingTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.UnitTestingTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($boolean) public var boolean: Swift.Bool? {
      get
    }
    public var $boolean: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bitmap8) public var bitmap8: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap? {
      get
    }
    public var $bitmap8: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bitmap16) public var bitmap16: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap? {
      get
    }
    public var $bitmap16: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bitmap32) public var bitmap32: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap? {
      get
    }
    public var $bitmap32: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bitmap64) public var bitmap64: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap? {
      get
    }
    public var $bitmap64: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int8u) public var int8u: Swift.UInt8? {
      get
    }
    public var $int8u: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int16u) public var int16u: Swift.UInt16? {
      get
    }
    public var $int16u: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int24u) public var int24u: Swift.UInt32? {
      get
    }
    public var $int24u: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int32u) public var int32u: Swift.UInt32? {
      get
    }
    public var $int32u: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int40u) public var int40u: Swift.UInt64? {
      get
    }
    public var $int40u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int48u) public var int48u: Swift.UInt64? {
      get
    }
    public var $int48u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int56u) public var int56u: Swift.UInt64? {
      get
    }
    public var $int56u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int64u) public var int64u: Swift.UInt64? {
      get
    }
    public var $int64u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int8s) public var int8s: Swift.Int8? {
      get
    }
    public var $int8s: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int16s) public var int16s: Swift.Int16? {
      get
    }
    public var $int16s: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int24s) public var int24s: Swift.Int32? {
      get
    }
    public var $int24s: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int32s) public var int32s: Swift.Int32? {
      get
    }
    public var $int32s: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int40s) public var int40s: Swift.Int64? {
      get
    }
    public var $int40s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int48s) public var int48s: Swift.Int64? {
      get
    }
    public var $int48s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int56s) public var int56s: Swift.Int64? {
      get
    }
    public var $int56s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($int64s) public var int64s: Swift.Int64? {
      get
    }
    public var $int64s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enum8) public var enum8: Swift.UInt8? {
      get
    }
    public var $enum8: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enum16) public var enum16: Swift.UInt16? {
      get
    }
    public var $enum16: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($floatSingle) public var floatSingle: Swift.Float32? {
      get
    }
    public var $floatSingle: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($floatDouble) public var floatDouble: Swift.Float64? {
      get
    }
    public var $floatDouble: GoogleHomeSDK.TraitAttribute<Swift.Float64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($octetString) public var octetString: Foundation.Data? {
      get
    }
    public var $octetString: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($listInt8u) public var listInt8u: [Swift.UInt8]? {
      get
    }
    public var $listInt8u: GoogleHomeSDK.TraitAttribute<[Swift.UInt8]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($listOctetString) public var listOctetString: [Foundation.Data]? {
      get
    }
    public var $listOctetString: GoogleHomeSDK.TraitAttribute<[Foundation.Data]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($listStructOctetString) public var listStructOctetString: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet]? {
      get
    }
    public var $listStructOctetString: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($longOctetString) public var longOctetString: Foundation.Data? {
      get
    }
    public var $longOctetString: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($charString) public var charString: Swift.String? {
      get
    }
    public var $charString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($longCharString) public var longCharString: Swift.String? {
      get
    }
    public var $longCharString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($epochUs) public var epochUs: Swift.UInt64? {
      get
    }
    public var $epochUs: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($epochS) public var epochS: Swift.UInt32? {
      get
    }
    public var $epochS: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($vendorId) public var vendorId: Swift.UInt16? {
      get
    }
    public var $vendorId: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($listNullablesAndOptionalsStruct) public var listNullablesAndOptionalsStruct: [GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct]? {
      get
    }
    public var $listNullablesAndOptionalsStruct: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enumAttr) public var enumAttr: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum? {
      get
    }
    public var $enumAttr: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($structAttr) public var structAttr: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct? {
      get
    }
    public var $structAttr: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rangeRestrictedInt8u) public var rangeRestrictedInt8u: Swift.UInt8? {
      get
    }
    public var $rangeRestrictedInt8u: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rangeRestrictedInt8s) public var rangeRestrictedInt8s: Swift.Int8? {
      get
    }
    public var $rangeRestrictedInt8s: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rangeRestrictedInt16u) public var rangeRestrictedInt16u: Swift.UInt16? {
      get
    }
    public var $rangeRestrictedInt16u: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rangeRestrictedInt16s) public var rangeRestrictedInt16s: Swift.Int16? {
      get
    }
    public var $rangeRestrictedInt16s: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($listLongOctetString) public var listLongOctetString: [Foundation.Data]? {
      get
    }
    public var $listLongOctetString: GoogleHomeSDK.TraitAttribute<[Foundation.Data]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($listFabricScoped) public var listFabricScoped: [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped]? {
      get
    }
    public var $listFabricScoped: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timedWriteBoolean) public var timedWriteBoolean: Swift.Bool? {
      get
    }
    public var $timedWriteBoolean: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generalErrorBoolean) public var generalErrorBoolean: Swift.Bool? {
      get
    }
    public var $generalErrorBoolean: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterErrorBoolean) public var clusterErrorBoolean: Swift.Bool? {
      get
    }
    public var $clusterErrorBoolean: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($globalEnum) public var globalEnum: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum? {
      get
    }
    public var $globalEnum: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($globalStruct) public var globalStruct: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct? {
      get
    }
    public var $globalStruct: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($unsupported) public var unsupported: Swift.Bool? {
      get
    }
    public var $unsupported: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($readFailureCode) public var readFailureCode: Swift.UInt8? {
      get
    }
    public var $readFailureCode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($failureInt32U) public var failureInt32U: Swift.UInt32? {
      get
    }
    public var $failureInt32U: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableBoolean) public var nullableBoolean: Swift.Bool? {
      get
    }
    public var $nullableBoolean: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableBitmap8) public var nullableBitmap8: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap? {
      get
    }
    public var $nullableBitmap8: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableBitmap16) public var nullableBitmap16: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap? {
      get
    }
    public var $nullableBitmap16: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableBitmap32) public var nullableBitmap32: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap? {
      get
    }
    public var $nullableBitmap32: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableBitmap64) public var nullableBitmap64: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap? {
      get
    }
    public var $nullableBitmap64: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt8u) public var nullableInt8u: Swift.UInt8? {
      get
    }
    public var $nullableInt8u: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt16u) public var nullableInt16u: Swift.UInt16? {
      get
    }
    public var $nullableInt16u: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt24u) public var nullableInt24u: Swift.UInt32? {
      get
    }
    public var $nullableInt24u: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt32u) public var nullableInt32u: Swift.UInt32? {
      get
    }
    public var $nullableInt32u: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt40u) public var nullableInt40u: Swift.UInt64? {
      get
    }
    public var $nullableInt40u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt48u) public var nullableInt48u: Swift.UInt64? {
      get
    }
    public var $nullableInt48u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt56u) public var nullableInt56u: Swift.UInt64? {
      get
    }
    public var $nullableInt56u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt64u) public var nullableInt64u: Swift.UInt64? {
      get
    }
    public var $nullableInt64u: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt8s) public var nullableInt8s: Swift.Int8? {
      get
    }
    public var $nullableInt8s: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt16s) public var nullableInt16s: Swift.Int16? {
      get
    }
    public var $nullableInt16s: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt24s) public var nullableInt24s: Swift.Int32? {
      get
    }
    public var $nullableInt24s: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt32s) public var nullableInt32s: Swift.Int32? {
      get
    }
    public var $nullableInt32s: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt40s) public var nullableInt40s: Swift.Int64? {
      get
    }
    public var $nullableInt40s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt48s) public var nullableInt48s: Swift.Int64? {
      get
    }
    public var $nullableInt48s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt56s) public var nullableInt56s: Swift.Int64? {
      get
    }
    public var $nullableInt56s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableInt64s) public var nullableInt64s: Swift.Int64? {
      get
    }
    public var $nullableInt64s: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableEnum8) public var nullableEnum8: Swift.UInt8? {
      get
    }
    public var $nullableEnum8: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableEnum16) public var nullableEnum16: Swift.UInt16? {
      get
    }
    public var $nullableEnum16: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableFloatSingle) public var nullableFloatSingle: Swift.Float32? {
      get
    }
    public var $nullableFloatSingle: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableFloatDouble) public var nullableFloatDouble: Swift.Float64? {
      get
    }
    public var $nullableFloatDouble: GoogleHomeSDK.TraitAttribute<Swift.Float64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableOctetString) public var nullableOctetString: Foundation.Data? {
      get
    }
    public var $nullableOctetString: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableCharString) public var nullableCharString: Swift.String? {
      get
    }
    public var $nullableCharString: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableEnumAttr) public var nullableEnumAttr: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum? {
      get
    }
    public var $nullableEnumAttr: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableStruct) public var nullableStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct? {
      get
    }
    public var $nullableStruct: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableRangeRestrictedInt8u) public var nullableRangeRestrictedInt8u: Swift.UInt8? {
      get
    }
    public var $nullableRangeRestrictedInt8u: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableRangeRestrictedInt8s) public var nullableRangeRestrictedInt8s: Swift.Int8? {
      get
    }
    public var $nullableRangeRestrictedInt8s: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableRangeRestrictedInt16u) public var nullableRangeRestrictedInt16u: Swift.UInt16? {
      get
    }
    public var $nullableRangeRestrictedInt16u: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableRangeRestrictedInt16s) public var nullableRangeRestrictedInt16s: Swift.Int16? {
      get
    }
    public var $nullableRangeRestrictedInt16s: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($writeOnlyInt8u) public var writeOnlyInt8u: Swift.UInt8? {
      get
    }
    public var $writeOnlyInt8u: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableGlobalEnum) public var nullableGlobalEnum: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum? {
      get
    }
    public var $nullableGlobalEnum: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($nullableGlobalStruct) public var nullableGlobalStruct: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct? {
      get
    }
    public var $nullableGlobalStruct: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($meiInt8u) public var meiInt8u: Swift.UInt8? {
      get
    }
    public var $meiInt8u: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.UnitTestingTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.UnitTestingTrait, rhs: GoogleHomeTypes.Matter.UnitTestingTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.UnitTestingTrait.Attributes, rhs: GoogleHomeTypes.Matter.UnitTestingTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var booleanIsSet: Swift.Bool {
      get
    }
    final public func setBoolean(_ value: Swift.Bool)
    final public func clearBoolean()
    final public var bitmap8IsSet: Swift.Bool {
      get
    }
    final public func setBitmap8(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap)
    final public func clearBitmap8()
    final public var bitmap16IsSet: Swift.Bool {
      get
    }
    final public func setBitmap16(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap)
    final public func clearBitmap16()
    final public var bitmap32IsSet: Swift.Bool {
      get
    }
    final public func setBitmap32(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap)
    final public func clearBitmap32()
    final public var bitmap64IsSet: Swift.Bool {
      get
    }
    final public func setBitmap64(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap)
    final public func clearBitmap64()
    final public var int8uIsSet: Swift.Bool {
      get
    }
    final public func setInt8u(_ value: Swift.UInt8)
    final public func clearInt8u()
    final public var int16uIsSet: Swift.Bool {
      get
    }
    final public func setInt16u(_ value: Swift.UInt16)
    final public func clearInt16u()
    final public var int24uIsSet: Swift.Bool {
      get
    }
    final public func setInt24u(_ value: Swift.UInt32)
    final public func clearInt24u()
    final public var int32uIsSet: Swift.Bool {
      get
    }
    final public func setInt32u(_ value: Swift.UInt32)
    final public func clearInt32u()
    final public var int40uIsSet: Swift.Bool {
      get
    }
    final public func setInt40u(_ value: Swift.UInt64)
    final public func clearInt40u()
    final public var int48uIsSet: Swift.Bool {
      get
    }
    final public func setInt48u(_ value: Swift.UInt64)
    final public func clearInt48u()
    final public var int56uIsSet: Swift.Bool {
      get
    }
    final public func setInt56u(_ value: Swift.UInt64)
    final public func clearInt56u()
    final public var int64uIsSet: Swift.Bool {
      get
    }
    final public func setInt64u(_ value: Swift.UInt64)
    final public func clearInt64u()
    final public var int8sIsSet: Swift.Bool {
      get
    }
    final public func setInt8s(_ value: Swift.Int8)
    final public func clearInt8s()
    final public var int16sIsSet: Swift.Bool {
      get
    }
    final public func setInt16s(_ value: Swift.Int16)
    final public func clearInt16s()
    final public var int24sIsSet: Swift.Bool {
      get
    }
    final public func setInt24s(_ value: Swift.Int32)
    final public func clearInt24s()
    final public var int32sIsSet: Swift.Bool {
      get
    }
    final public func setInt32s(_ value: Swift.Int32)
    final public func clearInt32s()
    final public var int40sIsSet: Swift.Bool {
      get
    }
    final public func setInt40s(_ value: Swift.Int64)
    final public func clearInt40s()
    final public var int48sIsSet: Swift.Bool {
      get
    }
    final public func setInt48s(_ value: Swift.Int64)
    final public func clearInt48s()
    final public var int56sIsSet: Swift.Bool {
      get
    }
    final public func setInt56s(_ value: Swift.Int64)
    final public func clearInt56s()
    final public var int64sIsSet: Swift.Bool {
      get
    }
    final public func setInt64s(_ value: Swift.Int64)
    final public func clearInt64s()
    final public var enum8IsSet: Swift.Bool {
      get
    }
    final public func setEnum8(_ value: Swift.UInt8)
    final public func clearEnum8()
    final public var enum16IsSet: Swift.Bool {
      get
    }
    final public func setEnum16(_ value: Swift.UInt16)
    final public func clearEnum16()
    final public var floatSingleIsSet: Swift.Bool {
      get
    }
    final public func setFloatSingle(_ value: Swift.Float32)
    final public func clearFloatSingle()
    final public var floatDoubleIsSet: Swift.Bool {
      get
    }
    final public func setFloatDouble(_ value: Swift.Float64)
    final public func clearFloatDouble()
    final public var octetStringIsSet: Swift.Bool {
      get
    }
    final public func setOctetString(_ value: Foundation.Data)
    final public func clearOctetString()
    final public var listInt8uIsSet: Swift.Bool {
      get
    }
    final public func setListInt8u(_ value: [Swift.UInt8])
    final public func clearListInt8u()
    final public var listOctetStringIsSet: Swift.Bool {
      get
    }
    final public func setListOctetString(_ value: [Foundation.Data])
    final public func clearListOctetString()
    final public var listStructOctetStringIsSet: Swift.Bool {
      get
    }
    final public func setListStructOctetString(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet])
    final public func clearListStructOctetString()
    final public var longOctetStringIsSet: Swift.Bool {
      get
    }
    final public func setLongOctetString(_ value: Foundation.Data)
    final public func clearLongOctetString()
    final public var charStringIsSet: Swift.Bool {
      get
    }
    final public func setCharString(_ value: Swift.String)
    final public func clearCharString()
    final public var longCharStringIsSet: Swift.Bool {
      get
    }
    final public func setLongCharString(_ value: Swift.String)
    final public func clearLongCharString()
    final public var epochUsIsSet: Swift.Bool {
      get
    }
    final public func setEpochUs(_ value: Swift.UInt64)
    final public func clearEpochUs()
    final public var epochSIsSet: Swift.Bool {
      get
    }
    final public func setEpochS(_ value: Swift.UInt32)
    final public func clearEpochS()
    final public var vendorIdIsSet: Swift.Bool {
      get
    }
    final public func setVendorId(_ value: Swift.UInt16)
    final public func clearVendorId()
    final public var listNullablesAndOptionalsStructIsSet: Swift.Bool {
      get
    }
    final public func setListNullablesAndOptionalsStruct(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct])
    final public func clearListNullablesAndOptionalsStruct()
    final public var enumAttrIsSet: Swift.Bool {
      get
    }
    final public func setEnumAttr(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum)
    final public func clearEnumAttr()
    final public var structAttrIsSet: Swift.Bool {
      get
    }
    final public func setStructAttr(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct)
    final public func clearStructAttr()
    final public var rangeRestrictedInt8uIsSet: Swift.Bool {
      get
    }
    final public func setRangeRestrictedInt8u(_ value: Swift.UInt8)
    final public func clearRangeRestrictedInt8u()
    final public var rangeRestrictedInt8sIsSet: Swift.Bool {
      get
    }
    final public func setRangeRestrictedInt8s(_ value: Swift.Int8)
    final public func clearRangeRestrictedInt8s()
    final public var rangeRestrictedInt16uIsSet: Swift.Bool {
      get
    }
    final public func setRangeRestrictedInt16u(_ value: Swift.UInt16)
    final public func clearRangeRestrictedInt16u()
    final public var rangeRestrictedInt16sIsSet: Swift.Bool {
      get
    }
    final public func setRangeRestrictedInt16s(_ value: Swift.Int16)
    final public func clearRangeRestrictedInt16s()
    final public var listLongOctetStringIsSet: Swift.Bool {
      get
    }
    final public func setListLongOctetString(_ value: [Foundation.Data])
    final public func clearListLongOctetString()
    final public var listFabricScopedIsSet: Swift.Bool {
      get
    }
    final public func setListFabricScoped(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped])
    final public func clearListFabricScoped()
    final public var timedWriteBooleanIsSet: Swift.Bool {
      get
    }
    final public func setTimedWriteBoolean(_ value: Swift.Bool)
    final public func clearTimedWriteBoolean()
    final public var generalErrorBooleanIsSet: Swift.Bool {
      get
    }
    final public func setGeneralErrorBoolean(_ value: Swift.Bool)
    final public func clearGeneralErrorBoolean()
    final public var clusterErrorBooleanIsSet: Swift.Bool {
      get
    }
    final public func setClusterErrorBoolean(_ value: Swift.Bool)
    final public func clearClusterErrorBoolean()
    final public var globalEnumIsSet: Swift.Bool {
      get
    }
    final public func setGlobalEnum(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum)
    final public func clearGlobalEnum()
    final public var globalStructIsSet: Swift.Bool {
      get
    }
    final public func setGlobalStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct)
    final public func clearGlobalStruct()
    final public var unsupportedIsSet: Swift.Bool {
      get
    }
    final public func setUnsupported(_ value: Swift.Bool)
    final public func clearUnsupported()
    final public var readFailureCodeIsSet: Swift.Bool {
      get
    }
    final public func setReadFailureCode(_ value: Swift.UInt8)
    final public func clearReadFailureCode()
    final public var failureInt32UIsSet: Swift.Bool {
      get
    }
    final public func setFailureInt32U(_ value: Swift.UInt32)
    final public func clearFailureInt32U()
    final public var nullableBooleanIsSet: Swift.Bool {
      get
    }
    final public func setNullableBoolean(_ value: Swift.Bool?)
    final public func clearNullableBoolean()
    final public var nullableBitmap8IsSet: Swift.Bool {
      get
    }
    final public func setNullableBitmap8(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap?)
    final public func clearNullableBitmap8()
    final public var nullableBitmap16IsSet: Swift.Bool {
      get
    }
    final public func setNullableBitmap16(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap?)
    final public func clearNullableBitmap16()
    final public var nullableBitmap32IsSet: Swift.Bool {
      get
    }
    final public func setNullableBitmap32(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap?)
    final public func clearNullableBitmap32()
    final public var nullableBitmap64IsSet: Swift.Bool {
      get
    }
    final public func setNullableBitmap64(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap?)
    final public func clearNullableBitmap64()
    final public var nullableInt8uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt8u(_ value: Swift.UInt8?)
    final public func clearNullableInt8u()
    final public var nullableInt16uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt16u(_ value: Swift.UInt16?)
    final public func clearNullableInt16u()
    final public var nullableInt24uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt24u(_ value: Swift.UInt32?)
    final public func clearNullableInt24u()
    final public var nullableInt32uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt32u(_ value: Swift.UInt32?)
    final public func clearNullableInt32u()
    final public var nullableInt40uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt40u(_ value: Swift.UInt64?)
    final public func clearNullableInt40u()
    final public var nullableInt48uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt48u(_ value: Swift.UInt64?)
    final public func clearNullableInt48u()
    final public var nullableInt56uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt56u(_ value: Swift.UInt64?)
    final public func clearNullableInt56u()
    final public var nullableInt64uIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt64u(_ value: Swift.UInt64?)
    final public func clearNullableInt64u()
    final public var nullableInt8sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt8s(_ value: Swift.Int8?)
    final public func clearNullableInt8s()
    final public var nullableInt16sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt16s(_ value: Swift.Int16?)
    final public func clearNullableInt16s()
    final public var nullableInt24sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt24s(_ value: Swift.Int32?)
    final public func clearNullableInt24s()
    final public var nullableInt32sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt32s(_ value: Swift.Int32?)
    final public func clearNullableInt32s()
    final public var nullableInt40sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt40s(_ value: Swift.Int64?)
    final public func clearNullableInt40s()
    final public var nullableInt48sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt48s(_ value: Swift.Int64?)
    final public func clearNullableInt48s()
    final public var nullableInt56sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt56s(_ value: Swift.Int64?)
    final public func clearNullableInt56s()
    final public var nullableInt64sIsSet: Swift.Bool {
      get
    }
    final public func setNullableInt64s(_ value: Swift.Int64?)
    final public func clearNullableInt64s()
    final public var nullableEnum8IsSet: Swift.Bool {
      get
    }
    final public func setNullableEnum8(_ value: Swift.UInt8?)
    final public func clearNullableEnum8()
    final public var nullableEnum16IsSet: Swift.Bool {
      get
    }
    final public func setNullableEnum16(_ value: Swift.UInt16?)
    final public func clearNullableEnum16()
    final public var nullableFloatSingleIsSet: Swift.Bool {
      get
    }
    final public func setNullableFloatSingle(_ value: Swift.Float32?)
    final public func clearNullableFloatSingle()
    final public var nullableFloatDoubleIsSet: Swift.Bool {
      get
    }
    final public func setNullableFloatDouble(_ value: Swift.Float64?)
    final public func clearNullableFloatDouble()
    final public var nullableOctetStringIsSet: Swift.Bool {
      get
    }
    final public func setNullableOctetString(_ value: Foundation.Data?)
    final public func clearNullableOctetString()
    final public var nullableCharStringIsSet: Swift.Bool {
      get
    }
    final public func setNullableCharString(_ value: Swift.String?)
    final public func clearNullableCharString()
    final public var nullableEnumAttrIsSet: Swift.Bool {
      get
    }
    final public func setNullableEnumAttr(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum?)
    final public func clearNullableEnumAttr()
    final public var nullableStructIsSet: Swift.Bool {
      get
    }
    final public func setNullableStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?)
    final public func clearNullableStruct()
    final public var nullableRangeRestrictedInt8uIsSet: Swift.Bool {
      get
    }
    final public func setNullableRangeRestrictedInt8u(_ value: Swift.UInt8?)
    final public func clearNullableRangeRestrictedInt8u()
    final public var nullableRangeRestrictedInt8sIsSet: Swift.Bool {
      get
    }
    final public func setNullableRangeRestrictedInt8s(_ value: Swift.Int8?)
    final public func clearNullableRangeRestrictedInt8s()
    final public var nullableRangeRestrictedInt16uIsSet: Swift.Bool {
      get
    }
    final public func setNullableRangeRestrictedInt16u(_ value: Swift.UInt16?)
    final public func clearNullableRangeRestrictedInt16u()
    final public var nullableRangeRestrictedInt16sIsSet: Swift.Bool {
      get
    }
    final public func setNullableRangeRestrictedInt16s(_ value: Swift.Int16?)
    final public func clearNullableRangeRestrictedInt16s()
    final public var writeOnlyInt8uIsSet: Swift.Bool {
      get
    }
    final public func setWriteOnlyInt8u(_ value: Swift.UInt8)
    final public func clearWriteOnlyInt8u()
    final public var nullableGlobalEnumIsSet: Swift.Bool {
      get
    }
    final public func setNullableGlobalEnum(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?)
    final public func clearNullableGlobalEnum()
    final public var nullableGlobalStructIsSet: Swift.Bool {
      get
    }
    final public func setNullableGlobalStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct?)
    final public func clearNullableGlobalStruct()
    final public var meiInt8uIsSet: Swift.Bool {
      get
    }
    final public func setMeiInt8u(_ value: Swift.UInt8)
    final public func clearMeiInt8u()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public struct SimpleStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let a: Swift.UInt8
    public let b: Swift.Bool
    public let c: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum
    public let d: Foundation.Data
    public let e: Swift.String
    public let f: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap
    public let g: Swift.Float32
    public let h: Swift.Float64
    public let i: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?
    public init(a: Swift.UInt8, b: Swift.Bool, c: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, d: Foundation.Data, e: Swift.String, f: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap, g: Swift.Float32, h: Swift.Float64, i: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct, b: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TestFabricScoped : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let fabricSensitiveInt8u: Swift.UInt8
    public let optionalFabricSensitiveInt8u: Swift.UInt8?
    public let nullableFabricSensitiveInt8u: Swift.UInt8?
    public let nullableOptionalFabricSensitiveInt8u: Swift.UInt8?
    public let fabricSensitiveCharString: Swift.String
    public let fabricSensitiveStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct
    public let fabricSensitiveInt8uList: [Swift.UInt8]
    public let fabricIndex: Swift.UInt8
    public init(fabricSensitiveInt8u: Swift.UInt8, optionalFabricSensitiveInt8u: Swift.UInt8?, nullableFabricSensitiveInt8u: Swift.UInt8?, nullableOptionalFabricSensitiveInt8u: Swift.UInt8?, fabricSensitiveCharString: Swift.String, fabricSensitiveStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct, fabricSensitiveInt8uList: [Swift.UInt8], fabricIndex: Swift.UInt8)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NullablesAndOptionalsStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let nullableInt: Swift.UInt16?
    public let optionalInt: Swift.UInt16?
    public let nullableOptionalInt: Swift.UInt16?
    public let nullableString: Swift.String?
    public let optionalString: Swift.String?
    public let nullableOptionalString: Swift.String?
    public let nullableStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
    public let optionalStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
    public let nullableOptionalStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
    public let nullableList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
    public let optionalList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
    public let nullableOptionalList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
    public init(nullableInt: Swift.UInt16?, optionalInt: Swift.UInt16?, nullableOptionalInt: Swift.UInt16?, nullableString: Swift.String?, optionalString: Swift.String?, nullableOptionalString: Swift.String?, nullableStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, optionalStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, nullableOptionalStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, nullableList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?, optionalList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?, nullableOptionalList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct, b: GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NestedStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let a: Swift.UInt8
    public let b: Swift.Bool
    public let c: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct
    public let d: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct?
    public init(a: Swift.UInt8, b: Swift.Bool, c: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct, d: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct, b: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NestedStructList : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let a: Swift.UInt8
    public let b: Swift.Bool
    public let c: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct
    public let d: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]
    public let e: [Swift.UInt32]
    public let f: [Foundation.Data]
    public let g: [Swift.UInt8]
    public init(a: Swift.UInt8, b: Swift.Bool, c: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct, d: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct], e: [Swift.UInt32], f: [Foundation.Data], g: [Swift.UInt8])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList, b: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DoubleNestedStructList : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let a: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList]
    public init(a: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.DoubleNestedStructList, b: GoogleHomeTypes.Matter.UnitTestingTrait.DoubleNestedStructList) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TestListStructOctet : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let member1: Swift.UInt64
    public let member2: Foundation.Data
    public init(member1: Swift.UInt64, member2: Foundation.Data)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TestGlobalStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let myBitmap: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap?
    public let myEnum: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?
    public init(name: Swift.String, myBitmap: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap?, myEnum: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public struct TestEventEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let arg1: Swift.UInt8?
      public let arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum?
      public let arg3: Swift.Bool?
      public let arg4: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
      public let arg5: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]?
      public let arg6: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
      public init(arg1: Swift.UInt8?, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum?, arg3: Swift.Bool?, arg4: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, arg5: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]?, arg6: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent.Payload, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TestFabricScopedEventEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let fabricIndex: Swift.UInt8?
      public init(fabricIndex: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent.Payload, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TestDifferentVendorMeiEventEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let arg1: Swift.UInt8?
      public init(arg1: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent.Payload, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent, b: GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public var supportsTestCommand: Swift.Bool {
    get
  }
  public func test() async throws
  public func testBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public var supportsTestNotHandledCommand: Swift.Bool {
    get
  }
  public func testNotHandled() async throws
  public func testNotHandledBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TestNotHandledCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestSpecificCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestSpecificCommand.Response
  public var supportsTestSpecificCommand: Swift.Bool {
    get
  }
  public func testSpecific() async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestSpecificCommandResponse
  public func testSpecificBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestSpecificCommandResponse>
  public struct TestSpecificCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let returnValue: Swift.UInt8
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public var supportsTestUnknownCommandCommand: Swift.Bool {
    get
  }
  public func testUnknownCommand() async throws
  public func testUnknownCommandBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TestUnknownCommandCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestAddArgumentsCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestAddArgumentsCommand.Response
  public var supportsTestAddArgumentsCommand: Swift.Bool {
    get
  }
  public func testAddArguments(arg1: Swift.UInt8, arg2: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestAddArgumentsCommandResponse
  public func testAddArgumentsBatchable(arg1: Swift.UInt8, arg2: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestAddArgumentsCommandResponse>
  public struct TestAddArgumentsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let returnValue: Swift.UInt8
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestSimpleArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleArgumentRequestCommand.Response
  public var supportsTestSimpleArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testSimpleArgumentRequest(arg1: Swift.Bool) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleArgumentRequestCommandResponse
  public func testSimpleArgumentRequestBatchable(arg1: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleArgumentRequestCommandResponse>
  public struct TestSimpleArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let returnValue: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestStructArrayArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArrayArgumentRequestCommand.Response
  public var supportsTestStructArrayArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testStructArrayArgumentRequest(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList], arg2: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct], arg3: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum], arg4: [Swift.Bool], arg5: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, arg6: Swift.Bool) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArrayArgumentRequestCommandResponse
  public func testStructArrayArgumentRequestBatchable(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList], arg2: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct], arg3: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum], arg4: [Swift.Bool], arg5: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, arg6: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArrayArgumentRequestCommandResponse>
  public struct TestStructArrayArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList]
      public let arg2: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]
      public let arg3: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]
      public let arg4: [Swift.Bool]
      public let arg5: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum
      public let arg6: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestStructArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArgumentRequestCommand.Response
  public var supportsTestStructArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testStructArgumentRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArgumentRequestCommandResponse
  public func testStructArgumentRequestBatchable(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArgumentRequestCommandResponse>
  public struct TestStructArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestNestedStructArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructArgumentRequestCommand.Response
  public var supportsTestNestedStructArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testNestedStructArgumentRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructArgumentRequestCommandResponse
  public func testNestedStructArgumentRequestBatchable(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructArgumentRequestCommandResponse>
  public struct TestNestedStructArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestListStructArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructArgumentRequestCommand.Response
  public var supportsTestListStructArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testListStructArgumentRequest(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructArgumentRequestCommandResponse
  public func testListStructArgumentRequestBatchable(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructArgumentRequestCommandResponse>
  public struct TestListStructArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestListInt8UArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UArgumentRequestCommand.Response
  public var supportsTestListInt8UArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testListInt8UArgumentRequest(arg1: [Swift.UInt8]) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UArgumentRequestCommandResponse
  public func testListInt8UArgumentRequestBatchable(arg1: [Swift.UInt8]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UArgumentRequestCommandResponse>
  public struct TestListInt8UArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestNestedStructListArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructListArgumentRequestCommand.Response
  public var supportsTestNestedStructListArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testNestedStructListArgumentRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructListArgumentRequestCommandResponse
  public func testNestedStructListArgumentRequestBatchable(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructListArgumentRequestCommandResponse>
  public struct TestNestedStructListArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestListNestedStructListArgumentRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestListNestedStructListArgumentRequestCommand.Response
  public var supportsTestListNestedStructListArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testListNestedStructListArgumentRequest(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList]) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestListNestedStructListArgumentRequestCommandResponse
  public func testListNestedStructListArgumentRequestBatchable(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestListNestedStructListArgumentRequestCommandResponse>
  public struct TestListNestedStructListArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.Bool
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestListInt8UReverseRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UReverseRequestCommand.Response
  public var supportsTestListInt8UReverseRequestCommand: Swift.Bool {
    get
  }
  public func testListInt8UReverseRequest(arg1: [Swift.UInt8]) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UReverseRequestCommandResponse
  public func testListInt8UReverseRequestBatchable(arg1: [Swift.UInt8]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UReverseRequestCommandResponse>
  public struct TestListInt8UReverseRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let arg1: [Swift.UInt8]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestEnumsRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestEnumsRequestCommand.Response
  public var supportsTestEnumsRequestCommand: Swift.Bool {
    get
  }
  public func testEnumsRequest(arg1: Swift.UInt16, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestEnumsRequestCommandResponse
  public func testEnumsRequestBatchable(arg1: Swift.UInt16, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestEnumsRequestCommandResponse>
  public struct TestEnumsRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let arg1: Swift.UInt16
      public let arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestNullableOptionalRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand.Response
  public var supportsTestNullableOptionalRequestCommand: Swift.Bool {
    get
  }
  public func testNullableOptionalRequest(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommandResponse
  public func testNullableOptionalRequestBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommandResponse>
  public struct TestNullableOptionalRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var arg1IsSet: Swift.Bool {
        get
      }
      final public func setArg1(_ value: Swift.UInt8?)
      final public func clearArg1()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let wasPresent: Swift.Bool
      public let wasNull: Swift.Bool?
      public let value: Swift.UInt8?
      public let originalValue: Swift.UInt8?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestComplexNullableOptionalRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand.Response
  public var supportsTestComplexNullableOptionalRequestCommand: Swift.Bool {
    get
  }
  public func testComplexNullableOptionalRequest(nullableInt: Swift.UInt16?, nullableString: Swift.String?, nullableStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, nullableList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommandResponse
  public func testComplexNullableOptionalRequestBatchable(nullableInt: Swift.UInt16?, nullableString: Swift.String?, nullableStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, nullableList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?, optionalArgsProvider: ((GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommandResponse>
  public struct TestComplexNullableOptionalRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var optionalIntIsSet: Swift.Bool {
        get
      }
      final public func setOptionalInt(_ value: Swift.UInt16)
      final public func clearOptionalInt()
      final public var nullableOptionalIntIsSet: Swift.Bool {
        get
      }
      final public func setNullableOptionalInt(_ value: Swift.UInt16?)
      final public func clearNullableOptionalInt()
      final public var optionalStringIsSet: Swift.Bool {
        get
      }
      final public func setOptionalString(_ value: Swift.String)
      final public func clearOptionalString()
      final public var nullableOptionalStringIsSet: Swift.Bool {
        get
      }
      final public func setNullableOptionalString(_ value: Swift.String?)
      final public func clearNullableOptionalString()
      final public var optionalStructIsSet: Swift.Bool {
        get
      }
      final public func setOptionalStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct)
      final public func clearOptionalStruct()
      final public var nullableOptionalStructIsSet: Swift.Bool {
        get
      }
      final public func setNullableOptionalStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?)
      final public func clearNullableOptionalStruct()
      final public var optionalListIsSet: Swift.Bool {
        get
      }
      final public func setOptionalList(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum])
      final public func clearOptionalList()
      final public var nullableOptionalListIsSet: Swift.Bool {
        get
      }
      final public func setNullableOptionalList(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?)
      final public func clearNullableOptionalList()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let nullableIntWasNull: Swift.Bool
      public let nullableIntValue: Swift.UInt16?
      public let optionalIntWasPresent: Swift.Bool
      public let optionalIntValue: Swift.UInt16?
      public let nullableOptionalIntWasPresent: Swift.Bool
      public let nullableOptionalIntWasNull: Swift.Bool?
      public let nullableOptionalIntValue: Swift.UInt16?
      public let nullableStringWasNull: Swift.Bool
      public let nullableStringValue: Swift.String?
      public let optionalStringWasPresent: Swift.Bool
      public let optionalStringValue: Swift.String?
      public let nullableOptionalStringWasPresent: Swift.Bool
      public let nullableOptionalStringWasNull: Swift.Bool?
      public let nullableOptionalStringValue: Swift.String?
      public let nullableStructWasNull: Swift.Bool
      public let nullableStructValue: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
      public let optionalStructWasPresent: Swift.Bool
      public let optionalStructValue: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
      public let nullableOptionalStructWasPresent: Swift.Bool
      public let nullableOptionalStructWasNull: Swift.Bool?
      public let nullableOptionalStructValue: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?
      public let nullableListWasNull: Swift.Bool
      public let nullableListValue: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
      public let optionalListWasPresent: Swift.Bool
      public let optionalListValue: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
      public let nullableOptionalListWasPresent: Swift.Bool
      public let nullableOptionalListWasNull: Swift.Bool?
      public let nullableOptionalListValue: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias SimpleStructEchoRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStructEchoRequestCommand.Response
  public var supportsSimpleStructEchoRequestCommand: Swift.Bool {
    get
  }
  public func simpleStructEchoRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStructEchoRequestCommandResponse
  public func simpleStructEchoRequestBatchable(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStructEchoRequestCommandResponse>
  public struct SimpleStructEchoRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public var supportsTimedInvokeRequestCommand: Swift.Bool {
    get
  }
  public func timedInvokeRequest() async throws
  public func timedInvokeRequestBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TimedInvokeRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public var supportsTestSimpleOptionalArgumentRequestCommand: Swift.Bool {
    get
  }
  public func testSimpleOptionalArgumentRequest(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleOptionalArgumentRequestCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func testSimpleOptionalArgumentRequestBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleOptionalArgumentRequestCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TestSimpleOptionalArgumentRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var arg1IsSet: Swift.Bool {
        get
      }
      final public func setArg1(_ value: Swift.Bool)
      final public func clearArg1()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestEmitTestEventRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestEventRequestCommand.Response
  public var supportsTestEmitTestEventRequestCommand: Swift.Bool {
    get
  }
  public func testEmitTestEventRequest(arg1: Swift.UInt8, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, arg3: Swift.Bool) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestEventRequestCommandResponse
  public func testEmitTestEventRequestBatchable(arg1: Swift.UInt8, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, arg3: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestEventRequestCommandResponse>
  public struct TestEmitTestEventRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.UInt64
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestEmitTestFabricScopedEventRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestFabricScopedEventRequestCommand.Response
  public var supportsTestEmitTestFabricScopedEventRequestCommand: Swift.Bool {
    get
  }
  public func testEmitTestFabricScopedEventRequest(arg1: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestFabricScopedEventRequestCommandResponse
  public func testEmitTestFabricScopedEventRequestBatchable(arg1: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestFabricScopedEventRequestCommandResponse>
  public struct TestEmitTestFabricScopedEventRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let value: Swift.UInt64
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestBatchHelperRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestBatchHelperRequestCommand.Response
  public var supportsTestBatchHelperRequestCommand: Swift.Bool {
    get
  }
  public func testBatchHelperRequest(sleepBeforeResponseTimeMs: Swift.UInt16, sizeOfResponseBuffer: Swift.UInt16, fillCharacter: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestBatchHelperRequestCommandResponse
  public func testBatchHelperRequestBatchable(sleepBeforeResponseTimeMs: Swift.UInt16, sizeOfResponseBuffer: Swift.UInt16, fillCharacter: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestBatchHelperRequestCommandResponse>
  public struct TestBatchHelperRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let buffer: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestSecondBatchHelperRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestSecondBatchHelperRequestCommand.Response
  public var supportsTestSecondBatchHelperRequestCommand: Swift.Bool {
    get
  }
  public func testSecondBatchHelperRequest(sleepBeforeResponseTimeMs: Swift.UInt16, sizeOfResponseBuffer: Swift.UInt16, fillCharacter: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestSecondBatchHelperRequestCommandResponse
  public func testSecondBatchHelperRequestBatchable(sleepBeforeResponseTimeMs: Swift.UInt16, sizeOfResponseBuffer: Swift.UInt16, fillCharacter: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestSecondBatchHelperRequestCommandResponse>
  public struct TestSecondBatchHelperRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let buffer: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias StringEchoRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.StringEchoRequestCommand.Response
  public var supportsStringEchoRequestCommand: Swift.Bool {
    get
  }
  public func stringEchoRequest(payload: Foundation.Data) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.StringEchoRequestCommandResponse
  public func stringEchoRequestBatchable(payload: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.StringEchoRequestCommandResponse>
  public struct StringEchoRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let payload: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias GlobalEchoRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.GlobalEchoRequestCommand.Response
  public var supportsGlobalEchoRequestCommand: Swift.Bool {
    get
  }
  public func globalEchoRequest(field1: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct, field2: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.GlobalEchoRequestCommandResponse
  public func globalEchoRequestBatchable(field1: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct, field2: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.GlobalEchoRequestCommandResponse>
  public struct GlobalEchoRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let field1: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct
      public let field2: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public typealias TestDifferentVendorMeiRequestCommandResponse = GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiRequestCommand.Response
  public var supportsTestDifferentVendorMeiRequestCommand: Swift.Bool {
    get
  }
  public func testDifferentVendorMeiRequest(arg1: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiRequestCommandResponse
  public func testDifferentVendorMeiRequestBatchable(arg1: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiRequestCommandResponse>
  public struct TestDifferentVendorMeiRequestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let arg1: Swift.UInt8
      public let eventNumber: Swift.UInt64
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public enum SimpleEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case valueA
    case valueB
    case valueC
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum TestGlobalEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case someValue
    case someOtherValue
    case finalValue
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public struct Bitmap16MaskMap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let maskVal1: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap
    public static let maskVal2: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap
    public static let maskVal3: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap
    public static let maskVal4: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap
    public typealias Element = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap
    public typealias RawValue = Swift.UInt16
  }
  public struct Bitmap32MaskMap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let maskVal1: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap
    public static let maskVal2: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap
    public static let maskVal3: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap
    public static let maskVal4: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap
    public typealias Element = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap
    public typealias RawValue = Swift.UInt32
  }
  public struct Bitmap64MaskMap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public static let maskVal1: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap
    public static let maskVal2: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap
    public static let maskVal3: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap
    public static let maskVal4: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap
    public typealias Element = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap
    public typealias RawValue = Swift.UInt64
  }
  public struct Bitmap8MaskMap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let maskVal1: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap
    public static let maskVal2: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap
    public static let maskVal3: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap
    public static let maskVal4: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap
    public typealias Element = GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap
    public typealias RawValue = Swift.UInt8
  }
  public struct SimpleBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let valueA: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap
    public static let valueB: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap
    public static let valueC: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap
    public typealias Element = GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap
    public typealias RawValue = Swift.UInt8
  }
  public struct TestGlobalBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let firstBit: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap
    public static let secondBit: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap
    public typealias Element = GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case boolean
    case bitmap8
    case bitmap16
    case bitmap32
    case bitmap64
    case int8u
    case int16u
    case int24u
    case int32u
    case int40u
    case int48u
    case int56u
    case int64u
    case int8s
    case int16s
    case int24s
    case int32s
    case int40s
    case int48s
    case int56s
    case int64s
    case enum8
    case enum16
    case floatSingle
    case floatDouble
    case octetString
    case listInt8u
    case listOctetString
    case listStructOctetString
    case longOctetString
    case charString
    case longCharString
    case epochUs
    case epochS
    case vendorId
    case listNullablesAndOptionalsStruct
    case enumAttr
    case structAttr
    case rangeRestrictedInt8u
    case rangeRestrictedInt8s
    case rangeRestrictedInt16u
    case rangeRestrictedInt16s
    case listLongOctetString
    case listFabricScoped
    case timedWriteBoolean
    case generalErrorBoolean
    case clusterErrorBoolean
    case globalEnum
    case globalStruct
    case unsupported
    case readFailureCode
    case failureInt32U
    case nullableBoolean
    case nullableBitmap8
    case nullableBitmap16
    case nullableBitmap32
    case nullableBitmap64
    case nullableInt8u
    case nullableInt16u
    case nullableInt24u
    case nullableInt32u
    case nullableInt40u
    case nullableInt48u
    case nullableInt56u
    case nullableInt64u
    case nullableInt8s
    case nullableInt16s
    case nullableInt24s
    case nullableInt32s
    case nullableInt40s
    case nullableInt48s
    case nullableInt56s
    case nullableInt64s
    case nullableEnum8
    case nullableEnum16
    case nullableFloatSingle
    case nullableFloatDouble
    case nullableOctetString
    case nullableCharString
    case nullableEnumAttr
    case nullableStruct
    case nullableRangeRestrictedInt8u
    case nullableRangeRestrictedInt8s
    case nullableRangeRestrictedInt16u
    case nullableRangeRestrictedInt16s
    case writeOnlyInt8u
    case nullableGlobalEnum
    case nullableGlobalStruct
    case meiInt8u
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.UnitTestingTrait {
  public var boolean: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var bitmap8: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap> {
    get
  }
  public var bitmap16: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap> {
    get
  }
  public var bitmap32: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap> {
    get
  }
  public var bitmap64: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap> {
    get
  }
  public var int8u: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var int16u: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var int24u: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var int32u: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var int40u: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var int48u: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var int56u: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var int64u: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var int8s: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
  public var int16s: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var int24s: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var int32s: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var int40s: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var int48s: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var int56s: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var int64s: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var enum8: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var enum16: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var floatSingle: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var floatDouble: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var octetString: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var listInt8u: GoogleHomeSDK.TypedExpression<[Swift.UInt8]> {
    get
  }
  public var listOctetString: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var listStructOctetString: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet]> {
    get
  }
  public var longOctetString: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var charString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var longCharString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var epochUs: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var epochS: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var vendorId: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var listNullablesAndOptionalsStruct: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct]> {
    get
  }
  public var enumAttr: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum> {
    get
  }
  public var structAttr: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
    get
  }
  public var rangeRestrictedInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var rangeRestrictedInt8s: GoogleHomeSDK.TypedExpression<Swift.Int8> {
    get
  }
  public var rangeRestrictedInt16u: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var rangeRestrictedInt16s: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var listLongOctetString: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var listFabricScoped: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped]> {
    get
  }
  public var timedWriteBoolean: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generalErrorBoolean: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var clusterErrorBoolean: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var globalEnum: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum> {
    get
  }
  public var globalStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct> {
    get
  }
  public var unsupported: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var readFailureCode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var failureInt32U: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var nullableBoolean: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
  public var nullableBitmap8: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap?> {
    get
  }
  public var nullableBitmap16: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap?> {
    get
  }
  public var nullableBitmap32: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap?> {
    get
  }
  public var nullableBitmap64: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap?> {
    get
  }
  public var nullableInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var nullableInt16u: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var nullableInt24u: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var nullableInt32u: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var nullableInt40u: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var nullableInt48u: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var nullableInt56u: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var nullableInt64u: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var nullableInt8s: GoogleHomeSDK.TypedExpression<Swift.Int8?> {
    get
  }
  public var nullableInt16s: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var nullableInt24s: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var nullableInt32s: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var nullableInt40s: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nullableInt48s: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nullableInt56s: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nullableInt64s: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nullableEnum8: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var nullableEnum16: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var nullableFloatSingle: GoogleHomeSDK.TypedExpression<Swift.Float32?> {
    get
  }
  public var nullableFloatDouble: GoogleHomeSDK.TypedExpression<Swift.Float64?> {
    get
  }
  public var nullableOctetString: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var nullableCharString: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var nullableEnumAttr: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum?> {
    get
  }
  public var nullableStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?> {
    get
  }
  public var nullableRangeRestrictedInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var nullableRangeRestrictedInt8s: GoogleHomeSDK.TypedExpression<Swift.Int8?> {
    get
  }
  public var nullableRangeRestrictedInt16u: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var nullableRangeRestrictedInt16s: GoogleHomeSDK.TypedExpression<Swift.Int16?> {
    get
  }
  public var writeOnlyInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var nullableGlobalEnum: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?> {
    get
  }
  public var nullableGlobalStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct?> {
    get
  }
  public var meiInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.UnitTestingTrait {
  final public func setBoolean(_ value: Swift.Bool)
  final public func setBitmap8(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap)
  final public func setBitmap16(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap)
  final public func setBitmap32(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap)
  final public func setBitmap64(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap)
  final public func setInt8u(_ value: Swift.UInt8)
  final public func setInt16u(_ value: Swift.UInt16)
  final public func setInt24u(_ value: Swift.UInt32)
  final public func setInt32u(_ value: Swift.UInt32)
  final public func setInt40u(_ value: Swift.UInt64)
  final public func setInt48u(_ value: Swift.UInt64)
  final public func setInt56u(_ value: Swift.UInt64)
  final public func setInt64u(_ value: Swift.UInt64)
  final public func setInt8s(_ value: Swift.Int8)
  final public func setInt16s(_ value: Swift.Int16)
  final public func setInt24s(_ value: Swift.Int32)
  final public func setInt32s(_ value: Swift.Int32)
  final public func setInt40s(_ value: Swift.Int64)
  final public func setInt48s(_ value: Swift.Int64)
  final public func setInt56s(_ value: Swift.Int64)
  final public func setInt64s(_ value: Swift.Int64)
  final public func setEnum8(_ value: Swift.UInt8)
  final public func setEnum16(_ value: Swift.UInt16)
  final public func setFloatSingle(_ value: Swift.Float32)
  final public func setFloatDouble(_ value: Swift.Float64)
  final public func setOctetString(_ value: Foundation.Data)
  final public func setListInt8u(_ value: [Swift.UInt8])
  final public func setListOctetString(_ value: [Foundation.Data])
  final public func setListStructOctetString(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet])
  final public func setLongOctetString(_ value: Foundation.Data)
  final public func setCharString(_ value: Swift.String)
  final public func setLongCharString(_ value: Swift.String)
  final public func setEpochUs(_ value: Swift.UInt64)
  final public func setEpochS(_ value: Swift.UInt32)
  final public func setVendorId(_ value: Swift.UInt16)
  final public func setListNullablesAndOptionalsStruct(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct])
  final public func setEnumAttr(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum)
  final public func setStructAttr(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct)
  final public func setRangeRestrictedInt8u(_ value: Swift.UInt8)
  final public func setRangeRestrictedInt8s(_ value: Swift.Int8)
  final public func setRangeRestrictedInt16u(_ value: Swift.UInt16)
  final public func setRangeRestrictedInt16s(_ value: Swift.Int16)
  final public func setListLongOctetString(_ value: [Foundation.Data])
  final public func setListFabricScoped(_ value: [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped])
  final public func setTimedWriteBoolean(_ value: Swift.Bool)
  final public func setGeneralErrorBoolean(_ value: Swift.Bool)
  final public func setClusterErrorBoolean(_ value: Swift.Bool)
  final public func setGlobalEnum(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum)
  final public func setGlobalStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct)
  final public func setUnsupported(_ value: Swift.Bool)
  final public func setReadFailureCode(_ value: Swift.UInt8)
  final public func setFailureInt32U(_ value: Swift.UInt32)
  final public func setNullableBoolean(_ value: Swift.Bool?)
  final public func setNullableBitmap8(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap8MaskMap?)
  final public func setNullableBitmap16(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap16MaskMap?)
  final public func setNullableBitmap32(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap32MaskMap?)
  final public func setNullableBitmap64(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.Bitmap64MaskMap?)
  final public func setNullableInt8u(_ value: Swift.UInt8?)
  final public func setNullableInt16u(_ value: Swift.UInt16?)
  final public func setNullableInt24u(_ value: Swift.UInt32?)
  final public func setNullableInt32u(_ value: Swift.UInt32?)
  final public func setNullableInt40u(_ value: Swift.UInt64?)
  final public func setNullableInt48u(_ value: Swift.UInt64?)
  final public func setNullableInt56u(_ value: Swift.UInt64?)
  final public func setNullableInt64u(_ value: Swift.UInt64?)
  final public func setNullableInt8s(_ value: Swift.Int8?)
  final public func setNullableInt16s(_ value: Swift.Int16?)
  final public func setNullableInt24s(_ value: Swift.Int32?)
  final public func setNullableInt32s(_ value: Swift.Int32?)
  final public func setNullableInt40s(_ value: Swift.Int64?)
  final public func setNullableInt48s(_ value: Swift.Int64?)
  final public func setNullableInt56s(_ value: Swift.Int64?)
  final public func setNullableInt64s(_ value: Swift.Int64?)
  final public func setNullableEnum8(_ value: Swift.UInt8?)
  final public func setNullableEnum16(_ value: Swift.UInt16?)
  final public func setNullableFloatSingle(_ value: Swift.Float32?)
  final public func setNullableFloatDouble(_ value: Swift.Float64?)
  final public func setNullableOctetString(_ value: Foundation.Data?)
  final public func setNullableCharString(_ value: Swift.String?)
  final public func setNullableEnumAttr(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum?)
  final public func setNullableStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?)
  final public func setNullableRangeRestrictedInt8u(_ value: Swift.UInt8?)
  final public func setNullableRangeRestrictedInt8s(_ value: Swift.Int8?)
  final public func setNullableRangeRestrictedInt16u(_ value: Swift.UInt16?)
  final public func setNullableRangeRestrictedInt16s(_ value: Swift.Int16?)
  final public func setWriteOnlyInt8u(_ value: Swift.UInt8)
  final public func setNullableGlobalEnum(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?)
  final public func setNullableGlobalStruct(_ value: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct?)
  final public func setMeiInt8u(_ value: Swift.UInt8)
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    case arg2
    case arg3
    case arg4
    case arg5
    case arg6
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.UnitTestingTrait.TestEventEvent {
  public var arg1: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var arg2: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum> {
    get
  }
  public var arg3: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var arg4: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
    get
  }
  public var arg5: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]> {
    get
  }
  public var arg6: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScopedEventEvent {
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiEventEvent {
  public var arg1: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestAddArgumentsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    case arg2
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestAddArgumentsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestAddArgumentsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArrayArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    case arg2
    case arg3
    case arg4
    case arg5
    case arg6
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArrayArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArrayArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestStructArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructListArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructListArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestNestedStructListArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestListNestedStructListArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestListNestedStructListArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListNestedStructListArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UReverseRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UReverseRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListInt8UReverseRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestEnumsRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    case arg2
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestEnumsRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestEnumsRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nullableInt
    case optionalInt
    case nullableOptionalInt
    case nullableString
    case optionalString
    case nullableOptionalString
    case nullableStruct
    case optionalStruct
    case nullableOptionalStruct
    case nullableList
    case optionalList
    case nullableOptionalList
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStructEchoRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStructEchoRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStructEchoRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleOptionalArgumentRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleOptionalArgumentRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleOptionalArgumentRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestEventRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    case arg2
    case arg3
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestEventRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestEventRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestFabricScopedEventRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestFabricScopedEventRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestEmitTestFabricScopedEventRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestBatchHelperRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sleepBeforeResponseTimeMs
    case sizeOfResponseBuffer
    case fillCharacter
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestBatchHelperRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestBatchHelperRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestSecondBatchHelperRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sleepBeforeResponseTimeMs
    case sizeOfResponseBuffer
    case fillCharacter
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestSecondBatchHelperRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestSecondBatchHelperRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.StringEchoRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case payload
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.StringEchoRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.StringEchoRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.GlobalEchoRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case field1
    case field2
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.GlobalEchoRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.GlobalEchoRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiRequestCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arg1
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiRequestCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestDifferentVendorMeiRequestCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.UnitTestingTrait {
  public static func test() -> GoogleHomeSDK.AutomationCommand
  public static func testNotHandled() -> GoogleHomeSDK.AutomationCommand
  public static func testSpecific() -> GoogleHomeSDK.AutomationCommand
  public static func testUnknownCommand() -> GoogleHomeSDK.AutomationCommand
  public static func testAddArguments(arg1: Swift.UInt8, arg2: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func testSimpleArgumentRequest(arg1: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func testStructArrayArgumentRequest(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList], arg2: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct], arg3: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum], arg4: [Swift.Bool], arg5: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, arg6: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func testStructArgumentRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) -> GoogleHomeSDK.AutomationCommand
  public static func testNestedStructArgumentRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct) -> GoogleHomeSDK.AutomationCommand
  public static func testListStructArgumentRequest(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]) -> GoogleHomeSDK.AutomationCommand
  public static func testListInt8UArgumentRequest(arg1: [Swift.UInt8]) -> GoogleHomeSDK.AutomationCommand
  public static func testNestedStructListArgumentRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList) -> GoogleHomeSDK.AutomationCommand
  public static func testListNestedStructListArgumentRequest(arg1: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList]) -> GoogleHomeSDK.AutomationCommand
  public static func testListInt8UReverseRequest(arg1: [Swift.UInt8]) -> GoogleHomeSDK.AutomationCommand
  public static func testEnumsRequest(arg1: Swift.UInt16, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum) -> GoogleHomeSDK.AutomationCommand
  public static func testNullableOptionalRequest(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.TestNullableOptionalRequestCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func testComplexNullableOptionalRequest(nullableInt: Swift.UInt16?, nullableString: Swift.String?, nullableStruct: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?, nullableList: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.TestComplexNullableOptionalRequestCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func simpleStructEchoRequest(arg1: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct) -> GoogleHomeSDK.AutomationCommand
  public static func timedInvokeRequest() -> GoogleHomeSDK.AutomationCommand
  public static func testSimpleOptionalArgumentRequest(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.UnitTestingTrait.TestSimpleOptionalArgumentRequestCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func testEmitTestEventRequest(arg1: Swift.UInt8, arg2: GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum, arg3: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func testEmitTestFabricScopedEventRequest(arg1: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func testBatchHelperRequest(sleepBeforeResponseTimeMs: Swift.UInt16, sizeOfResponseBuffer: Swift.UInt16, fillCharacter: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func testSecondBatchHelperRequest(sleepBeforeResponseTimeMs: Swift.UInt16, sizeOfResponseBuffer: Swift.UInt16, fillCharacter: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func stringEchoRequest(payload: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
  public static func globalEchoRequest(field1: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct, field2: GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum) -> GoogleHomeSDK.AutomationCommand
  public static func testDifferentVendorMeiRequest(arg1: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case a
    case b
    case c
    case d
    case e
    case f
    case g
    case h
    case i
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct {
  public var a: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var b: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var c: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum> {
    get
  }
  public var d: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var e: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var f: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleBitmap> {
    get
  }
  public var g: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var h: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var i: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fabricSensitiveInt8u
    case optionalFabricSensitiveInt8u
    case nullableFabricSensitiveInt8u
    case nullableOptionalFabricSensitiveInt8u
    case fabricSensitiveCharString
    case fabricSensitiveStruct
    case fabricSensitiveInt8uList
    case fabricIndex
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.TestFabricScoped {
  public var fabricSensitiveInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var optionalFabricSensitiveInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var nullableFabricSensitiveInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var nullableOptionalFabricSensitiveInt8u: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var fabricSensitiveCharString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var fabricSensitiveStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
    get
  }
  public var fabricSensitiveInt8uList: GoogleHomeSDK.TypedExpression<[Swift.UInt8]> {
    get
  }
  public var fabricIndex: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case nullableInt
    case optionalInt
    case nullableOptionalInt
    case nullableString
    case optionalString
    case nullableOptionalString
    case nullableStruct
    case optionalStruct
    case nullableOptionalStruct
    case nullableList
    case optionalList
    case nullableOptionalList
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.NullablesAndOptionalsStruct {
  public var nullableInt: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var optionalInt: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var nullableOptionalInt: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var nullableString: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var optionalString: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var nullableOptionalString: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var nullableStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?> {
    get
  }
  public var optionalStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
    get
  }
  public var nullableOptionalStruct: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct?> {
    get
  }
  public var nullableList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?> {
    get
  }
  public var optionalList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]> {
    get
  }
  public var nullableOptionalList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.SimpleEnum]?> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case a
    case b
    case c
    case d
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.NestedStruct {
  public var a: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var b: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var c: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
    get
  }
  public var d: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case a
    case b
    case c
    case d
    case e
    case f
    case g
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList {
  public var a: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var b: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var c: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct> {
    get
  }
  public var d: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.SimpleStruct]> {
    get
  }
  public var e: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var f: GoogleHomeSDK.TypedExpression<[Foundation.Data]> {
    get
  }
  public var g: GoogleHomeSDK.TypedExpression<[Swift.UInt8]> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.DoubleNestedStructList {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case a
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.DoubleNestedStructList.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.DoubleNestedStructList.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.DoubleNestedStructList {
  public var a: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UnitTestingTrait.NestedStructList]> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case member1
    case member2
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.TestListStructOctet {
  public var member1: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var member2: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
}
extension GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case myBitmap
    case myEnum
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalStruct {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var myBitmap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalBitmap?> {
    get
  }
  public var myEnum: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.UnitTestingTrait.TestGlobalEnum?> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct UserLabelTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.UserLabelTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.UserLabelTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.UserLabelTrait
  }
}
extension GoogleHomeTypes.Matter.UserLabelTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.UserLabelTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($labelList) public var labelList: [GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct]? {
      get
    }
    public var $labelList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UserLabelTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.UserLabelTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.UserLabelTrait, rhs: GoogleHomeTypes.Matter.UserLabelTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.UserLabelTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.UserLabelTrait.Attributes, rhs: GoogleHomeTypes.Matter.UserLabelTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.UserLabelTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var labelListIsSet: Swift.Bool {
      get
    }
    final public func setLabelList(_ value: [GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct])
    final public func clearLabelList()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.UserLabelTrait {
  public struct LabelStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let value: Swift.String
    public init(label: Swift.String, value: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct, b: GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.UserLabelTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case labelList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UserLabelTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UserLabelTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.UserLabelTrait {
  public var labelList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.UserLabelTrait {
  final public func setLabelList(_ value: [GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct])
}
extension GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.UserLabelTrait.LabelStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct ValveConfigurationAndControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($openDuration) public var openDuration: Swift.UInt32? {
      get
    }
    public var $openDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultOpenDuration) public var defaultOpenDuration: Swift.UInt32? {
      get
    }
    public var $defaultOpenDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($autoCloseTime) public var autoCloseTime: Swift.UInt64? {
      get
    }
    public var $autoCloseTime: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($remainingDuration) public var remainingDuration: Swift.UInt32? {
      get
    }
    public var $remainingDuration: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentState) public var currentState: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum? {
      get
    }
    public var $currentState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetState) public var targetState: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum? {
      get
    }
    public var $targetState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentLevel) public var currentLevel: Swift.UInt8? {
      get
    }
    public var $currentLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetLevel) public var targetLevel: Swift.UInt8? {
      get
    }
    public var $targetLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultOpenLevel) public var defaultOpenLevel: Swift.UInt8? {
      get
    }
    public var $defaultOpenLevel: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($valveFault) public var valveFault: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap? {
      get
    }
    public var $valveFault: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelStep) public var levelStep: Swift.UInt8? {
      get
    }
    public var $levelStep: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait, rhs: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attributes, rhs: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var defaultOpenDurationIsSet: Swift.Bool {
      get
    }
    final public func setDefaultOpenDuration(_ value: Swift.UInt32?)
    final public func clearDefaultOpenDuration()
    final public var defaultOpenLevelIsSet: Swift.Bool {
      get
    }
    final public func setDefaultOpenLevel(_ value: Swift.UInt8)
    final public func clearDefaultOpenLevel()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public struct ValveStateChangedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let valveState: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum?
      public let valveLevel: Swift.UInt8?
      public init(valveState: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum?, valveLevel: Swift.UInt8?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent.Payload, b: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent, b: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ValveFaultEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let valveFault: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap?
      public init(valveFault: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent.Payload, b: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent, b: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public var supportsOpenCommand: Swift.Bool {
    get
  }
  public func open(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.OpenCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func openBatchable(optionalArgsProvider: ((GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.OpenCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OpenCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var openDurationIsSet: Swift.Bool {
        get
      }
      final public func setOpenDuration(_ value: Swift.UInt32?)
      final public func clearOpenDuration()
      final public var targetLevelIsSet: Swift.Bool {
        get
      }
      final public func setTargetLevel(_ value: Swift.UInt8)
      final public func clearTargetLevel()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public var supportsCloseCommand: Swift.Bool {
    get
  }
  public func close() async throws
  public func closeBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct CloseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public enum StatusCodeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case failureDueToFault
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.StatusCodeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ValveStateEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case closed
    case open
    case transitioning
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let timeSync: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature
    public static let level: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct ValveFaultBitmap : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let generalFault: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public static let blocked: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public static let leaking: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public static let notConnected: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public static let shortCircuit: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public static let currentExceeded: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public typealias Element = GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap
    public typealias RawValue = Swift.UInt16
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openDuration
    case defaultOpenDuration
    case autoCloseTime
    case remainingDuration
    case currentState
    case targetState
    case currentLevel
    case targetLevel
    case defaultOpenLevel
    case valveFault
    case levelStep
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public var openDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var defaultOpenDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var autoCloseTime: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var remainingDuration: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var currentState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum?> {
    get
  }
  public var targetState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum?> {
    get
  }
  public var currentLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var targetLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var defaultOpenLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var valveFault: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap> {
    get
  }
  public var levelStep: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  final public func setDefaultOpenDuration(_ value: Swift.UInt32?)
  final public func setDefaultOpenLevel(_ value: Swift.UInt8)
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case valveState
    case valveLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateChangedEvent {
  public var valveState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveStateEnum> {
    get
  }
  public var valveLevel: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case valveFault
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultEvent {
  public var valveFault: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.ValveFaultBitmap> {
    get
  }
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.OpenCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openDuration
    case targetLevel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.OpenCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.OpenCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait {
  public static func open(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait.OpenCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func close() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct WakeOnLanTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.WakeOnLanTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.WakeOnLanTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.WakeOnLanTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($macAddress) public var macAddress: Swift.String? {
      get
    }
    public var $macAddress: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($linkLocalAddress) public var linkLocalAddress: Foundation.Data? {
      get
    }
    public var $linkLocalAddress: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WakeOnLanTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.WakeOnLanTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WakeOnLanTrait, rhs: GoogleHomeTypes.Matter.WakeOnLanTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WakeOnLanTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WakeOnLanTrait.Attributes, rhs: GoogleHomeTypes.Matter.WakeOnLanTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WakeOnLanTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case macAddress
    case linkLocalAddress
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WakeOnLanTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WakeOnLanTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WakeOnLanTrait {
  public var macAddress: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var linkLocalAddress: GoogleHomeSDK.TypedExpression<Foundation.Data> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct WaterHeaterModeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.WaterHeaterModeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.WaterHeaterModeTrait
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMode) public var currentMode: Swift.UInt8? {
      get
    }
    public var $currentMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($startUpMode) public var startUpMode: Swift.UInt8? {
      get
    }
    public var $startUpMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onMode) public var onMode: Swift.UInt8? {
      get
    }
    public var $onMode: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.WaterHeaterModeTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WaterHeaterModeTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WaterHeaterModeTrait, rhs: GoogleHomeTypes.Matter.WaterHeaterModeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attributes, rhs: GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var startUpModeIsSet: Swift.Bool {
      get
    }
    final public func setStartUpMode(_ value: Swift.UInt8?)
    final public func clearStartUpMode()
    final public var onModeIsSet: Swift.Bool {
      get
    }
    final public func setOnMode(_ value: Swift.UInt8?)
    final public func clearOnMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public struct ModeTagStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let mfgCode: Swift.UInt16?
    public let value: Swift.UInt16
    public init(mfgCode: Swift.UInt16?, value: Swift.UInt16)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct, b: GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeOptionStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let label: Swift.String
    public let mode: Swift.UInt8
    public let modeTags: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct]
    public init(label: Swift.String, mode: Swift.UInt8, modeTags: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct, b: GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public typealias ChangeToModeCommandResponse = GoogleHomeTypes.Matter.WaterHeaterModeTrait.ChangeToModeCommand.Response
  public var supportsChangeToModeCommand: Swift.Bool {
    get
  }
  public func changeToMode(newMode: Swift.UInt8) async throws -> GoogleHomeTypes.Matter.WaterHeaterModeTrait.ChangeToModeCommandResponse
  public func changeToModeBatchable(newMode: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Matter.WaterHeaterModeTrait.ChangeToModeCommandResponse>
  public struct ChangeToModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let status: Swift.UInt8
      public let statusText: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public enum ModeTag : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case auto
    case quick
    case quiet
    case lowNoise
    case lowEnergy
    case vacation
    case min
    case max
    case night
    case day
    case off
    case manual
    case timed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTag
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let onOff: GoogleHomeTypes.Matter.WaterHeaterModeTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WaterHeaterModeTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.WaterHeaterModeTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentMode
    case startUpMode
    case onMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct]> {
    get
  }
  public var currentMode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var startUpMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var onMode: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WaterHeaterModeTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  final public func setStartUpMode(_ value: Swift.UInt8?)
  final public func setOnMode(_ value: Swift.UInt8?)
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait.ChangeToModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ChangeToModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ChangeToModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait {
  public static func changeToMode(newMode: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case mfgCode
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct {
  public var mfgCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case label
    case mode
    case modeTags
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeOptionStruct {
  public var label: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var modeTags: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Matter.WaterHeaterModeTrait.ModeTagStruct]> {
    get
  }
}
extension GoogleHomeTypes.Matter {
  public struct WiFiNetworkDiagnosticsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bssid) public var bssid: Foundation.Data? {
      get
    }
    public var $bssid: GoogleHomeSDK.TraitAttribute<Foundation.Data> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($securityType) public var securityType: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.SecurityTypeEnum? {
      get
    }
    public var $securityType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.SecurityTypeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wiFiVersion) public var wiFiVersion: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.WiFiVersionEnum? {
      get
    }
    public var $wiFiVersion: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.WiFiVersionEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($channelNumber) public var channelNumber: Swift.UInt16? {
      get
    }
    public var $channelNumber: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rssi) public var rssi: Swift.Int8? {
      get
    }
    public var $rssi: GoogleHomeSDK.TraitAttribute<Swift.Int8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($beaconLostCount) public var beaconLostCount: Swift.UInt32? {
      get
    }
    public var $beaconLostCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($beaconRxCount) public var beaconRxCount: Swift.UInt32? {
      get
    }
    public var $beaconRxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($packetMulticastRxCount) public var packetMulticastRxCount: Swift.UInt32? {
      get
    }
    public var $packetMulticastRxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($packetMulticastTxCount) public var packetMulticastTxCount: Swift.UInt32? {
      get
    }
    public var $packetMulticastTxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($packetUnicastRxCount) public var packetUnicastRxCount: Swift.UInt32? {
      get
    }
    public var $packetUnicastRxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($packetUnicastTxCount) public var packetUnicastTxCount: Swift.UInt32? {
      get
    }
    public var $packetUnicastTxCount: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMaxRate) public var currentMaxRate: Swift.UInt64? {
      get
    }
    public var $currentMaxRate: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($overrunCount) public var overrunCount: Swift.UInt64? {
      get
    }
    public var $overrunCount: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait, rhs: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attributes, rhs: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public struct DisconnectionEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let reasonCode: Swift.UInt16?
      public init(reasonCode: Swift.UInt16?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent.Payload, b: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent, b: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AssociationFailureEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let associationFailureCause: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureCauseEnum?
      public let status: Swift.UInt16?
      public init(associationFailureCause: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureCauseEnum?, status: Swift.UInt16?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent.Payload, b: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent, b: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ConnectionStatusEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let connectionStatus: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEnum?
      public init(connectionStatus: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEnum?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload, b: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent, b: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public var supportsResetCountsCommand: Swift.Bool {
    get
  }
  public func resetCounts() async throws
  public func resetCountsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ResetCountsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public enum AssociationFailureCauseEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case associationFailed
    case authenticationFailed
    case ssidNotFound
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureCauseEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ConnectionStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case connected
    case notConnected
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SecurityTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unspecified
    case none
    case wep
    case wpa
    case wpa2
    case wpa3
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.SecurityTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum WiFiVersionEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case a
    case b
    case g
    case n
    case ac
    case ax
    case ah
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.WiFiVersionEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let packetCounts: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature
    public static let errorCounts: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case bssid
    case securityType
    case wiFiVersion
    case channelNumber
    case rssi
    case beaconLostCount
    case beaconRxCount
    case packetMulticastRxCount
    case packetMulticastTxCount
    case packetUnicastRxCount
    case packetUnicastTxCount
    case currentMaxRate
    case overrunCount
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public var bssid: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
  public var securityType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.SecurityTypeEnum?> {
    get
  }
  public var wiFiVersion: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.WiFiVersionEnum?> {
    get
  }
  public var channelNumber: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var rssi: GoogleHomeSDK.TypedExpression<Swift.Int8?> {
    get
  }
  public var beaconLostCount: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var beaconRxCount: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var packetMulticastRxCount: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var packetMulticastTxCount: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var packetUnicastRxCount: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var packetUnicastTxCount: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var currentMaxRate: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var overrunCount: GoogleHomeSDK.TypedExpression<Swift.UInt64?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case reasonCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.DisconnectionEvent {
  public var reasonCode: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case associationFailureCause
    case status
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureEvent {
  public var associationFailureCause: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.AssociationFailureCauseEnum> {
    get
  }
  public var status: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case connectionStatus
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEvent {
  public var connectionStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait.ConnectionStatusEnum> {
    get
  }
}
extension GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait {
  public static func resetCounts() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Matter {
  public struct WindowCoveringTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Matter.WindowCoveringTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Matter.WindowCoveringTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Matter.WindowCoveringTrait
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($type) public var type: GoogleHomeTypes.Matter.WindowCoveringTrait.WindowCoveringType? {
      get
    }
    public var $type: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.WindowCoveringType> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($physicalClosedLimitLift) public var physicalClosedLimitLift: Swift.UInt16? {
      get
    }
    public var $physicalClosedLimitLift: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($physicalClosedLimitTilt) public var physicalClosedLimitTilt: Swift.UInt16? {
      get
    }
    public var $physicalClosedLimitTilt: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPositionLift) public var currentPositionLift: Swift.UInt16? {
      get
    }
    public var $currentPositionLift: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPositionTilt) public var currentPositionTilt: Swift.UInt16? {
      get
    }
    public var $currentPositionTilt: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfActuationsLift) public var numberOfActuationsLift: Swift.UInt16? {
      get
    }
    public var $numberOfActuationsLift: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numberOfActuationsTilt) public var numberOfActuationsTilt: Swift.UInt16? {
      get
    }
    public var $numberOfActuationsTilt: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($configStatus) public var configStatus: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus? {
      get
    }
    public var $configStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPositionLiftPercentage) public var currentPositionLiftPercentage: Swift.UInt8? {
      get
    }
    public var $currentPositionLiftPercentage: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPositionTiltPercentage) public var currentPositionTiltPercentage: Swift.UInt8? {
      get
    }
    public var $currentPositionTiltPercentage: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationalStatus) public var operationalStatus: GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus? {
      get
    }
    public var $operationalStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetPositionLiftPercent100ths) public var targetPositionLiftPercent100ths: Swift.UInt16? {
      get
    }
    public var $targetPositionLiftPercent100ths: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetPositionTiltPercent100ths) public var targetPositionTiltPercent100ths: Swift.UInt16? {
      get
    }
    public var $targetPositionTiltPercent100ths: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($endProductType) public var endProductType: GoogleHomeTypes.Matter.WindowCoveringTrait.EndProductType? {
      get
    }
    public var $endProductType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.EndProductType> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPositionLiftPercent100ths) public var currentPositionLiftPercent100ths: Swift.UInt16? {
      get
    }
    public var $currentPositionLiftPercent100ths: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPositionTiltPercent100ths) public var currentPositionTiltPercent100ths: Swift.UInt16? {
      get
    }
    public var $currentPositionTiltPercent100ths: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($installedOpenLimitLift) public var installedOpenLimitLift: Swift.UInt16? {
      get
    }
    public var $installedOpenLimitLift: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($installedClosedLimitLift) public var installedClosedLimitLift: Swift.UInt16? {
      get
    }
    public var $installedClosedLimitLift: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($installedOpenLimitTilt) public var installedOpenLimitTilt: Swift.UInt16? {
      get
    }
    public var $installedOpenLimitTilt: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($installedClosedLimitTilt) public var installedClosedLimitTilt: Swift.UInt16? {
      get
    }
    public var $installedClosedLimitTilt: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($mode) public var mode: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode? {
      get
    }
    public var $mode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.Mode> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($safetyStatus) public var safetyStatus: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus? {
      get
    }
    public var $safetyStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Matter.WindowCoveringTrait.Feature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Matter.WindowCoveringTrait.Feature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WindowCoveringTrait, rhs: GoogleHomeTypes.Matter.WindowCoveringTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Matter.WindowCoveringTrait.Attributes, rhs: GoogleHomeTypes.Matter.WindowCoveringTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var modeIsSet: Swift.Bool {
      get
    }
    final public func setMode(_ value: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode)
    final public func clearMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsUpOrOpenCommand: Swift.Bool {
    get
  }
  public func upOrOpen() async throws
  public func upOrOpenBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UpOrOpenCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsDownOrCloseCommand: Swift.Bool {
    get
  }
  public func downOrClose() async throws
  public func downOrCloseBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DownOrCloseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsStopMotionCommand: Swift.Bool {
    get
  }
  public func stopMotion() async throws
  public func stopMotionBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopMotionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsGoToLiftValueCommand: Swift.Bool {
    get
  }
  public func goToLiftValue(liftValue: Swift.UInt16) async throws
  public func goToLiftValueBatchable(liftValue: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct GoToLiftValueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsGoToLiftPercentageCommand: Swift.Bool {
    get
  }
  public func goToLiftPercentage(liftPercent100thsValue: Swift.UInt16) async throws
  public func goToLiftPercentageBatchable(liftPercent100thsValue: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct GoToLiftPercentageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsGoToTiltValueCommand: Swift.Bool {
    get
  }
  public func goToTiltValue(tiltValue: Swift.UInt16) async throws
  public func goToTiltValueBatchable(tiltValue: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct GoToTiltValueCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var supportsGoToTiltPercentageCommand: Swift.Bool {
    get
  }
  public func goToTiltPercentage(tiltPercent100thsValue: Swift.UInt16) async throws
  public func goToTiltPercentageBatchable(tiltPercent100thsValue: Swift.UInt16) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct GoToTiltPercentageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public enum EndProductType : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case rollerShade
    case romanShade
    case balloonShade
    case wovenWood
    case pleatedShade
    case cellularShade
    case layeredShade
    case layeredShade2D
    case sheerShade
    case tiltOnlyInteriorBlind
    case interiorBlind
    case verticalBlindStripCurtain
    case interiorVenetianBlind
    case exteriorVenetianBlind
    case lateralLeftCurtain
    case lateralRightCurtain
    case centralCurtain
    case rollerShutter
    case exteriorVerticalScreen
    case awningTerracePatio
    case awningVerticalScreen
    case tiltOnlyPergola
    case swingingShutter
    case slidingShutter
    case unknown
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WindowCoveringTrait.EndProductType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum WindowCoveringType : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case rollerShade
    case rollerShade2Motor
    case rollerShadeExterior
    case rollerShadeExterior2Motor
    case drapery
    case awning
    case shutter
    case tiltBlindTiltOnly
    case tiltBlindLiftAndTilt
    case projectorScreen
    case unknown
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Matter.WindowCoveringTrait.WindowCoveringType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public struct ConfigStatus : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let operational: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public static let onlineReserved: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public static let liftMovementReversed: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public static let liftPositionAware: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public static let tiltPositionAware: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public static let liftEncoderControlled: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public static let tiltEncoderControlled: GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public typealias Element = GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus
    public typealias RawValue = Swift.UInt8
  }
  public struct Feature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let lift: GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public static let tilt: GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public static let positionAwareLift: GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public static let absolutePosition: GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public static let positionAwareTilt: GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public typealias Element = GoogleHomeTypes.Matter.WindowCoveringTrait.Feature
    public typealias RawValue = Swift.UInt32
  }
  public struct Mode : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let motorDirectionReversed: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode
    public static let calibrationMode: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode
    public static let maintenanceMode: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode
    public static let ledFeedback: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WindowCoveringTrait.Mode
    public typealias Element = GoogleHomeTypes.Matter.WindowCoveringTrait.Mode
    public typealias RawValue = Swift.UInt8
  }
  public struct OperationalStatus : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let global: GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus
    public static let lift: GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus
    public static let tilt: GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus
    public typealias Element = GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus
    public typealias RawValue = Swift.UInt8
  }
  public struct SafetyStatus : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt16
    public init(rawValue: Swift.UInt16)
    public static let remoteLockout: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let tamperDetection: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let failedCommunication: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let positionFailure: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let thermalProtection: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let obstacleDetected: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let power: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let stopInput: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let motorJammed: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let hardwareFailure: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let manualOperation: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public static let protection: GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public typealias ArrayLiteralElement = GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public typealias Element = GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus
    public typealias RawValue = Swift.UInt16
  }
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case type
    case physicalClosedLimitLift
    case physicalClosedLimitTilt
    case currentPositionLift
    case currentPositionTilt
    case numberOfActuationsLift
    case numberOfActuationsTilt
    case configStatus
    case currentPositionLiftPercentage
    case currentPositionTiltPercentage
    case operationalStatus
    case targetPositionLiftPercent100ths
    case targetPositionTiltPercent100ths
    case endProductType
    case currentPositionLiftPercent100ths
    case currentPositionTiltPercent100ths
    case installedOpenLimitLift
    case installedClosedLimitLift
    case installedOpenLimitTilt
    case installedClosedLimitTilt
    case mode
    case safetyStatus
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WindowCoveringTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WindowCoveringTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Matter.WindowCoveringTrait {
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.WindowCoveringType> {
    get
  }
  public var physicalClosedLimitLift: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var physicalClosedLimitTilt: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var currentPositionLift: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var currentPositionTilt: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var numberOfActuationsLift: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var numberOfActuationsTilt: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var configStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.ConfigStatus> {
    get
  }
  public var currentPositionLiftPercentage: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var currentPositionTiltPercentage: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var operationalStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.OperationalStatus> {
    get
  }
  public var targetPositionLiftPercent100ths: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var targetPositionTiltPercent100ths: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var endProductType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.EndProductType> {
    get
  }
  public var currentPositionLiftPercent100ths: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var currentPositionTiltPercent100ths: GoogleHomeSDK.TypedExpression<Swift.UInt16?> {
    get
  }
  public var installedOpenLimitLift: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var installedClosedLimitLift: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var installedOpenLimitTilt: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var installedClosedLimitTilt: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var mode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.Mode> {
    get
  }
  public var safetyStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.SafetyStatus> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Matter.WindowCoveringTrait.Feature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Matter.WindowCoveringTrait {
  final public func setMode(_ value: GoogleHomeTypes.Matter.WindowCoveringTrait.Mode)
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait.GoToLiftValueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case liftValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToLiftValueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToLiftValueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait.GoToLiftPercentageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case liftPercent100thsValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToLiftPercentageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToLiftPercentageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait.GoToTiltValueCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case tiltValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToTiltValueCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToTiltValueCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait.GoToTiltPercentageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case tiltPercent100thsValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToTiltPercentageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Matter.WindowCoveringTrait.GoToTiltPercentageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Matter.WindowCoveringTrait {
  public static func upOrOpen() -> GoogleHomeSDK.AutomationCommand
  public static func downOrClose() -> GoogleHomeSDK.AutomationCommand
  public static func stopMotion() -> GoogleHomeSDK.AutomationCommand
  public static func goToLiftValue(liftValue: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func goToLiftPercentage(liftPercent100thsValue: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func goToTiltValue(tiltValue: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
  public static func goToTiltPercentage(tiltPercent100thsValue: Swift.UInt16) -> GoogleHomeSDK.AutomationCommand
}
public struct OccupancySensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OccupancySensorDeviceType.OccupancySensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OccupancySensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let occupancySensingTrait: GoogleHomeTypes.Matter.OccupancySensingTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DoorLockDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.DoorLockDeviceType.DoorLockMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct DoorLockMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let doorLockTrait: GoogleHomeTypes.Matter.DoorLockTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BridgedNodeDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.BridgedNodeDeviceType.BridgedNodeMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct BridgedNodeMatterTraits : Swift.Sendable {
    public let bridgedDeviceBasicInformationTrait: GoogleHomeTypes.Matter.BridgedDeviceBasicInformationTrait?
    public let powerSourceConfigurationTrait: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait?
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TemperatureSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.TemperatureSensorDeviceType.TemperatureSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct TemperatureSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SpeakerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.SpeakerDeviceType.SpeakerGoogleTraits
  public let matterTraits: GoogleHomeTypes.SpeakerDeviceType.SpeakerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct SpeakerGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct SpeakerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WindowCoveringDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.WindowCoveringDeviceType.WindowCoveringGoogleTraits
  public let matterTraits: GoogleHomeTypes.WindowCoveringDeviceType.WindowCoveringMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct WindowCoveringGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public struct WindowCoveringMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let windowCoveringTrait: GoogleHomeTypes.Matter.WindowCoveringTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WindowCoveringControllerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BasicVideoPlayerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.BasicVideoPlayerDeviceType.BasicVideoPlayerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct BasicVideoPlayerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let keypadInputTrait: GoogleHomeTypes.Matter.KeypadInputTrait?
    public let wakeOnLanTrait: GoogleHomeTypes.Matter.WakeOnLanTrait?
    public let channelTrait: GoogleHomeTypes.Matter.ChannelTrait?
    public let targetNavigatorTrait: GoogleHomeTypes.Matter.TargetNavigatorTrait?
    public let mediaInputTrait: GoogleHomeTypes.Matter.MediaInputTrait?
    public let lowPowerTrait: GoogleHomeTypes.Matter.LowPowerTrait?
    public let audioOutputTrait: GoogleHomeTypes.Matter.AudioOutputTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ColorTemperatureLightDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.ColorTemperatureLightDeviceType.ColorTemperatureLightGoogleTraits
  public let matterTraits: GoogleHomeTypes.ColorTemperatureLightDeviceType.ColorTemperatureLightMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ColorTemperatureLightGoogleTraits : Swift.Sendable {
    public let lightEffectsTrait: GoogleHomeTypes.Google.LightEffectsTrait?
    public let extendedColorControlTrait: GoogleHomeTypes.Google.ExtendedColorControlTrait?
  }
  public struct ColorTemperatureLightMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
    public let colorControlTrait: GoogleHomeTypes.Matter.ColorControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ContactSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.ContactSensorDeviceType.ContactSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ContactSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let booleanStateConfigurationTrait: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FlowSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.FlowSensorDeviceType.FlowSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct FlowSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let flowMeasurementTrait: GoogleHomeTypes.Matter.FlowMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DimmablePlugInUnitDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.DimmablePlugInUnitDeviceType.DimmablePlugInUnitMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct DimmablePlugInUnitMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ContentAppDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.ContentAppDeviceType.ContentAppGoogleTraits
  public let matterTraits: GoogleHomeTypes.ContentAppDeviceType.ContentAppMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ContentAppGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
  }
  public struct ContentAppMatterTraits : Swift.Sendable {
    public let keypadInputTrait: GoogleHomeTypes.Matter.KeypadInputTrait?
    public let applicationLauncherTrait: GoogleHomeTypes.Matter.ApplicationLauncherTrait?
    public let applicationBasicTrait: GoogleHomeTypes.Matter.ApplicationBasicTrait?
    public let bindingTrait: GoogleHomeTypes.Matter.BindingTrait?
    public let channelTrait: GoogleHomeTypes.Matter.ChannelTrait?
    public let targetNavigatorTrait: GoogleHomeTypes.Matter.TargetNavigatorTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let contentLauncherTrait: GoogleHomeTypes.Matter.ContentLauncherTrait?
    public let accountLoginTrait: GoogleHomeTypes.Matter.AccountLoginTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct HumiditySensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.HumiditySensorDeviceType.HumiditySensorGoogleTraits
  public let matterTraits: GoogleHomeTypes.HumiditySensorDeviceType.HumiditySensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct HumiditySensorGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
    public let relativeHumidityControlTrait: GoogleHomeTypes.Google.RelativeHumidityControlTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct HumiditySensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let relativeHumidityMeasurementTrait: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PressureSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.PressureSensorDeviceType.PressureSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct PressureSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let pressureMeasurementTrait: GoogleHomeTypes.Matter.PressureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OnOffPluginUnitDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OnOffPluginUnitDeviceType.OnOffPluginUnitMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OnOffPluginUnitMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericSwitchDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GenericSwitchDeviceType.GenericSwitchGoogleTraits
  public let matterTraits: GoogleHomeTypes.GenericSwitchDeviceType.GenericSwitchMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GenericSwitchGoogleTraits : Swift.Sendable {
    public let syntheticSwitchTrait: GoogleHomeTypes.Google.SyntheticSwitchTrait?
  }
  public struct GenericSwitchMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let switchTrait: GoogleHomeTypes.Matter.SwitchTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FanDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.FanDeviceType.FanGoogleTraits
  public let matterTraits: GoogleHomeTypes.FanDeviceType.FanMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct FanGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
  }
  public struct FanMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let fanControlTrait: GoogleHomeTypes.Matter.FanControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AggregatorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.AggregatorDeviceType.AggregatorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct AggregatorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let actionsTrait: GoogleHomeTypes.Matter.ActionsTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CastingVideoPlayerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.CastingVideoPlayerDeviceType.CastingVideoPlayerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct CastingVideoPlayerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let keypadInputTrait: GoogleHomeTypes.Matter.KeypadInputTrait?
    public let contentLauncherTrait: GoogleHomeTypes.Matter.ContentLauncherTrait?
    public let wakeOnLanTrait: GoogleHomeTypes.Matter.WakeOnLanTrait?
    public let channelTrait: GoogleHomeTypes.Matter.ChannelTrait?
    public let targetNavigatorTrait: GoogleHomeTypes.Matter.TargetNavigatorTrait?
    public let mediaInputTrait: GoogleHomeTypes.Matter.MediaInputTrait?
    public let lowPowerTrait: GoogleHomeTypes.Matter.LowPowerTrait?
    public let audioOutputTrait: GoogleHomeTypes.Matter.AudioOutputTrait?
    public let applicationLauncherTrait: GoogleHomeTypes.Matter.ApplicationLauncherTrait?
    public let accountLoginTrait: GoogleHomeTypes.Matter.AccountLoginTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DimmableLightDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.DimmableLightDeviceType.DimmableLightGoogleTraits
  public let matterTraits: GoogleHomeTypes.DimmableLightDeviceType.DimmableLightMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct DimmableLightGoogleTraits : Swift.Sendable {
    public let lightEffectsTrait: GoogleHomeTypes.Google.LightEffectsTrait?
  }
  public struct DimmableLightMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OnOffLightSwitchDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OnOffLightSwitchDeviceType.OnOffLightSwitchMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OnOffLightSwitchMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExtendedColorLightDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.ExtendedColorLightDeviceType.ExtendedColorLightGoogleTraits
  public let matterTraits: GoogleHomeTypes.ExtendedColorLightDeviceType.ExtendedColorLightMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ExtendedColorLightGoogleTraits : Swift.Sendable {
    public let lightEffectsTrait: GoogleHomeTypes.Google.LightEffectsTrait?
    public let extendedColorControlTrait: GoogleHomeTypes.Google.ExtendedColorControlTrait?
  }
  public struct ExtendedColorLightMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
    public let colorControlTrait: GoogleHomeTypes.Matter.ColorControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PumpDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.PumpDeviceType.PumpMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct PumpMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let pumpConfigurationAndControlTrait: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let pressureMeasurementTrait: GoogleHomeTypes.Matter.PressureMeasurementTrait?
    public let flowMeasurementTrait: GoogleHomeTypes.Matter.FlowMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ModeSelectDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.ModeSelectDeviceType.ModeSelectMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ModeSelectMatterTraits : Swift.Sendable {
    public let modeSelectTrait: GoogleHomeTypes.Matter.ModeSelectTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct HeatingCoolingUnitDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.HeatingCoolingUnitDeviceType.HeatingCoolingUnitGoogleTraits
  public let matterTraits: GoogleHomeTypes.HeatingCoolingUnitDeviceType.HeatingCoolingUnitMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct HeatingCoolingUnitGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
    public let extendedThermostatTrait: GoogleHomeTypes.Google.ExtendedThermostatTrait?
  }
  public struct HeatingCoolingUnitMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LightSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.LightSensorDeviceType.LightSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct LightSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let illuminanceMeasurementTrait: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RootNodeDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.RootNodeDeviceType.RootNodeMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct RootNodeMatterTraits : Swift.Sendable {
    public let accessControlTrait: GoogleHomeTypes.Matter.AccessControlTrait?
    public let basicInformationTrait: GoogleHomeTypes.Matter.BasicInformationTrait?
    public let generalCommissioningTrait: GoogleHomeTypes.Matter.GeneralCommissioningTrait?
    public let generalDiagnosticsTrait: GoogleHomeTypes.Matter.GeneralDiagnosticsTrait?
    public let administratorCommissioningTrait: GoogleHomeTypes.Matter.AdministratorCommissioningTrait?
    public let operationalCredentialsTrait: GoogleHomeTypes.Matter.OperationalCredentialsTrait?
    public let groupKeyManagementTrait: GoogleHomeTypes.Matter.GroupKeyManagementTrait?
    public let localizationConfigurationTrait: GoogleHomeTypes.Matter.LocalizationConfigurationTrait?
    public let timeFormatLocalizationTrait: GoogleHomeTypes.Matter.TimeFormatLocalizationTrait?
    public let unitLocalizationTrait: GoogleHomeTypes.Matter.UnitLocalizationTrait?
    public let powerSourceConfigurationTrait: GoogleHomeTypes.Matter.PowerSourceConfigurationTrait?
    public let networkCommissioningTrait: GoogleHomeTypes.Matter.NetworkCommissioningTrait?
    public let diagnosticLogsTrait: GoogleHomeTypes.Matter.DiagnosticLogsTrait?
    public let softwareDiagnosticsTrait: GoogleHomeTypes.Matter.SoftwareDiagnosticsTrait?
    public let threadNetworkDiagnosticsTrait: GoogleHomeTypes.Matter.ThreadNetworkDiagnosticsTrait?
    public let wiFiNetworkDiagnosticsTrait: GoogleHomeTypes.Matter.WiFiNetworkDiagnosticsTrait?
    public let ethernetNetworkDiagnosticsTrait: GoogleHomeTypes.Matter.EthernetNetworkDiagnosticsTrait?
    public let icdManagementTrait: GoogleHomeTypes.Matter.IcdManagementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ThermostatDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.ThermostatDeviceType.ThermostatGoogleTraits
  public let matterTraits: GoogleHomeTypes.ThermostatDeviceType.ThermostatMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ThermostatGoogleTraits : Swift.Sendable {
    public let extendedThermostatTrait: GoogleHomeTypes.Google.ExtendedThermostatTrait?
  }
  public struct ThermostatMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let thermostatTrait: GoogleHomeTypes.Matter.ThermostatTrait?
    public let thermostatUserInterfaceConfigurationTrait: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OnOffLightDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.OnOffLightDeviceType.OnOffLightGoogleTraits
  public let matterTraits: GoogleHomeTypes.OnOffLightDeviceType.OnOffLightMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OnOffLightGoogleTraits : Swift.Sendable {
    public let lightEffectsTrait: GoogleHomeTypes.Google.LightEffectsTrait?
  }
  public struct OnOffLightMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RefrigeratorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.RefrigeratorDeviceType.RefrigeratorGoogleTraits
  public let matterTraits: GoogleHomeTypes.RefrigeratorDeviceType.RefrigeratorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct RefrigeratorGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct RefrigeratorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let refrigeratorAndTemperatureControlledCabinetModeTrait: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait?
    public let refrigeratorAlarmTrait: GoogleHomeTypes.Matter.RefrigeratorAlarmTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TemperatureControlledCabinetDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.TemperatureControlledCabinetDeviceType.TemperatureControlledCabinetGoogleTraits
  public let matterTraits: GoogleHomeTypes.TemperatureControlledCabinetDeviceType.TemperatureControlledCabinetMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct TemperatureControlledCabinetGoogleTraits : Swift.Sendable {
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct TemperatureControlledCabinetMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let ovenCavityOperationalStateTrait: GoogleHomeTypes.Matter.OvenCavityOperationalStateTrait?
    public let ovenModeTrait: GoogleHomeTypes.Matter.OvenModeTrait?
    public let refrigeratorAndTemperatureControlledCabinetModeTrait: GoogleHomeTypes.Matter.RefrigeratorAndTemperatureControlledCabinetModeTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DishwasherDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.DishwasherDeviceType.DishwasherGoogleTraits
  public let matterTraits: GoogleHomeTypes.DishwasherDeviceType.DishwasherMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct DishwasherGoogleTraits : Swift.Sendable {
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct DishwasherMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let dishwasherModeTrait: GoogleHomeTypes.Matter.DishwasherModeTrait?
    public let dishwasherAlarmTrait: GoogleHomeTypes.Matter.DishwasherAlarmTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LaundryWasherDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.LaundryWasherDeviceType.LaundryWasherGoogleTraits
  public let matterTraits: GoogleHomeTypes.LaundryWasherDeviceType.LaundryWasherMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct LaundryWasherGoogleTraits : Swift.Sendable {
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct LaundryWasherMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let laundryWasherModeTrait: GoogleHomeTypes.Matter.LaundryWasherModeTrait?
    public let laundryWasherControlsTrait: GoogleHomeTypes.Matter.LaundryWasherControlsTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SmokeCOAlarmDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.SmokeCOAlarmDeviceType.SmokeCOAlarmGoogleTraits
  public let matterTraits: GoogleHomeTypes.SmokeCOAlarmDeviceType.SmokeCOAlarmMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct SmokeCOAlarmGoogleTraits : Swift.Sendable {
    public let smokeLevelConcentrationMeasurementTrait: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait?
    public let smokeCoAlarmSettingsTrait: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait?
  }
  public struct SmokeCOAlarmMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let smokeCoAlarmTrait: GoogleHomeTypes.Matter.SmokeCoAlarmTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let relativeHumidityMeasurementTrait: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait?
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AirQualitySensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.AirQualitySensorDeviceType.AirQualitySensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct AirQualitySensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let airQualityTrait: GoogleHomeTypes.Matter.AirQualityTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let relativeHumidityMeasurementTrait: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait?
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
    public let carbonDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait?
    public let nitrogenDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.NitrogenDioxideConcentrationMeasurementTrait?
    public let ozoneConcentrationMeasurementTrait: GoogleHomeTypes.Matter.OzoneConcentrationMeasurementTrait?
    public let pm25ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait?
    public let formaldehydeConcentrationMeasurementTrait: GoogleHomeTypes.Matter.FormaldehydeConcentrationMeasurementTrait?
    public let pm1ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm1ConcentrationMeasurementTrait?
    public let pm10ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait?
    public let totalVolatileOrganicCompoundsConcentrationMeasurementTrait: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait?
    public let radonConcentrationMeasurementTrait: GoogleHomeTypes.Matter.RadonConcentrationMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoomAirConditionerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.RoomAirConditionerDeviceType.RoomAirConditionerGoogleTraits
  public let matterTraits: GoogleHomeTypes.RoomAirConditionerDeviceType.RoomAirConditionerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct RoomAirConditionerGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
    public let extendedThermostatTrait: GoogleHomeTypes.Google.ExtendedThermostatTrait?
  }
  public struct RoomAirConditionerMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let thermostatTrait: GoogleHomeTypes.Matter.ThermostatTrait?
    public let fanControlTrait: GoogleHomeTypes.Matter.FanControlTrait?
    public let thermostatUserInterfaceConfigurationTrait: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let relativeHumidityMeasurementTrait: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoboticVacuumCleanerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.RoboticVacuumCleanerDeviceType.RoboticVacuumCleanerGoogleTraits
  public let matterTraits: GoogleHomeTypes.RoboticVacuumCleanerDeviceType.RoboticVacuumCleanerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct RoboticVacuumCleanerGoogleTraits : Swift.Sendable {
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct RoboticVacuumCleanerMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let rvcRunModeTrait: GoogleHomeTypes.Matter.RvcRunModeTrait?
    public let rvcOperationalStateTrait: GoogleHomeTypes.Matter.RvcOperationalStateTrait?
    public let rvcCleanModeTrait: GoogleHomeTypes.Matter.RvcCleanModeTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AirPurifierDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.AirPurifierDeviceType.AirPurifierGoogleTraits
  public let matterTraits: GoogleHomeTypes.AirPurifierDeviceType.AirPurifierMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct AirPurifierGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
    public let extendedAirQualityTrait: GoogleHomeTypes.Google.ExtendedAirQualityTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
  }
  public struct AirPurifierMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let fanControlTrait: GoogleHomeTypes.Matter.FanControlTrait?
    public let hepaFilterMonitoringTrait: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait?
    public let activatedCarbonFilterMonitoringTrait: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ControlBridgeDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.ControlBridgeDeviceType.ControlBridgeMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ControlBridgeMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct VideoRemoteControlDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.VideoRemoteControlDeviceType.VideoRemoteControlGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct VideoRemoteControlGoogleTraits : Swift.Sendable {
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
    public let extendedChannelTrait: GoogleHomeTypes.Google.ExtendedChannelTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PowerSourceDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.PowerSourceDeviceType.PowerSourceGoogleTraits
  public let matterTraits: GoogleHomeTypes.PowerSourceDeviceType.PowerSourceMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct PowerSourceGoogleTraits : Swift.Sendable {
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
  }
  public struct PowerSourceMatterTraits : Swift.Sendable {
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DimmerSwitchDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.DimmerSwitchDeviceType.DimmerSwitchMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct DimmerSwitchMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ColorDimmerSwitchDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.ColorDimmerSwitchDeviceType.ColorDimmerSwitchMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ColorDimmerSwitchMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PumpControllerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.PumpControllerDeviceType.PumpControllerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct PumpControllerMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DoorLockControllerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnergyEvseDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.EnergyEvseDeviceType.EnergyEvseGoogleTraits
  public let matterTraits: GoogleHomeTypes.EnergyEvseDeviceType.EnergyEvseMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct EnergyEvseGoogleTraits : Swift.Sendable {
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
  }
  public struct EnergyEvseMatterTraits : Swift.Sendable {
    public let energyEvseTrait: GoogleHomeTypes.Matter.EnergyEvseTrait?
    public let energyEvseModeTrait: GoogleHomeTypes.Matter.EnergyEvseModeTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeviceEnergyManagementDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ElectricalSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.ElectricalSensorDeviceType.ElectricalSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ElectricalSensorMatterTraits : Swift.Sendable {
    public let powerTopologyTrait: GoogleHomeTypes.Matter.PowerTopologyTrait?
    public let electricalPowerMeasurementTrait: GoogleHomeTypes.Matter.ElectricalPowerMeasurementTrait?
    public let electricalEnergyMeasurementTrait: GoogleHomeTypes.Matter.ElectricalEnergyMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OtaRequestorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OtaRequestorDeviceType.OtaRequestorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OtaRequestorMatterTraits : Swift.Sendable {
    public let otaSoftwareUpdateRequestorTrait: GoogleHomeTypes.Matter.OtaSoftwareUpdateRequestorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OtaProviderDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OtaProviderDeviceType.OtaProviderMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OtaProviderMatterTraits : Swift.Sendable {
    public let otaSoftwareUpdateProviderTrait: GoogleHomeTypes.Matter.OtaSoftwareUpdateProviderTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CastingVideoClientDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WaterFreezeDetectorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.WaterFreezeDetectorDeviceType.WaterFreezeDetectorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct WaterFreezeDetectorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let booleanStateConfigurationTrait: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WaterValveDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.WaterValveDeviceType.WaterValveMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct WaterValveMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let valveConfigurationAndControlTrait: GoogleHomeTypes.Matter.ValveConfigurationAndControlTrait?
    public let flowMeasurementTrait: GoogleHomeTypes.Matter.FlowMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WaterLeakDetectorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.WaterLeakDetectorDeviceType.WaterLeakDetectorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct WaterLeakDetectorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let booleanStateConfigurationTrait: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RainSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.RainSensorDeviceType.RainSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct RainSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let booleanStateConfigurationTrait: GoogleHomeTypes.Matter.BooleanStateConfigurationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OnOffSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OnOffSensorDeviceType.OnOffSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OnOffSensorMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CookSurfaceDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.CookSurfaceDeviceType.CookSurfaceMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct CookSurfaceMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CooktopDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.CooktopDeviceType.CooktopGoogleTraits
  public let matterTraits: GoogleHomeTypes.CooktopDeviceType.CooktopMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct CooktopGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
  }
  public struct CooktopMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MicrowaveOvenDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.MicrowaveOvenDeviceType.MicrowaveOvenGoogleTraits
  public let matterTraits: GoogleHomeTypes.MicrowaveOvenDeviceType.MicrowaveOvenMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct MicrowaveOvenGoogleTraits : Swift.Sendable {
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
  }
  public struct MicrowaveOvenMatterTraits : Swift.Sendable {
    public let microwaveOvenModeTrait: GoogleHomeTypes.Matter.MicrowaveOvenModeTrait?
    public let microwaveOvenControlTrait: GoogleHomeTypes.Matter.MicrowaveOvenControlTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let fanControlTrait: GoogleHomeTypes.Matter.FanControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExtractorHoodDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.ExtractorHoodDeviceType.ExtractorHoodGoogleTraits
  public let matterTraits: GoogleHomeTypes.ExtractorHoodDeviceType.ExtractorHoodMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct ExtractorHoodGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
  }
  public struct ExtractorHoodMatterTraits : Swift.Sendable {
    public let fanControlTrait: GoogleHomeTypes.Matter.FanControlTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let hepaFilterMonitoringTrait: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait?
    public let activatedCarbonFilterMonitoringTrait: GoogleHomeTypes.Matter.ActivatedCarbonFilterMonitoringTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OvenDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.OvenDeviceType.OvenMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct OvenMatterTraits : Swift.Sendable {
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LaundryDryerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.LaundryDryerDeviceType.LaundryDryerGoogleTraits
  public let matterTraits: GoogleHomeTypes.LaundryDryerDeviceType.LaundryDryerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct LaundryDryerGoogleTraits : Swift.Sendable {
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
  }
  public struct LaundryDryerMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let identifyTrait: GoogleHomeTypes.Matter.IdentifyTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let laundryDryerControlsTrait: GoogleHomeTypes.Matter.LaundryDryerControlsTrait?
    public let laundryWasherModeTrait: GoogleHomeTypes.Matter.LaundryWasherModeTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum Google {
}
extension GoogleHomeTypes.Google {
  public struct TimeTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public let attributes: GoogleHomeTypes.Google.TimeTrait.Attributes
    public let metadata: GoogleHomeSDK.TraitMetadata
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: (GoogleHomeTypes.Google.TimeTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.TimeTrait
  }
}
extension GoogleHomeTypes.Google.TimeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TimeTrait, rhs: GoogleHomeTypes.Google.TimeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TimeTrait {
  public struct Attributes : Swift.Sendable, Swift.Hashable {
    public var currentTime: GoogleHomeSDK.TimeOfDay?
    public var sunriseTime: GoogleHomeSDK.TimeOfDay?
    public var sunsetTime: GoogleHomeSDK.TimeOfDay?
    public var dayOfWeek: Foundation.Locale.Weekday?
    public var missingStructureLocation: Swift.Bool?
    public var currentDate: GoogleHomeSDK.LocalDate?
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init(currentTime: GoogleHomeSDK.TimeOfDay?, sunriseTime: GoogleHomeSDK.TimeOfDay?, sunsetTime: GoogleHomeSDK.TimeOfDay?, dayOfWeek: Foundation.Locale.Weekday?, currentDate: GoogleHomeSDK.LocalDate?, missingStructureLocation: Swift.Bool?)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.TimeTrait.Attributes, b: GoogleHomeTypes.Google.TimeTrait.Attributes) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var currentTime: GoogleHomeSDK.TimeOfDay?
    final public var sunriseTime: GoogleHomeSDK.TimeOfDay?
    final public var sunsetTime: GoogleHomeSDK.TimeOfDay?
    final public var dayOfWeek: Foundation.Locale.Weekday?
    final public var currentDate: GoogleHomeSDK.LocalDate?
    final public var missingStructureLocation: Swift.Bool?
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.TimeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.TimeTrait {
  public struct ScheduledEvent : GoogleHomeSDK.Event {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let clockTime: GoogleHomeSDK.TimeOfDay?
      public let solarTime: GoogleHomeSDK.SolarTime?
      public let daysOfWeek: [Foundation.Locale.Weekday]?
      public init(clockTime: GoogleHomeSDK.TimeOfDay?, solarTime: GoogleHomeSDK.SolarTime?, daysOfWeek: [Foundation.Locale.Weekday]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.TimeTrait.ScheduledEvent.Payload, b: GoogleHomeTypes.Google.TimeTrait.ScheduledEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.TimeTrait.ScheduledEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.TimeTrait.ScheduledEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TimeTrait {
  public struct RecurringClockTimeScheduledEvent : GoogleHomeSDK.Event {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let cronExpression: Swift.String
      public init(cronExpression: Swift.String)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.TimeTrait.RecurringClockTimeScheduledEvent.Payload, b: GoogleHomeTypes.Google.TimeTrait.RecurringClockTimeScheduledEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.TimeTrait.RecurringClockTimeScheduledEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.TimeTrait.RecurringClockTimeScheduledEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TimeTrait {
  public struct RecurringSolarTimeScheduledEvent : GoogleHomeSDK.Event {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let solarTime: GoogleHomeSDK.SolarTime
      public let cronExpression: Swift.String
      public init(solarTime: GoogleHomeSDK.SolarTime, cronExpression: Swift.String)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent.Payload, b: GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
  }
}
extension GoogleHomeTypes.Google.NotificationTrait {
  public static func sendNotifications(title: Swift.String?, body: Swift.String?) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.TimeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case currentTime
    case sunriseTime
    case sunsetTime
    case dayOfWeek
    case missingStructureLocation
    case currentDate
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public enum LocalDateAttribute : Swift.UInt32, GoogleHomeSDK.Field {
    case year
    case month
    case day
    case monthDay
    case yearMonth
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  public static func localDateAttribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.TimeTrait {
  public var currentTime: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.TimeOfDay> {
    get
  }
  public var sunriseTime: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.TimeOfDay> {
    get
  }
  public var sunsetTime: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.TimeOfDay> {
    get
  }
  public var dayOfWeek: GoogleHomeSDK.TypedExpression<Foundation.Locale.Weekday> {
    get
  }
  public var currentDate: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.LocalDate> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeSDK.LocalDate {
  public var year: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var month: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.LocalDate.Month> {
    get
  }
  public var day: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var monthDay: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.MonthDay> {
    get
  }
  public var yearMonth: GoogleHomeSDK.TypedExpression<GoogleHomeSDK.YearMonth> {
    get
  }
}
extension GoogleHomeTypes.Google.TimeTrait.ScheduledEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
    case clockTime
    case solarTime
    case daysOfWeek
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func clockTime(_ clockTime: GoogleHomeSDK.TimeOfDay) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.TimeTrait.ScheduledEvent>
  public static func solarTime(_ solarTime: GoogleHomeSDK.SolarTime) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.TimeTrait.ScheduledEvent>
  public static func daysOfWeek(_ daysOfWeek: [Foundation.Locale.Weekday]) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.TimeTrait.ScheduledEvent>
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.TimeTrait.RecurringClockTimeScheduledEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
    case cronExpression
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func cronExpression(_ cronExpression: Swift.String) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.TimeTrait.RecurringClockTimeScheduledEvent>
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
    case solarTime
    case cronExpression
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func solarTime(_ solarTime: GoogleHomeSDK.SolarTime) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent>
  public static func cronExpression(_ cronExpression: Swift.String) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.TimeTrait.RecurringSolarTimeScheduledEvent>
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google {
  public struct VideoAnalysisTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.VideoAnalysisTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.VideoAnalysisTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.VideoAnalysisTrait, rhs: GoogleHomeTypes.Google.VideoAnalysisTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.VideoAnalysisTrait {
  public struct Attributes : Swift.Sendable {
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.VideoAnalysisTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.VideoAnalysisTrait.Attributes, rhs: GoogleHomeTypes.Google.VideoAnalysisTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.VideoAnalysisTrait {
  public struct QueryMatchedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let query: Swift.String?
      public init(query: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent.Payload, b: GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
      case query
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public static func query(_ query: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent>
    public let payload: GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent, b: GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.VideoAnalysisTrait.QueryMatchedEvent {
  public var query: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct UserFeedbackTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.UserFeedbackTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.UserFeedbackTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.UserFeedbackTrait, rhs: GoogleHomeTypes.Google.UserFeedbackTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.UserFeedbackTrait {
  public struct Attributes : Swift.Sendable {
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.UserFeedbackTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.UserFeedbackTrait.Attributes, rhs: GoogleHomeTypes.Google.UserFeedbackTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.UserFeedbackTrait {
  public typealias UserFeedbackCommandRequest = GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackCommand.Request
  public struct UserFeedbackCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let uuid: Swift.String?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case uuid
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func userFeedback(uuid: Swift.String?) async throws
  public static func userFeedback(uuid: Swift.String?) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.UserFeedbackTrait {
  public struct UserFeedbackEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let uuid: Swift.String?
      public init(uuid: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent.Payload, b: GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
      case uuid
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public static func uuid(_ uuid: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent>
    public let payload: GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent, b: GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.UserFeedbackTrait.UserFeedbackEvent {
  public var uuid: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ArmDisarmTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ArmDisarmTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableArmLevels) public var availableArmLevels: GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels? {
      get
    }
    public var $availableArmLevels: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isArmed) public var isArmed: Swift.Bool? {
      get
    }
    public var $isArmed: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentArmLevel) public var currentArmLevel: Swift.String? {
      get
    }
    public var $currentArmLevel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($exitAllowanceSeconds) public var exitAllowanceSeconds: Swift.UInt32? {
      get
    }
    public var $exitAllowanceSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($armState) public var armState: GoogleHomeTypes.Google.ArmDisarmTrait.ArmState? {
      get
    }
    public var $armState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ArmDisarmTrait.ArmState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetArmLevel) public var targetArmLevel: Swift.String? {
      get
    }
    public var $targetArmLevel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($exitAllowanceEndTimeSeconds) public var exitAllowanceEndTimeSeconds: Swift.Int64? {
      get
    }
    public var $exitAllowanceEndTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($entryAllowanceEndTimeSeconds) public var entryAllowanceEndTimeSeconds: Swift.Int64? {
      get
    }
    public var $entryAllowanceEndTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ArmDisarmTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ArmDisarmTrait, rhs: GoogleHomeTypes.Google.ArmDisarmTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ArmDisarmTrait.Attributes, rhs: GoogleHomeTypes.Google.ArmDisarmTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public struct LevelValues : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let levelSynonym: [Swift.String]
    public let languageCode: Swift.String
    public init(levelSynonym: [Swift.String], languageCode: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues, b: GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Levels : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let level: Swift.String
    public let levelValues: [GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues]
    public let levelCategory: GoogleHomeTypes.Google.ArmDisarmTrait.LevelCategory
    public let exitAllowanceSeconds: Swift.UInt32
    public init(level: Swift.String, levelValues: [GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues], levelCategory: GoogleHomeTypes.Google.ArmDisarmTrait.LevelCategory, exitAllowanceSeconds: Swift.UInt32)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.Levels, b: GoogleHomeTypes.Google.ArmDisarmTrait.Levels) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AvailableArmLevels : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let levels: [GoogleHomeTypes.Google.ArmDisarmTrait.Levels]
    public let ordered: Swift.Bool
    public init(levels: [GoogleHomeTypes.Google.ArmDisarmTrait.Levels], ordered: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels, b: GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public struct ArmDisarmFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let status: GoogleHomeTypes.Google.ArmDisarmTrait.StatusEnum?
      public let armState: GoogleHomeTypes.Google.ArmDisarmTrait.ArmState?
      public let errorCode: Swift.String?
      public init(status: GoogleHomeTypes.Google.ArmDisarmTrait.StatusEnum?, armState: GoogleHomeTypes.Google.ArmDisarmTrait.ArmState?, errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent.Payload, b: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent, b: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ArmDisarmArmStateEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let armState: GoogleHomeTypes.Google.ArmDisarmTrait.ArmState?
      public let exitAllowanceEndTimeSeconds: Swift.Int64?
      public let entryAllowanceEndTimeSeconds: Swift.Int64?
      public let currentArmLevel: Swift.String?
      public let targetArmLevel: Swift.String?
      public let triggeredDeviceId: Swift.String?
      public let errorCode: GoogleHomeTypes.Google.ArmDisarmTrait.ErrorCode?
      public init(priority: Swift.UInt32?, armState: GoogleHomeTypes.Google.ArmDisarmTrait.ArmState?, exitAllowanceEndTimeSeconds: Swift.Int64?, entryAllowanceEndTimeSeconds: Swift.Int64?, currentArmLevel: Swift.String?, targetArmLevel: Swift.String?, triggeredDeviceId: Swift.String?, errorCode: GoogleHomeTypes.Google.ArmDisarmTrait.ErrorCode?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent.Payload, b: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent, b: GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public var supportsArmDisarmCommand: Swift.Bool {
    get
  }
  public func armDisarm(arm: Swift.Bool, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func armDisarmBatchable(arm: Swift.Bool, optionalArgsProvider: ((GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ArmDisarmCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var armLevelIsSet: Swift.Bool {
        get
      }
      final public func setArmLevel(_ value: Swift.String)
      final public func clearArmLevel()
      final public var cancelIsSet: Swift.Bool {
        get
      }
      final public func setCancel(_ value: Swift.Bool)
      final public func clearCancel()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public enum LevelCategory : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case stay
    case away
    case instant
    case night
    case custom
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ArmDisarmTrait.LevelCategory
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ArmState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case armed
    case disarmed
    case preAlarm
    case alarm
    case exitCountdown
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ArmDisarmTrait.ArmState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case success
    case failure
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ArmDisarmTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ErrorCode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case doorOpen
    case windowOpen
    case isOpen
    case motionDetected
    case deviceTampered
    case deviceMoved
    case deviceUnplugged
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ArmDisarmTrait.ErrorCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case availableArmLevels
    case isArmed
    case currentArmLevel
    case exitAllowanceSeconds
    case armState
    case targetArmLevel
    case exitAllowanceEndTimeSeconds
    case entryAllowanceEndTimeSeconds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ArmDisarmTrait {
  public var availableArmLevels: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels> {
    get
  }
  public var isArmed: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var currentArmLevel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var exitAllowanceSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var armState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.ArmState> {
    get
  }
  public var targetArmLevel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var exitAllowanceEndTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var entryAllowanceEndTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case status
    case armState
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmFollowUpEvent {
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.StatusEnum> {
    get
  }
  public var armState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.ArmState> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case armState
    case exitAllowanceEndTimeSeconds
    case entryAllowanceEndTimeSeconds
    case currentArmLevel
    case targetArmLevel
    case triggeredDeviceId
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmArmStateEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var armState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.ArmState> {
    get
  }
  public var exitAllowanceEndTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var entryAllowanceEndTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var currentArmLevel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var targetArmLevel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var triggeredDeviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.ErrorCode> {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case arm
    case armLevel
    case cancel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ArmDisarmTrait {
  public static func armDisarm(arm: Swift.Bool, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Google.ArmDisarmTrait.ArmDisarmCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case levelSynonym
    case languageCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues {
  public var levelSynonym: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var languageCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.Levels {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case level
    case levelValues
    case levelCategory
    case exitAllowanceSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.Levels.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.Levels.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ArmDisarmTrait.Levels {
  public var level: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var levelValues: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ArmDisarmTrait.LevelValues]> {
    get
  }
  public var levelCategory: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ArmDisarmTrait.LevelCategory> {
    get
  }
  public var exitAllowanceSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case levels
    case ordered
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ArmDisarmTrait.AvailableArmLevels {
  public var levels: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ArmDisarmTrait.Levels]> {
    get
  }
  public var ordered: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct AssistantTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.AssistantTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AssistantTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.AssistantTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($truncatedLocalNetworkId) public var truncatedLocalNetworkId: Swift.String? {
      get
    }
    public var $truncatedLocalNetworkId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onDemandAssistantDiscoverability) public var onDemandAssistantDiscoverability: Swift.Bool? {
      get
    }
    public var $onDemandAssistantDiscoverability: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($needsAssistantUnlink) public var needsAssistantUnlink: Swift.Bool? {
      get
    }
    public var $needsAssistantUnlink: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.AssistantTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.AssistantTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AssistantTrait, rhs: GoogleHomeTypes.Google.AssistantTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AssistantTrait.Attributes, rhs: GoogleHomeTypes.Google.AssistantTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantTrait {
  public typealias ActivateAssistantDiscoverabilityCommandResponse = GoogleHomeTypes.Google.AssistantTrait.ActivateAssistantDiscoverabilityCommand.Response
  public var supportsActivateAssistantDiscoverabilityCommand: Swift.Bool {
    get
  }
  public func activateAssistantDiscoverability() async throws -> GoogleHomeTypes.Google.AssistantTrait.ActivateAssistantDiscoverabilityCommandResponse
  public func activateAssistantDiscoverabilityBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.AssistantTrait.ActivateAssistantDiscoverabilityCommandResponse>
  public struct ActivateAssistantDiscoverabilityCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.AssistantTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case truncatedLocalNetworkId
    case onDemandAssistantDiscoverability
    case needsAssistantUnlink
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.AssistantTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.AssistantTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.AssistantTrait {
  public var truncatedLocalNetworkId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var onDemandAssistantDiscoverability: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var needsAssistantUnlink: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantTrait {
  public static func activateAssistantDiscoverability() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct AudioInputTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.AudioInputTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AudioInputTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.AudioInputTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($audioInputQuality) public var audioInputQuality: GoogleHomeTypes.Google.AudioInputTrait.AudioInputQuality? {
      get
    }
    public var $audioInputQuality: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.AudioInputTrait.AudioInputQuality> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($audioInputEnvironment) public var audioInputEnvironment: GoogleHomeTypes.Google.AudioInputTrait.AudioInputEnvironment? {
      get
    }
    public var $audioInputEnvironment: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.AudioInputTrait.AudioInputEnvironment> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.AudioInputTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.AudioInputTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AudioInputTrait, rhs: GoogleHomeTypes.Google.AudioInputTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AudioInputTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AudioInputTrait.Attributes, rhs: GoogleHomeTypes.Google.AudioInputTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AudioInputTrait {
  public enum AudioInputQuality : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case voiceQuality
    case musicQuality
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.AudioInputTrait.AudioInputQuality
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum AudioInputEnvironment : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case surroundingUsers
    case authenticatedUserOnly
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.AudioInputTrait.AudioInputEnvironment
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.AudioInputTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case audioInputQuality
    case audioInputEnvironment
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.AudioInputTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.AudioInputTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.AudioInputTrait {
  public var audioInputQuality: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.AudioInputTrait.AudioInputQuality> {
    get
  }
  public var audioInputEnvironment: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.AudioInputTrait.AudioInputEnvironment> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct BuildingManagementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.BuildingManagementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.BuildingManagementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeBuildingNotices) public var activeBuildingNotices: [GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices]? {
      get
    }
    public var $activeBuildingNotices: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.BuildingManagementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.BuildingManagementTrait, rhs: GoogleHomeTypes.Google.BuildingManagementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.BuildingManagementTrait.Attributes, rhs: GoogleHomeTypes.Google.BuildingManagementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait {
  public struct BuildingNotice : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let noticeTitle: Swift.String
    public let noticeValue: Swift.String
    public let noticeTimeSeconds: Swift.Int64
    public init(noticeTitle: Swift.String, noticeValue: Swift.String, noticeTimeSeconds: Swift.Int64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice, b: GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ActiveBuildingNotices : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let languageCode: Swift.String
    public let notices: [GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice]
    public init(languageCode: Swift.String, notices: [GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices, b: GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case activeBuildingNotices
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.BuildingManagementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.BuildingManagementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.BuildingManagementTrait {
  public var activeBuildingNotices: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case noticeTitle
    case noticeValue
    case noticeTimeSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice {
  public var noticeTitle: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var noticeValue: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var noticeTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case languageCode
    case notices
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.BuildingManagementTrait.ActiveBuildingNotices {
  public var languageCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var notices: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.BuildingManagementTrait.BuildingNotice]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct CameraActivationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.CameraActivationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.CameraActivationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.CameraActivationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CameraActivationTrait, rhs: GoogleHomeTypes.Google.CameraActivationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CameraActivationTrait.Attributes, rhs: GoogleHomeTypes.Google.CameraActivationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait {
  public typealias ProcessCommandResponse = GoogleHomeTypes.Google.CameraActivationTrait.ProcessCommand.Response
  public var supportsProcessCommand: Swift.Bool {
    get
  }
  public func process(request: Foundation.Data) async throws -> GoogleHomeTypes.Google.CameraActivationTrait.ProcessCommandResponse
  public func processBatchable(request: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.CameraActivationTrait.ProcessCommandResponse>
  public struct ProcessCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let response: Foundation.Data?
      public let firmwareErrorMessage: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait {
  public typealias ConvertMatterTlvToX509CommandResponse = GoogleHomeTypes.Google.CameraActivationTrait.ConvertMatterTlvToX509Command.Response
  public var supportsConvertMatterTlvToX509Command: Swift.Bool {
    get
  }
  public func convertMatterTlvToX509(matterTlvBytes: Foundation.Data) async throws -> GoogleHomeTypes.Google.CameraActivationTrait.ConvertMatterTlvToX509CommandResponse
  public func convertMatterTlvToX509Batchable(matterTlvBytes: Foundation.Data) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.CameraActivationTrait.ConvertMatterTlvToX509CommandResponse>
  public struct ConvertMatterTlvToX509Command : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let x509DerBytes: Foundation.Data
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraActivationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraActivationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CameraActivationTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.CameraActivationTrait.ProcessCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case request
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraActivationTrait.ProcessCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraActivationTrait.ProcessCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.CameraActivationTrait.ConvertMatterTlvToX509Command {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case matterTlvBytes
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraActivationTrait.ConvertMatterTlvToX509Command.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraActivationTrait.ConvertMatterTlvToX509Command.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.CameraActivationTrait {
  public static func process(request: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
  public static func convertMatterTlvToX509(matterTlvBytes: Foundation.Data) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct CameraStreamTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.CameraStreamTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cameraStreamSupportedProtocols) public var cameraStreamSupportedProtocols: [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol]? {
      get
    }
    public var $cameraStreamSupportedProtocols: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cameraStreamNeedAuthToken) public var cameraStreamNeedAuthToken: Swift.Bool? {
      get
    }
    public var $cameraStreamNeedAuthToken: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cameraStreamSupportsAudio) public var cameraStreamSupportsAudio: Swift.Bool? {
      get
    }
    public var $cameraStreamSupportsAudio: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cameraStreamSupportsPreview) public var cameraStreamSupportsPreview: Swift.Bool? {
      get
    }
    public var $cameraStreamSupportsPreview: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($cameraStreamNeedDrmEncryption) public var cameraStreamNeedDrmEncryption: Swift.Bool? {
      get
    }
    public var $cameraStreamNeedDrmEncryption: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isCurrentlyStreaming) public var isCurrentlyStreaming: Swift.Bool? {
      get
    }
    public var $isCurrentlyStreaming: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeStreamEvent) public var activeStreamEvent: GoogleHomeTypes.Google.CameraStreamTrait.ActiveStreamEventType? {
      get
    }
    public var $activeStreamEvent: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CameraStreamTrait.ActiveStreamEventType> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($streamUnavailableReason) public var streamUnavailableReason: GoogleHomeTypes.Google.CameraStreamTrait.StreamUnavailableReason? {
      get
    }
    public var $streamUnavailableReason: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CameraStreamTrait.StreamUnavailableReason> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($preferConfirmationForCameraStream) public var preferConfirmationForCameraStream: Swift.Bool? {
      get
    }
    public var $preferConfirmationForCameraStream: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.CameraStreamTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CameraStreamTrait, rhs: GoogleHomeTypes.Google.CameraStreamTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CameraStreamTrait.Attributes, rhs: GoogleHomeTypes.Google.CameraStreamTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public struct CameraStreamPreviewImage : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let imageUrl: Swift.String
    public let width: Swift.UInt32
    public let height: Swift.UInt32
    public let timestampSeconds: Swift.Int64
    public init(imageUrl: Swift.String, width: Swift.UInt32, height: Swift.UInt32, timestampSeconds: Swift.Int64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage, b: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public struct CameraStreamUpdateEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int64?
      public let cameraStreamAuthToken: Swift.String?
      public let cameraStreamProtocol: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol?
      public let cameraStreamPreviewImage: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage?
      public let cameraStreamSignalingUrl: Swift.String?
      public let cameraStreamIceServers: Swift.String?
      public init(priority: Swift.Int64?, cameraStreamAuthToken: Swift.String?, cameraStreamProtocol: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol?, cameraStreamPreviewImage: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage?, cameraStreamSignalingUrl: Swift.String?, cameraStreamIceServers: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent.Payload, b: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent, b: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public typealias GetCameraStreamCommandResponse = GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamCommand.Response
  public var supportsGetCameraStreamCommand: Swift.Bool {
    get
  }
  public func getCameraStream(streamToChromecast: Swift.Bool, supportedStreamProtocols: [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol]) async throws -> GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamCommandResponse
  public func getCameraStreamBatchable(streamToChromecast: Swift.Bool, supportedStreamProtocols: [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol]) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamCommandResponse>
  public struct GetCameraStreamCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let cameraStreamAuthToken: Swift.String?
      public let cameraStreamProtocol: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol
      public let cameraStreamPreviewImage: GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage?
      public let cameraStreamAccessUrl: Swift.String?
      public let cameraStreamReceiverAppId: Swift.String?
      public let cameraStreamSignalingUrl: Swift.String?
      public let cameraStreamOffer: Swift.String?
      public let cameraStreamIceServers: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public typealias GetCameraStreamPreviewImageCommandResponse = GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamPreviewImageCommand.Response
  public var supportsGetCameraStreamPreviewImageCommand: Swift.Bool {
    get
  }
  public func getCameraStreamPreviewImage(preferredWidth: Swift.UInt32, preferredHeight: Swift.UInt32) async throws -> GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamPreviewImageCommandResponse
  public func getCameraStreamPreviewImageBatchable(preferredWidth: Swift.UInt32, preferredHeight: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamPreviewImageCommandResponse>
  public struct GetCameraStreamPreviewImageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let imageUrl: Swift.String
      public let width: Swift.UInt32
      public let height: Swift.UInt32
      public let timestampSeconds: Swift.Int64
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public enum CameraStreamProtocol : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case hls
    case dash
    case smoothStream
    case progressiveMP4
    case webRTC
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ActiveStreamEventType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case genericEvent
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CameraStreamTrait.ActiveStreamEventType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StreamUnavailableReason : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case cameraTurnedOff
    case deviceOffline
    case deviceTurnedOff
    case deviceBusy
    case deviceAtExtremeTemperature
    case deviceThermalShutdown
    case lowBattery
    case deadBattery
    case faultyBattery
    case deviceNotMounted
    case chargerIssue
    case deviceCharging
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CameraStreamTrait.StreamUnavailableReason
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case cameraStreamSupportedProtocols
    case cameraStreamNeedAuthToken
    case cameraStreamSupportsAudio
    case cameraStreamSupportsPreview
    case cameraStreamNeedDrmEncryption
    case isCurrentlyStreaming
    case activeStreamEvent
    case streamUnavailableReason
    case preferConfirmationForCameraStream
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraStreamTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraStreamTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CameraStreamTrait {
  public var cameraStreamSupportedProtocols: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol]> {
    get
  }
  public var cameraStreamNeedAuthToken: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var cameraStreamSupportsAudio: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var cameraStreamSupportsPreview: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var cameraStreamNeedDrmEncryption: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var isCurrentlyStreaming: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var activeStreamEvent: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CameraStreamTrait.ActiveStreamEventType> {
    get
  }
  public var streamUnavailableReason: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CameraStreamTrait.StreamUnavailableReason> {
    get
  }
  public var preferConfirmationForCameraStream: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case cameraStreamAuthToken
    case cameraStreamProtocol
    case cameraStreamPreviewImage
    case cameraStreamSignalingUrl
    case cameraStreamIceServers
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamUpdateEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var cameraStreamAuthToken: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var cameraStreamProtocol: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol> {
    get
  }
  public var cameraStreamPreviewImage: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage> {
    get
  }
  public var cameraStreamSignalingUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var cameraStreamIceServers: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case streamToChromecast
    case supportedStreamProtocols
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamPreviewImageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case preferredWidth
    case preferredHeight
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamPreviewImageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraStreamTrait.GetCameraStreamPreviewImageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.CameraStreamTrait {
  public static func getCameraStream(streamToChromecast: Swift.Bool, supportedStreamProtocols: [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamProtocol]) -> GoogleHomeSDK.AutomationCommand
  public static func getCameraStreamPreviewImage(preferredWidth: Swift.UInt32, preferredHeight: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case imageUrl
    case width
    case height
    case timestampSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.CameraStreamTrait.CameraStreamPreviewImage {
  public var imageUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var width: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var height: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var timestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct CastTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.CastTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.CastTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.CastTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CastTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.CastTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CastTrait, rhs: GoogleHomeTypes.Google.CastTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CastTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CastTrait.Attributes, rhs: GoogleHomeTypes.Google.CastTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CastTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CastTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CastTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CastTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ClipTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ClipTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ClipTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ClipTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($canSaveVideoClip) public var canSaveVideoClip: Swift.Bool? {
      get
    }
    public var $canSaveVideoClip: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($canTakeScreenshot) public var canTakeScreenshot: Swift.Bool? {
      get
    }
    public var $canTakeScreenshot: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportUserDefinedClipLength) public var supportUserDefinedClipLength: Swift.Bool? {
      get
    }
    public var $supportUserDefinedClipLength: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxClipLengthSeconds) public var maxClipLengthSeconds: Swift.UInt64? {
      get
    }
    public var $maxClipLengthSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ClipTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ClipTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ClipTrait, rhs: GoogleHomeTypes.Google.ClipTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ClipTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ClipTrait.Attributes, rhs: GoogleHomeTypes.Google.ClipTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ClipTrait {
  public typealias SaveScreenshotCommandResponse = GoogleHomeTypes.Google.ClipTrait.SaveScreenshotCommand.Response
  public var supportsSaveScreenshotCommand: Swift.Bool {
    get
  }
  public func saveScreenshot() async throws -> GoogleHomeTypes.Google.ClipTrait.SaveScreenshotCommandResponse
  public func saveScreenshotBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.ClipTrait.SaveScreenshotCommandResponse>
  public struct SaveScreenshotCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.ClipTrait {
  public typealias SaveVideoClipCommandResponse = GoogleHomeTypes.Google.ClipTrait.SaveVideoClipCommand.Response
  public var supportsSaveVideoClipCommand: Swift.Bool {
    get
  }
  public func saveVideoClip(durationSeconds: Swift.UInt64) async throws -> GoogleHomeTypes.Google.ClipTrait.SaveVideoClipCommandResponse
  public func saveVideoClipBatchable(durationSeconds: Swift.UInt64) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.ClipTrait.SaveVideoClipCommandResponse>
  public struct SaveVideoClipCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.ClipTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case canSaveVideoClip
    case canTakeScreenshot
    case supportUserDefinedClipLength
    case maxClipLengthSeconds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ClipTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ClipTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ClipTrait {
  public var canSaveVideoClip: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var canTakeScreenshot: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var supportUserDefinedClipLength: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var maxClipLengthSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ClipTrait.SaveVideoClipCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case durationSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ClipTrait.SaveVideoClipCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ClipTrait.SaveVideoClipCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ClipTrait {
  public static func saveScreenshot() -> GoogleHomeSDK.AutomationCommand
  public static func saveVideoClip(durationSeconds: Swift.UInt64) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct CommunicationCallTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.CommunicationCallTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.CommunicationCallTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.CommunicationCallTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($communicationCallState) public var communicationCallState: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallState? {
      get
    }
    public var $communicationCallState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CommunicationCallTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.CommunicationCallTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CommunicationCallTrait, rhs: GoogleHomeTypes.Google.CommunicationCallTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CommunicationCallTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CommunicationCallTrait.Attributes, rhs: GoogleHomeTypes.Google.CommunicationCallTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CommunicationCallTrait {
  public enum CommunicationCallState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case inCall
    case onHold
    case inactive
    case callIncoming
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CommunicationCallTrait {
  public struct CommunicationCallFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let pickup: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public static let hangup: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public static let reject: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public static let muteMic: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public static let hold: GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public typealias Element = GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.CommunicationCallTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case communicationCallState
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CommunicationCallTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CommunicationCallTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CommunicationCallTrait {
  public var communicationCallState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallState> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CommunicationCallTrait.CommunicationCallFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct CommunicationVideoCallTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($communicationVideoCallState) public var communicationVideoCallState: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallState? {
      get
    }
    public var $communicationVideoCallState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CommunicationVideoCallTrait, rhs: GoogleHomeTypes.Google.CommunicationVideoCallTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attributes, rhs: GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait {
  public enum CommunicationVideoCallState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case inCall
    case onHold
    case inactive
    case callIncoming
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait {
  public struct CommunicationVideoCallFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let pickup: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public static let hangup: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public static let reject: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public static let muteMic: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public static let turnOffCamera: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public static let swapPicture: GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public typealias Element = GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.CommunicationVideoCallTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case communicationVideoCallState
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CommunicationVideoCallTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CommunicationVideoCallTrait {
  public var communicationVideoCallState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallState> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CommunicationVideoCallTrait.CommunicationVideoCallFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ConsumesIntelligenceEventsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($consumesHomeAwayEvents) public var consumesHomeAwayEvents: Swift.Bool? {
      get
    }
    public var $consumesHomeAwayEvents: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait, rhs: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attributes, rhs: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait {
  public typealias UpdateHomeAwayStateCommandResponse = GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UpdateHomeAwayStateCommand.Response
  public var supportsUpdateHomeAwayStateCommand: Swift.Bool {
    get
  }
  public func updateHomeAwayState(userPresenceState: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UserPresenceState) async throws -> GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UpdateHomeAwayStateCommandResponse
  public func updateHomeAwayStateBatchable(userPresenceState: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UserPresenceState) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UpdateHomeAwayStateCommandResponse>
  public struct UpdateHomeAwayStateCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait {
  public enum UserPresenceState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case home
    case away
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UserPresenceState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case consumesHomeAwayEvents
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait {
  public var consumesHomeAwayEvents: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UpdateHomeAwayStateCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case userPresenceState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UpdateHomeAwayStateCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UpdateHomeAwayStateCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait {
  public static func updateHomeAwayState(userPresenceState: GoogleHomeTypes.Google.ConsumesIntelligenceEventsTrait.UserPresenceState) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct CookTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.CookTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.CookTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.CookTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedCookingModes) public var supportedCookingModes: [GoogleHomeTypes.Google.CookTrait.CookingMode]? {
      get
    }
    public var $supportedCookingModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.CookTrait.CookingMode]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($foodPresets) public var foodPresets: [GoogleHomeTypes.Google.CookTrait.FoodPreset]? {
      get
    }
    public var $foodPresets: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.CookTrait.FoodPreset]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentCookingMode) public var currentCookingMode: GoogleHomeTypes.Google.CookTrait.CookingMode? {
      get
    }
    public var $currentCookingMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CookTrait.CookingMode> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFoodPreset) public var currentFoodPreset: Swift.String? {
      get
    }
    public var $currentFoodPreset: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFoodQuantity) public var currentFoodQuantity: Swift.Float32? {
      get
    }
    public var $currentFoodQuantity: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFoodUnit) public var currentFoodUnit: GoogleHomeTypes.Google.CookTrait.Unit? {
      get
    }
    public var $currentFoodUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.CookTrait.Unit> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CookTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.CookTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CookTrait, rhs: GoogleHomeTypes.Google.CookTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CookTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.CookTrait.Attributes, rhs: GoogleHomeTypes.Google.CookTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.CookTrait {
  public struct FoodSynonym : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let synonym: [Swift.String]
    public let lang: Swift.String
    public init(synonym: [Swift.String], lang: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.CookTrait.FoodSynonym, b: GoogleHomeTypes.Google.CookTrait.FoodSynonym) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct FoodPreset : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let foodPresetName: Swift.String
    public let supportedUnits: [GoogleHomeTypes.Google.CookTrait.Unit]
    public let foodSynonyms: [GoogleHomeTypes.Google.CookTrait.FoodSynonym]
    public init(foodPresetName: Swift.String, supportedUnits: [GoogleHomeTypes.Google.CookTrait.Unit], foodSynonyms: [GoogleHomeTypes.Google.CookTrait.FoodSynonym])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.CookTrait.FoodPreset, b: GoogleHomeTypes.Google.CookTrait.FoodPreset) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CookTrait {
  public typealias CookCommandResponse = GoogleHomeTypes.Google.CookTrait.CookCommand.Response
  public var supportsCookCommand: Swift.Bool {
    get
  }
  public func cook(start: Swift.Bool, cookingMode: GoogleHomeTypes.Google.CookTrait.CookingMode, foodPreset: Swift.String, quantity: Swift.Float32, unit: GoogleHomeTypes.Google.CookTrait.Unit) async throws -> GoogleHomeTypes.Google.CookTrait.CookCommandResponse
  public func cookBatchable(start: Swift.Bool, cookingMode: GoogleHomeTypes.Google.CookTrait.CookingMode, foodPreset: Swift.String, quantity: Swift.Float32, unit: GoogleHomeTypes.Google.CookTrait.Unit) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.CookTrait.CookCommandResponse>
  public struct CookCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.CookTrait {
  public enum CookingMode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknownCookingMode
    case bake
    case beat
    case blend
    case boil
    case brew
    case broil
    case convectionBake
    case cook
    case defrost
    case dehydrate
    case ferment
    case fry
    case grill
    case knead
    case microwave
    case mix
    case pressureCook
    case puree
    case roast
    case saute
    case slowCook
    case sousVide
    case steam
    case stew
    case stir
    case warm
    case whip
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CookTrait.CookingMode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum Unit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknownUnits
    case noUnits
    case centimeters
    case cups
    case deciliters
    case feet
    case fluidOunces
    case gallons
    case grams
    case inches
    case kilograms
    case liters
    case meters
    case milligrams
    case milliliters
    case millimeters
    case ounces
    case pinch
    case pints
    case portion
    case pounds
    case quarts
    case tablespoons
    case teaspoons
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.CookTrait.Unit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.CookTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedCookingModes
    case foodPresets
    case currentCookingMode
    case currentFoodPreset
    case currentFoodQuantity
    case currentFoodUnit
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CookTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CookTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.CookTrait {
  public var supportedCookingModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.CookTrait.CookingMode]> {
    get
  }
  public var foodPresets: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.CookTrait.FoodPreset]> {
    get
  }
  public var currentCookingMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CookTrait.CookingMode> {
    get
  }
  public var currentFoodPreset: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var currentFoodQuantity: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var currentFoodUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.CookTrait.Unit> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.CookTrait.CookCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case start
    case cookingMode
    case foodPreset
    case quantity
    case unit
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CookTrait.CookCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CookTrait.CookCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.CookTrait {
  public static func cook(start: Swift.Bool, cookingMode: GoogleHomeTypes.Google.CookTrait.CookingMode, foodPreset: Swift.String, quantity: Swift.Float32, unit: GoogleHomeTypes.Google.CookTrait.Unit) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.CookTrait.FoodSynonym {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case synonym
    case lang
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CookTrait.FoodSynonym.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CookTrait.FoodSynonym.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.CookTrait.FoodSynonym {
  public var synonym: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.CookTrait.FoodPreset {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case foodPresetName
    case supportedUnits
    case foodSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.CookTrait.FoodPreset.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.CookTrait.FoodPreset.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.CookTrait.FoodPreset {
  public var foodPresetName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var supportedUnits: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.CookTrait.Unit]> {
    get
  }
  public var foodSynonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.CookTrait.FoodSynonym]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct DeviceConnectivityTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DeviceConnectivityTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DeviceConnectivityTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DeviceConnectivityTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastCheckInTimeSeconds) public var lastCheckInTimeSeconds: Swift.Int64? {
      get
    }
    public var $lastCheckInTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DeviceConnectivityTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DeviceConnectivityTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DeviceConnectivityTrait, rhs: GoogleHomeTypes.Google.DeviceConnectivityTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceConnectivityTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DeviceConnectivityTrait.Attributes, rhs: GoogleHomeTypes.Google.DeviceConnectivityTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceConnectivityTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lastCheckInTimeSeconds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DeviceConnectivityTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DeviceConnectivityTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DeviceConnectivityTrait {
  public var lastCheckInTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct DeviceLinksTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DeviceLinksTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DeviceLinksTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DeviceLinksTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DeviceLinksTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DeviceLinksTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DeviceLinksTrait, rhs: GoogleHomeTypes.Google.DeviceLinksTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceLinksTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DeviceLinksTrait.Attributes, rhs: GoogleHomeTypes.Google.DeviceLinksTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceLinksTrait {
  public typealias GetDeviceLinksCommandResponse = GoogleHomeTypes.Google.DeviceLinksTrait.GetDeviceLinksCommand.Response
  public var supportsGetDeviceLinksCommand: Swift.Bool {
    get
  }
  public func getDeviceLinks() async throws -> GoogleHomeTypes.Google.DeviceLinksTrait.GetDeviceLinksCommandResponse
  public func getDeviceLinksBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.DeviceLinksTrait.GetDeviceLinksCommandResponse>
  public struct GetDeviceLinksCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let deviceLinkManagementAndroid: Swift.String
      public let deviceLinkManagementIos: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.DeviceLinksTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DeviceLinksTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DeviceLinksTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DeviceLinksTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceLinksTrait {
  public static func getDeviceLinks() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct DeviceLocationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DeviceLocationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.DeviceLocationTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.DeviceLocationTrait
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DeviceLocationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($spokenLocation) public var spokenLocation: GoogleHomeTypes.Google.DeviceLocationTrait.Location? {
      get
    }
    public var $spokenLocation: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.DeviceLocationTrait.Location> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($presenceEnabledStructureIdList) public var presenceEnabledStructureIdList: [Swift.String]? {
      get
    }
    public var $presenceEnabledStructureIdList: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DeviceLocationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DeviceLocationTrait, rhs: GoogleHomeTypes.Google.DeviceLocationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DeviceLocationTrait.Attributes, rhs: GoogleHomeTypes.Google.DeviceLocationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var spokenLocationIsSet: Swift.Bool {
      get
    }
    final public func setSpokenLocation(_ value: GoogleHomeTypes.Google.DeviceLocationTrait.Location)
    final public func clearSpokenLocation()
    final public var presenceEnabledStructureIdListIsSet: Swift.Bool {
      get
    }
    final public func setPresenceEnabledStructureIdList(_ value: [Swift.String])
    final public func clearPresenceEnabledStructureIdList()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait {
  public var supportsSetSpokenLocationCommand: Swift.Bool {
    get
  }
  public func setSpokenLocation(spokenLocation: GoogleHomeTypes.Google.DeviceLocationTrait.Location) async throws
  public func setSpokenLocationBatchable(spokenLocation: GoogleHomeTypes.Google.DeviceLocationTrait.Location) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetSpokenLocationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait {
  public enum Location : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case attic
    case basement
    case bathroom
    case bedroom
    case den
    case diningRoom
    case downstairs
    case entrance
    case familyRoom
    case garage
    case hallway
    case kidsRoom
    case kitchen
    case livingRoom
    case masterBedroom
    case office
    case upstairs
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DeviceLocationTrait.Location
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DeviceLocationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case spokenLocation
    case presenceEnabledStructureIdList
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DeviceLocationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DeviceLocationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DeviceLocationTrait {
  public var spokenLocation: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DeviceLocationTrait.Location> {
    get
  }
  public var presenceEnabledStructureIdList: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.DeviceLocationTrait {
  final public func setSpokenLocation(_ value: GoogleHomeTypes.Google.DeviceLocationTrait.Location)
  final public func setPresenceEnabledStructureIdList(_ value: [Swift.String])
}
extension GoogleHomeTypes.Google.DeviceLocationTrait.SetSpokenLocationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case spokenLocation
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DeviceLocationTrait.SetSpokenLocationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DeviceLocationTrait.SetSpokenLocationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.DeviceLocationTrait {
  public static func setSpokenLocation(spokenLocation: GoogleHomeTypes.Google.DeviceLocationTrait.Location) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct DispenseTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DispenseTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DispenseTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DispenseTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedDispenseItems) public var supportedDispenseItems: [GoogleHomeTypes.Google.DispenseTrait.DispensableItem]? {
      get
    }
    public var $supportedDispenseItems: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.DispenseTrait.DispensableItem]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedDispensePresets) public var supportedDispensePresets: [GoogleHomeTypes.Google.DispenseTrait.Preset]? {
      get
    }
    public var $supportedDispensePresets: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.DispenseTrait.Preset]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dispenseItems) public var dispenseItems: [GoogleHomeTypes.Google.DispenseTrait.DispenseItem]? {
      get
    }
    public var $dispenseItems: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.DispenseTrait.DispenseItem]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DispenseTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DispenseTrait, rhs: GoogleHomeTypes.Google.DispenseTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DispenseTrait.Attributes, rhs: GoogleHomeTypes.Google.DispenseTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait {
  public struct Amount : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let amount: Swift.Float32
    public let unit: GoogleHomeTypes.Google.DispenseTrait.Unit
    public init(amount: Swift.Float32, unit: GoogleHomeTypes.Google.DispenseTrait.Unit)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DispenseTrait.Amount, b: GoogleHomeTypes.Google.DispenseTrait.Amount) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ItemNameSynonym : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let synonyms: [Swift.String]
    public let lang: Swift.String
    public init(synonyms: [Swift.String], lang: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym, b: GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DispensableItem : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let itemName: Swift.String
    public let itemNameSynonyms: [GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym]
    public let supportedUnits: [GoogleHomeTypes.Google.DispenseTrait.Unit]
    public let defaultPortion: GoogleHomeTypes.Google.DispenseTrait.Amount
    public init(itemName: Swift.String, itemNameSynonyms: [GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym], supportedUnits: [GoogleHomeTypes.Google.DispenseTrait.Unit], defaultPortion: GoogleHomeTypes.Google.DispenseTrait.Amount)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DispenseTrait.DispensableItem, b: GoogleHomeTypes.Google.DispenseTrait.DispensableItem) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PresetNameSynonym : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let synonyms: [Swift.String]
    public let lang: Swift.String
    public init(synonyms: [Swift.String], lang: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym, b: GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Preset : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let presetName: Swift.String
    public let presetNameSynonyms: [GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym]
    public init(presetName: Swift.String, presetNameSynonyms: [GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DispenseTrait.Preset, b: GoogleHomeTypes.Google.DispenseTrait.Preset) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DispenseItem : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let itemName: Swift.String
    public let amountRemaining: GoogleHomeTypes.Google.DispenseTrait.Amount
    public let amountLastDispensed: GoogleHomeTypes.Google.DispenseTrait.Amount
    public let isCurrentlyDispensing: Swift.Bool
    public init(itemName: Swift.String, amountRemaining: GoogleHomeTypes.Google.DispenseTrait.Amount, amountLastDispensed: GoogleHomeTypes.Google.DispenseTrait.Amount, isCurrentlyDispensing: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DispenseTrait.DispenseItem, b: GoogleHomeTypes.Google.DispenseTrait.DispenseItem) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DispenseTrait {
  public typealias DispenseCommandResponse = GoogleHomeTypes.Google.DispenseTrait.DispenseCommand.Response
  public var supportsDispenseCommand: Swift.Bool {
    get
  }
  public func dispense(item: Swift.String, amount: Swift.Float32, unit: GoogleHomeTypes.Google.DispenseTrait.Unit, presetName: Swift.String) async throws -> GoogleHomeTypes.Google.DispenseTrait.DispenseCommandResponse
  public func dispenseBatchable(item: Swift.String, amount: Swift.Float32, unit: GoogleHomeTypes.Google.DispenseTrait.Unit, presetName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.DispenseTrait.DispenseCommandResponse>
  public struct DispenseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.DispenseTrait {
  public enum Unit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case noUnits
    case centimeters
    case cups
    case deciliters
    case feet
    case fluidOunces
    case gallons
    case grams
    case inches
    case kilograms
    case liters
    case meters
    case milligrams
    case milliliters
    case millimeters
    case ounces
    case pinch
    case pints
    case portion
    case pounds
    case quarts
    case tablespoons
    case teaspoons
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DispenseTrait.Unit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DispenseTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedDispenseItems
    case supportedDispensePresets
    case dispenseItems
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DispenseTrait {
  public var supportedDispenseItems: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DispenseTrait.DispensableItem]> {
    get
  }
  public var supportedDispensePresets: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DispenseTrait.Preset]> {
    get
  }
  public var dispenseItems: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DispenseTrait.DispenseItem]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.DispenseCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case item
    case amount
    case unit
    case presetName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.DispenseCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.DispenseCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.DispenseTrait {
  public static func dispense(item: Swift.String, amount: Swift.Float32, unit: GoogleHomeTypes.Google.DispenseTrait.Unit, presetName: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.DispenseTrait.Amount {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case amount
    case unit
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.Amount.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.Amount.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DispenseTrait.Amount {
  public var amount: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var unit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DispenseTrait.Unit> {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case synonyms
    case lang
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym {
  public var synonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.DispensableItem {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case itemName
    case itemNameSynonyms
    case supportedUnits
    case defaultPortion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.DispensableItem.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.DispensableItem.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DispenseTrait.DispensableItem {
  public var itemName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var itemNameSynonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DispenseTrait.ItemNameSynonym]> {
    get
  }
  public var supportedUnits: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DispenseTrait.Unit]> {
    get
  }
  public var defaultPortion: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DispenseTrait.Amount> {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case synonyms
    case lang
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym {
  public var synonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.Preset {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case presetName
    case presetNameSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.Preset.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.Preset.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DispenseTrait.Preset {
  public var presetName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var presetNameSynonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DispenseTrait.PresetNameSynonym]> {
    get
  }
}
extension GoogleHomeTypes.Google.DispenseTrait.DispenseItem {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case itemName
    case amountRemaining
    case amountLastDispensed
    case isCurrentlyDispensing
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DispenseTrait.DispenseItem.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DispenseTrait.DispenseItem.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DispenseTrait.DispenseItem {
  public var itemName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var amountRemaining: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DispenseTrait.Amount> {
    get
  }
  public var amountLastDispensed: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DispenseTrait.Amount> {
    get
  }
  public var isCurrentlyDispensing: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct DockTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DockTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DockTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DockTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isDocked) public var isDocked: Swift.Bool? {
      get
    }
    public var $isDocked: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DockTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DockTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DockTrait, rhs: GoogleHomeTypes.Google.DockTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DockTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DockTrait.Attributes, rhs: GoogleHomeTypes.Google.DockTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DockTrait {
  public var supportsDockCommand: Swift.Bool {
    get
  }
  public func dock() async throws
  public func dockBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DockCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.DockTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case isDocked
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DockTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DockTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DockTrait {
  public var isDocked: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.DockTrait {
  public static func dock() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct DoorbellPressTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DoorbellPressTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DoorbellPressTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DoorbellPressTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DoorbellPressTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DoorbellPressTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DoorbellPressTrait, rhs: GoogleHomeTypes.Google.DoorbellPressTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DoorbellPressTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DoorbellPressTrait.Attributes, rhs: GoogleHomeTypes.Google.DoorbellPressTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DoorbellPressTrait {
  public struct DoorbellPressedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int64?
      public let doorbellPressTimeSeconds: Swift.Int64?
      public let complementaryToneId: Swift.String?
      public init(priority: Swift.Int64?, doorbellPressTimeSeconds: Swift.Int64?, complementaryToneId: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent.Payload, b: GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent, b: GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DoorbellPressTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DoorbellPressTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DoorbellPressTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DoorbellPressTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case doorbellPressTimeSeconds
    case complementaryToneId
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DoorbellPressTrait.DoorbellPressedEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var doorbellPressTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var complementaryToneId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct DynamicLocationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DynamicLocationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DynamicLocationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.DynamicLocationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dockedDeviceId) public var dockedDeviceId: Swift.String? {
      get
    }
    public var $dockedDeviceId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dockedDeviceRoomId) public var dockedDeviceRoomId: Swift.String? {
      get
    }
    public var $dockedDeviceRoomId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($previousDockedDeviceRoomId) public var previousDockedDeviceRoomId: Swift.String? {
      get
    }
    public var $previousDockedDeviceRoomId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($dockedDeviceStructureId) public var dockedDeviceStructureId: Swift.String? {
      get
    }
    public var $dockedDeviceStructureId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DynamicLocationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.DynamicLocationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DynamicLocationTrait, rhs: GoogleHomeTypes.Google.DynamicLocationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DynamicLocationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DynamicLocationTrait.Attributes, rhs: GoogleHomeTypes.Google.DynamicLocationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DynamicLocationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dockedDeviceId
    case dockedDeviceRoomId
    case previousDockedDeviceRoomId
    case dockedDeviceStructureId
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.DynamicLocationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.DynamicLocationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DynamicLocationTrait {
  public var dockedDeviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var dockedDeviceRoomId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var previousDockedDeviceRoomId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var dockedDeviceStructureId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ElevatorControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ElevatorControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ElevatorControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedElevatorFloors) public var supportedElevatorFloors: [GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor]? {
      get
    }
    public var $supportedElevatorFloors: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorControlFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorControlFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ElevatorControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ElevatorControlTrait, rhs: GoogleHomeTypes.Google.ElevatorControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ElevatorControlTrait.Attributes, rhs: GoogleHomeTypes.Google.ElevatorControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait {
  public struct FloorNameSynonym : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let lang: Swift.String
    public let synonyms: [Swift.String]
    public init(lang: Swift.String, synonyms: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym, b: GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ElevatorFloor : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let floorName: Swift.String
    public let floorNameSynonyms: [GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym]
    public init(floorName: Swift.String, floorNameSynonyms: [GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor, b: GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait {
  public var supportsCallElevatorCommand: Swift.Bool {
    get
  }
  public func callElevator(floorName: Swift.String) async throws
  public func callElevatorBatchable(floorName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct CallElevatorCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait {
  public struct ElevatorControlFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsDefaultElevatorFloor: GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorControlFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorControlFeature
    public typealias Element = GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorControlFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedElevatorFloors
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ElevatorControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ElevatorControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ElevatorControlTrait {
  public var supportedElevatorFloors: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorControlFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait.CallElevatorCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case floorName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ElevatorControlTrait.CallElevatorCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ElevatorControlTrait.CallElevatorCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ElevatorControlTrait {
  public static func callElevator(floorName: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lang
    case synonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym {
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var synonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case floorName
    case floorNameSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ElevatorControlTrait.ElevatorFloor {
  public var floorName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var floorNameSynonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ElevatorControlTrait.FloorNameSynonym]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct EnergyProgramsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.EnergyProgramsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enrolledEnergyPrograms) public var enrolledEnergyPrograms: [GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram]? {
      get
    }
    public var $enrolledEnergyPrograms: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeEnergyPrograms) public var activeEnergyPrograms: [Swift.String]? {
      get
    }
    public var $activeEnergyPrograms: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($scheduledEnergyProgramEvents) public var scheduledEnergyProgramEvents: [GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent]? {
      get
    }
    public var $scheduledEnergyProgramEvents: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.EnergyProgramsTrait, rhs: GoogleHomeTypes.Google.EnergyProgramsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.EnergyProgramsTrait.Attributes, rhs: GoogleHomeTypes.Google.EnergyProgramsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public struct ProgramNameSynonym : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let synonyms: [Swift.String]
    public let lang: Swift.String
    public init(synonyms: [Swift.String], lang: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym, b: GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EnergyProgram : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let programName: Swift.String
    public let programNameSynonyms: [GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym]
    public init(programName: Swift.String, programNameSynonyms: [GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram, b: GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Value : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let floatValue: Swift.Float64
    public init(floatValue: Swift.Float64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.EnergyProgramsTrait.Value, b: GoogleHomeTypes.Google.EnergyProgramsTrait.Value) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Segment : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let startTimeUnixTimestampSeconds: Swift.Int64
    public let endTimeUnixTimestampSeconds: Swift.Int64
    public let value: GoogleHomeTypes.Google.EnergyProgramsTrait.Value
    public init(startTimeUnixTimestampSeconds: Swift.Int64, endTimeUnixTimestampSeconds: Swift.Int64, value: GoogleHomeTypes.Google.EnergyProgramsTrait.Value)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.EnergyProgramsTrait.Segment, b: GoogleHomeTypes.Google.EnergyProgramsTrait.Segment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EnergyProgramEvent : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let eventId: Swift.String
    public let eventType: GoogleHomeTypes.Google.EnergyProgramsTrait.EventType
    public let eventStatus: GoogleHomeTypes.Google.EnergyProgramsTrait.EventStatus
    public let programName: Swift.String
    public let segments: [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment]
    public init(eventId: Swift.String, eventType: GoogleHomeTypes.Google.EnergyProgramsTrait.EventType, eventStatus: GoogleHomeTypes.Google.EnergyProgramsTrait.EventStatus, programName: Swift.String, segments: [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent, b: GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public var supportsScheduleEnergyProgramEventCommand: Swift.Bool {
    get
  }
  public func scheduleEnergyProgramEvent(eventId: Swift.String, eventType: GoogleHomeTypes.Google.EnergyProgramsTrait.EventType, programName: Swift.String, segments: [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment]) async throws
  public func scheduleEnergyProgramEventBatchable(eventId: Swift.String, eventType: GoogleHomeTypes.Google.EnergyProgramsTrait.EventType, programName: Swift.String, segments: [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ScheduleEnergyProgramEventCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public var supportsCancelEnergyProgramEventCommand: Swift.Bool {
    get
  }
  public func cancelEnergyProgramEvent(eventId: Swift.String, programName: Swift.String) async throws
  public func cancelEnergyProgramEventBatchable(eventId: Swift.String, programName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct CancelEnergyProgramEventCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public enum EventType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case temperatureSetpointOffset
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.EnergyProgramsTrait.EventType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EventStatus : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case scheduled
    case running
    case optOutDirect
    case optOutIndirect
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.EnergyProgramsTrait.EventStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enrolledEnergyPrograms
    case activeEnergyPrograms
    case scheduledEnergyProgramEvents
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.EnergyProgramsTrait {
  public var enrolledEnergyPrograms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram]> {
    get
  }
  public var activeEnergyPrograms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var scheduledEnergyProgramEvents: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.ScheduleEnergyProgramEventCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case eventId
    case eventType
    case programName
    case segments
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.ScheduleEnergyProgramEventCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.ScheduleEnergyProgramEventCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.CancelEnergyProgramEventCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case eventId
    case programName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.CancelEnergyProgramEventCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.CancelEnergyProgramEventCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait {
  public static func scheduleEnergyProgramEvent(eventId: Swift.String, eventType: GoogleHomeTypes.Google.EnergyProgramsTrait.EventType, programName: Swift.String, segments: [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment]) -> GoogleHomeSDK.AutomationCommand
  public static func cancelEnergyProgramEvent(eventId: Swift.String, programName: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case synonyms
    case lang
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym {
  public var synonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case programName
    case programNameSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgram {
  public var programName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var programNameSynonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.EnergyProgramsTrait.ProgramNameSynonym]> {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.Value {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case floatValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.Value.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.Value.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.EnergyProgramsTrait.Value {
  public var floatValue: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.Segment {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case startTimeUnixTimestampSeconds
    case endTimeUnixTimestampSeconds
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.Segment.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.EnergyProgramsTrait.Segment {
  public var startTimeUnixTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var endTimeUnixTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.EnergyProgramsTrait.Value> {
    get
  }
}
extension GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case eventId
    case eventType
    case eventStatus
    case programName
    case segments
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.EnergyProgramsTrait.EnergyProgramEvent {
  public var eventId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var eventType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.EnergyProgramsTrait.EventType> {
    get
  }
  public var eventStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.EnergyProgramsTrait.EventStatus> {
    get
  }
  public var programName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var segments: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.EnergyProgramsTrait.Segment]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedAirQualityTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Int32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($indoorMeasuredValue) public var indoorMeasuredValue: Swift.Int32? {
      get
    }
    public var $indoorMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($outdoorMeasuredValue) public var outdoorMeasuredValue: Swift.Int32? {
      get
    }
    public var $outdoorMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($indoorAirQuality) public var indoorAirQuality: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel? {
      get
    }
    public var $indoorAirQuality: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($outdoorAirQuality) public var outdoorAirQuality: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel? {
      get
    }
    public var $outdoorAirQuality: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.Int32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.Int32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.Int32? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedAirQualityTrait, rhs: GoogleHomeTypes.Google.ExtendedAirQualityTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait {
  public struct AirQualityEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let triggeredDeviceId: Swift.String?
      public let levelValue: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel?
      public let location: GoogleHomeTypes.Google.ExtendedAirQualityTrait.MeasurementLocation?
      public init(priority: Swift.Int32?, triggeredDeviceId: Swift.String?, levelValue: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel?, location: GoogleHomeTypes.Google.ExtendedAirQualityTrait.MeasurementLocation?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent.Payload, b: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent, b: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AirQualitySensorErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let errorCode: Swift.String?
      public init(priority: Swift.Int32?, errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent.Payload, b: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent, b: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait {
  public enum AirQualityLevel : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case good
    case fair
    case moderate
    case poor
    case veryPoor
    case extremelyPoor
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementLocation : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case indoor
    case outdoor
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedAirQualityTrait.MeasurementLocation
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait {
  public struct AirQualityFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let indoorFair: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let indoorModerate: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let indoorVeryPoor: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let indoorExtremelyPoor: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let outdoorFair: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let outdoorModerate: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let outdoorVeryPoor: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let outdoorExtremelyPoor: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let numeric: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let indoorNumeric: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public static let outdoorNumeric: GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public typealias Element = GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case indoorMeasuredValue
    case outdoorMeasuredValue
    case indoorAirQuality
    case outdoorAirQuality
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedAirQualityTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedAirQualityTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var indoorMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var outdoorMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var indoorAirQuality: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel> {
    get
  }
  public var outdoorAirQuality: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case triggeredDeviceId
    case levelValue
    case location
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var triggeredDeviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualityLevel> {
    get
  }
  public var location: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedAirQualityTrait.MeasurementLocation> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedAirQualityTrait.AirQualitySensorErrorEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedApplicationLauncherTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableApplications) public var availableApplications: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication]? {
      get
    }
    public var $availableApplications: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentApplicationKey) public var currentApplicationKey: Swift.String? {
      get
    }
    public var $currentApplicationKey: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($useGlobalApplicationCatalog) public var useGlobalApplicationCatalog: Swift.Bool? {
      get
    }
    public var $useGlobalApplicationCatalog: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($type) public var type: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationType? {
      get
    }
    public var $type: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationType> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($globalApplicationCatalog) public var globalApplicationCatalog: [Swift.String]? {
      get
    }
    public var $globalApplicationCatalog: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait, rhs: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public struct ApplicationNames : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let language: Swift.String
    public let nameSynonym: [Swift.String]
    public init(language: Swift.String, nameSynonym: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames, b: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AvailableApplication : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let key: Swift.String
    public let names: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames]
    public init(key: Swift.String, names: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication, b: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public var supportsInstallAppCommand: Swift.Bool {
    get
  }
  public func installApp(newApplicationName: Swift.String, newApplication: Swift.String) async throws
  public func installAppBatchable(newApplicationName: Swift.String, newApplication: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct InstallAppCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public var supportsSearchAppCommand: Swift.Bool {
    get
  }
  public func searchApp(newApplicationName: Swift.String, newApplication: Swift.String) async throws
  public func searchAppBatchable(newApplicationName: Swift.String, newApplication: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SearchAppCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public var supportsLaunchAppCommand: Swift.Bool {
    get
  }
  public func launchApp(newApplicationName: Swift.String, newApplication: Swift.String) async throws
  public func launchAppBatchable(newApplicationName: Swift.String, newApplication: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct LaunchAppCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public enum ApplicationType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case application
    case game
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case availableApplications
    case currentApplicationKey
    case useGlobalApplicationCatalog
    case type
    case globalApplicationCatalog
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public var availableApplications: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication]> {
    get
  }
  public var currentApplicationKey: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var useGlobalApplicationCatalog: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationType> {
    get
  }
  public var globalApplicationCatalog: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.InstallAppCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newApplicationName
    case newApplication
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.InstallAppCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.InstallAppCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.SearchAppCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newApplicationName
    case newApplication
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.SearchAppCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.SearchAppCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.LaunchAppCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newApplicationName
    case newApplication
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.LaunchAppCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.LaunchAppCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait {
  public static func installApp(newApplicationName: Swift.String, newApplication: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func searchApp(newApplicationName: Swift.String, newApplication: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func launchApp(newApplicationName: Swift.String, newApplication: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case language
    case nameSynonym
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames {
  public var language: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var nameSynonym: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case key
    case names
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.AvailableApplication {
  public var key: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var names: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait.ApplicationNames]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedBasicInformationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedBasicInformationTrait, rhs: GoogleHomeTypes.Google.ExtendedBasicInformationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait {
  public typealias GetSerialNumberCommandResponse = GoogleHomeTypes.Google.ExtendedBasicInformationTrait.GetSerialNumberCommand.Response
  public var supportsGetSerialNumberCommand: Swift.Bool {
    get
  }
  public func getSerialNumber() async throws -> GoogleHomeTypes.Google.ExtendedBasicInformationTrait.GetSerialNumberCommandResponse
  public func getSerialNumberBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.ExtendedBasicInformationTrait.GetSerialNumberCommandResponse>
  public struct GetSerialNumberCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let serialNumber: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedBasicInformationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedBasicInformationTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedBasicInformationTrait {
  public static func getSerialNumber() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ExtendedChannelTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedChannelTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedChannelList) public var extendedChannelList: [GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel]? {
      get
    }
    public var $extendedChannelList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($channelCatalog) public var channelCatalog: Swift.String? {
      get
    }
    public var $channelCatalog: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedChannelTrait, rhs: GoogleHomeTypes.Google.ExtendedChannelTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedChannelTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedChannelTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait {
  public struct ExtendedMediaChannel : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let number: Swift.String
    public let key: Swift.String
    public let names: [Swift.String]
    public init(number: Swift.String, key: Swift.String, names: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel, b: GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait {
  public var supportsReturnChannelCommand: Swift.Bool {
    get
  }
  public func returnChannel() async throws
  public func returnChannelBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ReturnChannelCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extendedChannelList
    case channelCatalog
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedChannelTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedChannelTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedChannelTrait {
  public var extendedChannelList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel]> {
    get
  }
  public var channelCatalog: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait {
  public static func returnChannel() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case number
    case key
    case names
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedChannelTrait.ExtendedMediaChannel {
  public var number: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var key: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var names: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedColorControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedColorControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($colorLoopEndTimestampSeconds) public var colorLoopEndTimestampSeconds: Swift.UInt64? {
      get
    }
    public var $colorLoopEndTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentName) public var currentName: Swift.String? {
      get
    }
    public var $currentName: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentRed) public var currentRed: Swift.UInt8? {
      get
    }
    public var $currentRed: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentGreen) public var currentGreen: Swift.UInt8? {
      get
    }
    public var $currentGreen: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentBlue) public var currentBlue: Swift.UInt8? {
      get
    }
    public var $currentBlue: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentHue) public var currentHue: Swift.Float32? {
      get
    }
    public var $currentHue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentSaturation) public var currentSaturation: Swift.Float32? {
      get
    }
    public var $currentSaturation: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentValue) public var currentValue: Swift.Float32? {
      get
    }
    public var $currentValue: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedColorControlTrait, rhs: GoogleHomeTypes.Google.ExtendedColorControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedColorControlTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedColorControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public var supportsMoveToColorNameCommand: Swift.Bool {
    get
  }
  public func moveToColorName(colorName: Swift.String) async throws
  public func moveToColorNameBatchable(colorName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToColorNameCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public var supportsMoveToColorRGBCommand: Swift.Bool {
    get
  }
  public func moveToColorRGB(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8) async throws
  public func moveToColorRGBBatchable(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToColorRGBCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public var supportsMoveToColorHSVCommand: Swift.Bool {
    get
  }
  public func moveToColorHSV(hue: Swift.Float32, saturation: Swift.Float32, value: Swift.Float32) async throws
  public func moveToColorHSVBatchable(hue: Swift.Float32, saturation: Swift.Float32, value: Swift.Float32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToColorHSVCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case colorLoopEndTimestampSeconds
    case currentName
    case currentRed
    case currentGreen
    case currentBlue
    case currentHue
    case currentSaturation
    case currentValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedColorControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedColorControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public var colorLoopEndTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var currentName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var currentRed: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentGreen: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentBlue: GoogleHomeSDK.TypedExpression<Swift.UInt8> {
    get
  }
  public var currentHue: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var currentSaturation: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var currentValue: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorNameCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case colorName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorNameCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorNameCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorRGBCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case red
    case green
    case blue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorRGBCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorRGBCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorHSVCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case hue
    case saturation
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorHSVCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedColorControlTrait.MoveToColorHSVCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedColorControlTrait {
  public static func moveToColorName(colorName: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func moveToColorRGB(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func moveToColorHSV(hue: Swift.Float32, saturation: Swift.Float32, value: Swift.Float32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ExtendedContentLauncherTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedMediaTypes) public var supportedMediaTypes: [GoogleHomeTypes.Google.ExtendedContentLauncherTrait.MediaType]? {
      get
    }
    public var $supportedMediaTypes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedContentLauncherTrait.MediaType]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableProviders) public var availableProviders: [Swift.String]? {
      get
    }
    public var $availableProviders: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedContentLauncherTrait, rhs: GoogleHomeTypes.Google.ExtendedContentLauncherTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public var supportsExtendedLaunchContentCommand: Swift.Bool {
    get
  }
  public func extendedLaunchContent(action: Swift.String) async throws
  public func extendedLaunchContentBatchable(action: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ExtendedLaunchContentCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public enum MediaType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case musicRecording
    case musicAlbum
    case musicGroup
    case musicPlaylist
    case person
    case tvSeason
    case tvSeries
    case tvEpisode
    case radioBroadcastService
    case televisionChannel
    case movieSeries
    case movie
    case sportsEvent
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedContentLauncherTrait.MediaType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public struct ContentLaunchFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsAudioTracks: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ContentLaunchFeature
    public static let supportsVideo: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ContentLaunchFeature
    public static let supportSMediaInitiationByDescription: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ContentLaunchFeature
    public static let supportsAppDeepLinks: GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ContentLaunchFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ContentLaunchFeature
    public typealias Element = GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ContentLaunchFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedMediaTypes
    case availableProviders
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedContentLauncherTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public var supportedMediaTypes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedContentLauncherTrait.MediaType]> {
    get
  }
  public var availableProviders: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ExtendedLaunchContentCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case action
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ExtendedLaunchContentCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedContentLauncherTrait.ExtendedLaunchContentCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedContentLauncherTrait {
  public static func extendedLaunchContent(action: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ExtendedDoorLockTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.ExtendedDoorLockTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.ExtendedDoorLockTrait
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableLockHomeAwayAssist) public var enableLockHomeAwayAssist: Swift.Bool? {
      get
    }
    public var $enableLockHomeAwayAssist: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($ignoreAutoRelockOnStructureMode) public var ignoreAutoRelockOnStructureMode: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.StructureMode]? {
      get
    }
    public var $ignoreAutoRelockOnStructureMode: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedDoorLockTrait.StructureMode]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedDoorLockTrait, rhs: GoogleHomeTypes.Google.ExtendedDoorLockTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var enableLockHomeAwayAssistIsSet: Swift.Bool {
      get
    }
    final public func setEnableLockHomeAwayAssist(_ value: Swift.Bool)
    final public func clearEnableLockHomeAwayAssist()
    final public var ignoreAutoRelockOnStructureModeIsSet: Swift.Bool {
      get
    }
    final public func setIgnoreAutoRelockOnStructureMode(_ value: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.StructureMode])
    final public func clearIgnoreAutoRelockOnStructureMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  public struct PrivacyModeActor : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let privacy_mode_actor_method: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActorMethodEnum
    public let actor_name: Swift.String
    public let user_id: Swift.Int64
    public let timeStampSeconds: Swift.Int64
    public init(privacy_mode_actor_method: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActorMethodEnum, actor_name: Swift.String, user_id: Swift.Int64, timeStampSeconds: Swift.Int64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor, b: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  public struct LockStateChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let lock_operation_type: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationTypeEnum?
      public let lock_operation_source: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationSourceEnum?
      public let user_index: Swift.UInt32?
      public let user_id: Swift.Int64?
      public let fabric_index: Swift.UInt32?
      public let actor_name: Swift.String?
      public let timeStampSeconds: Swift.Int64?
      public init(priority: Swift.UInt32?, lock_operation_type: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationTypeEnum?, lock_operation_source: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationSourceEnum?, user_index: Swift.UInt32?, user_id: Swift.Int64?, fabric_index: Swift.UInt32?, actor_name: Swift.String?, timeStampSeconds: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent.Payload, b: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent, b: GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PrivacyModeStateChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let privacy_mode_on: Swift.Bool?
      public let privacy_mode_actor: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor?
      public init(privacy_mode_on: Swift.Bool?, privacy_mode_actor: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent.Payload, b: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent, b: GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  public enum StructureMode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case structureModeUnspecified
    case structureModeHome
    case structureModeAway
    case structureModeSleep
    case structureModeVacation
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedDoorLockTrait.StructureMode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum LockOperationTypeEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case lock
    case unlock
    case nonAccessUserEvent
    case forcedUserEvent
    case unlatch
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationTypeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum LockOperationSourceEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case manual
    case proprietaryRemote
    case keypad
    case auto
    case button
    case schedule
    case remote
    case rfid
    case biometric
    case aliro
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationSourceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PrivacyModeActorMethodEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case other
    case physical
    case remoteUserExplicit
    case remoteUserImplicit
    case remoteReminderExplicit
    case remoteReminderImplicit
    case remoteUserOther
    case remoteDelegate
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActorMethodEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enableLockHomeAwayAssist
    case ignoreAutoRelockOnStructureMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  public var enableLockHomeAwayAssist: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var ignoreAutoRelockOnStructureMode: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedDoorLockTrait.StructureMode]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.ExtendedDoorLockTrait {
  final public func setEnableLockHomeAwayAssist(_ value: Swift.Bool)
  final public func setIgnoreAutoRelockOnStructureMode(_ value: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.StructureMode])
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case lock_operation_type
    case lock_operation_source
    case user_index
    case user_id
    case fabric_index
    case actor_name
    case timeStampSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockStateChangeEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var lock_operation_type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationTypeEnum> {
    get
  }
  public var lock_operation_source: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedDoorLockTrait.LockOperationSourceEnum> {
    get
  }
  public var user_index: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var user_id: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var fabric_index: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var actor_name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var timeStampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case privacy_mode_on
    case privacy_mode_actor
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeStateChangeEvent {
  public var privacy_mode_on: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var privacy_mode_actor: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case privacy_mode_actor_method
    case actor_name
    case user_id
    case timeStampSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActor {
  public var privacy_mode_actor_method: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedDoorLockTrait.PrivacyModeActorMethodEnum> {
    get
  }
  public var actor_name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var user_id: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var timeStampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedFanControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedFanControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.ExtendedFanControlTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.ExtendedFanControlTrait
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($customFanModes) public var customFanModes: GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds? {
      get
    }
    public var $customFanModes: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($customFanMode) public var customFanMode: Swift.String? {
      get
    }
    public var $customFanMode: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedFanControlTrait, rhs: GoogleHomeTypes.Google.ExtendedFanControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedFanControlTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedFanControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var customFanModeIsSet: Swift.Bool {
      get
    }
    final public func setCustomFanMode(_ value: Swift.String)
    final public func clearCustomFanMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public struct SpeedValues : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let lang: Swift.String
    public let speedSynonym: [Swift.String]
    public init(lang: Swift.String, speedSynonym: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues, b: GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Speed : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let speedName: Swift.String
    public let speedValues: [GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues]
    public init(speedName: Swift.String, speedValues: [GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed, b: GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AvailableFanSpeeds : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let ordered: Swift.Bool
    public let speeds: [GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed]
    public init(ordered: Swift.Bool, speeds: [GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds, b: GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public var supportsExtendedStepCommand: Swift.Bool {
    get
  }
  public func extendedStep(fanSpeedRelativeWeight: Swift.Int64, direction: GoogleHomeTypes.Google.ExtendedFanControlTrait.StepDirection) async throws
  public func extendedStepBatchable(fanSpeedRelativeWeight: Swift.Int64, direction: GoogleHomeTypes.Google.ExtendedFanControlTrait.StepDirection) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ExtendedStepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public var supportsToggleAirflowDirectionCommand: Swift.Bool {
    get
  }
  public func toggleAirflowDirection() async throws
  public func toggleAirflowDirectionBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ToggleAirflowDirectionCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public enum StepDirection : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case increase
    case decrease
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedFanControlTrait.StepDirection
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public struct FanControlFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsFanSpeedPercent: GoogleHomeTypes.Google.ExtendedFanControlTrait.FanControlFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ExtendedFanControlTrait.FanControlFeature
    public typealias Element = GoogleHomeTypes.Google.ExtendedFanControlTrait.FanControlFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case customFanModes
    case customFanMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedFanControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedFanControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public var customFanModes: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds> {
    get
  }
  public var customFanMode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.ExtendedFanControlTrait {
  final public func setCustomFanMode(_ value: Swift.String)
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait.ExtendedStepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fanSpeedRelativeWeight
    case direction
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedFanControlTrait.ExtendedStepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedFanControlTrait.ExtendedStepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait {
  public static func extendedStep(fanSpeedRelativeWeight: Swift.Int64, direction: GoogleHomeTypes.Google.ExtendedFanControlTrait.StepDirection) -> GoogleHomeSDK.AutomationCommand
  public static func toggleAirflowDirection() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lang
    case speedSynonym
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues {
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var speedSynonym: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case speedName
    case speedValues
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed {
  public var speedName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var speedValues: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedFanControlTrait.SpeedValues]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case ordered
    case speeds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedFanControlTrait.AvailableFanSpeeds {
  public var ordered: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var speeds: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedFanControlTrait.Speed]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedGeneralDiagnosticsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedActiveHardwareFaults) public var extendedActiveHardwareFaults: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]? {
      get
    }
    public var $extendedActiveHardwareFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sensorFaults) public var sensorFaults: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]? {
      get
    }
    public var $sensorFaults: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait, rhs: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait {
  public struct ExtendedHardwareFaultChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let current: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]?
      public let currentSensorFaults: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]?
      public let previous: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]?
      public let previousSensorFaults: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]?
      public init(priority: Swift.UInt32?, current: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]?, currentSensorFaults: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]?, previous: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]?, previousSensorFaults: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent.Payload, b: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent, b: GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait {
  public enum ExtendedHardwareFault : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case standard
    case audioOutputFault
    case piezoFault
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SensorFaultType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case smoke
    case co
    case led
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extendedActiveHardwareFaults
    case sensorFaults
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait {
  public var extendedActiveHardwareFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]> {
    get
  }
  public var sensorFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case current
    case currentSensorFaults
    case previous
    case previousSensorFaults
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFaultChangeEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]> {
    get
  }
  public var currentSensorFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]> {
    get
  }
  public var previous: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.ExtendedHardwareFault]> {
    get
  }
  public var previousSensorFaults: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedGeneralDiagnosticsTrait.SensorFaultType]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedKeypadInputTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedKeys) public var supportedKeys: [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key]? {
      get
    }
    public var $supportedKeys: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedKeypadInputTrait, rhs: GoogleHomeTypes.Google.ExtendedKeypadInputTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public struct Key : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let keyCode: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.KeyCode
    public let isVirtualKey: Swift.Bool
    public init(keyCode: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.KeyCode, isVirtualKey: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key, b: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public var supportsExtendedSendKeyCommand: Swift.Bool {
    get
  }
  public func extendedSendKey(keyCode: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key) async throws
  public func extendedSendKeyBatchable(keyCode: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ExtendedSendKeyCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public enum KeyCode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case select
    case up
    case down
    case left
    case right
    case rightUp
    case rightDown
    case leftUp
    case leftDown
    case rootMenu
    case setupMenu
    case contentsMenu
    case favoriteMenu
    case exit
    case mediaTopMenu
    case mediaContextSensitiveMenu
    case numberEntryMode
    case number11
    case number12
    case number0OrNumber10
    case numbers1
    case numbers2
    case numbers3
    case numbers4
    case numbers5
    case numbers6
    case numbers7
    case numbers8
    case numbers9
    case dot
    case enter
    case clear
    case nextFavorite
    case channelUp
    case channelDown
    case previousChannel
    case soundSelect
    case inputSelect
    case displayInformation
    case help
    case pageUp
    case pageDown
    case power
    case volumeUp
    case volumeDown
    case mute
    case play
    case stop
    case pause
    case record
    case rewind
    case fastForward
    case eject
    case forward
    case backward
    case stopRecord
    case pauseRecord
    case reserved
    case angle
    case subPicture
    case videoOnDemand
    case electronicProgramGuide
    case timerProgramming
    case initialConfiguration
    case selectBroadcastType
    case selectSoundPresentation
    case playFunction
    case pausePlayFunction
    case recordFunction
    case pauseRecordFunction
    case stopFunction
    case muteFunction
    case restoreVolumeFunction
    case tuneFunction
    case selectMediaFunction
    case selectAvInputFunction
    case selectAudioInputFunction
    case powerToggleFunction
    case powerOffFunction
    case powerOnFunction
    case f1Blue
    case f2Red
    case f3Green
    case f4Yellow
    case f5
    case data
    case a
    case b
    case x
    case y
    case start
    case confirm
    case back
    case cancel
    case home
    case hamburger
    case menu
    case options
    case triangle
    case rectangle
    case circle
    case cross
    case leftBumper
    case rightBumper
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedKeypadInputTrait.KeyCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedKeys
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public var supportedKeys: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait.ExtendedSendKeyCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case keyCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.ExtendedSendKeyCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.ExtendedSendKeyCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait {
  public static func extendedSendKey(keyCode: GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case keyCode
    case isVirtualKey
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedKeypadInputTrait.Key {
  public var keyCode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedKeypadInputTrait.KeyCode> {
    get
  }
  public var isVirtualKey: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedLevelControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedLevelControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedLevelControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultStepSize) public var defaultStepSize: Swift.UInt32? {
      get
    }
    public var $defaultStepSize: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedLevelControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedLevelControlTrait, rhs: GoogleHomeTypes.Google.ExtendedLevelControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedLevelControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case defaultStepSize
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedLevelControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedLevelControlTrait {
  public var defaultStepSize: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedMediaInputTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($customInputsOrdered) public var customInputsOrdered: Swift.Bool? {
      get
    }
    public var $customInputsOrdered: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($customInputsList) public var customInputsList: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput]? {
      get
    }
    public var $customInputsList: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentCustomInput) public var currentCustomInput: Swift.String? {
      get
    }
    public var $currentCustomInput: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedMediaInputTrait, rhs: GoogleHomeTypes.Google.ExtendedMediaInputTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public struct InputNames : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let lang: Swift.String
    public let nameSynonym: [Swift.String]
    public init(lang: Swift.String, nameSynonym: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames, b: GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AvailableInput : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let key: Swift.String
    public let names: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames]
    public init(key: Swift.String, names: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput, b: GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public var supportsSelectCustomInputCommand: Swift.Bool {
    get
  }
  public func selectCustomInput(newInput: Swift.String) async throws
  public func selectCustomInputBatchable(newInput: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SelectCustomInputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public var supportsPreviousInputCommand: Swift.Bool {
    get
  }
  public func previousInput() async throws
  public func previousInputBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct PreviousInputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public var supportsNextInputCommand: Swift.Bool {
    get
  }
  public func nextInput() async throws
  public func nextInputBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct NextInputCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case customInputsOrdered
    case customInputsList
    case currentCustomInput
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public var customInputsOrdered: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var customInputsList: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput]> {
    get
  }
  public var currentCustomInput: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait.SelectCustomInputCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case newInput
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaInputTrait.SelectCustomInputCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.SelectCustomInputCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait {
  public static func selectCustomInput(newInput: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func previousInput() -> GoogleHomeSDK.AutomationCommand
  public static func nextInput() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lang
    case nameSynonym
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames {
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var nameSynonym: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case key
    case names
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedMediaInputTrait.AvailableInput {
  public var key: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var names: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedMediaInputTrait.InputNames]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedMediaPlaybackTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedCurrentState) public var extendedCurrentState: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ExtendedPlaybackState? {
      get
    }
    public var $extendedCurrentState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ExtendedPlaybackState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait, rhs: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public var supportsClosedCaptioningOffCommand: Swift.Bool {
    get
  }
  public func closedCaptioningOff() async throws
  public func closedCaptioningOffBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClosedCaptioningOffCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public var supportsClosedCaptioningOnCommand: Swift.Bool {
    get
  }
  public func closedCaptioningOn(userQueryLanguage: Swift.String, closedCaptioningLanguage: Swift.String) async throws
  public func closedCaptioningOnBatchable(userQueryLanguage: Swift.String, closedCaptioningLanguage: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClosedCaptioningOnCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public var supportsSetRepeatCommand: Swift.Bool {
    get
  }
  public func setRepeat(isOn: Swift.Bool, isSingle: Swift.Bool) async throws
  public func setRepeatBatchable(isOn: Swift.Bool, isSingle: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetRepeatCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public var supportsShuffleCommand: Swift.Bool {
    get
  }
  public func shuffle() async throws
  public func shuffleBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ShuffleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public enum ExtendedPlaybackState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case standard
    case fastForwarding
    case rewinding
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ExtendedPlaybackState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extendedCurrentState
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public var extendedCurrentState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ExtendedPlaybackState> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ClosedCaptioningOnCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case userQueryLanguage
    case closedCaptioningLanguage
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ClosedCaptioningOnCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.ClosedCaptioningOnCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.SetRepeatCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case isOn
    case isSingle
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.SetRepeatCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait.SetRepeatCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait {
  public static func closedCaptioningOff() -> GoogleHomeSDK.AutomationCommand
  public static func closedCaptioningOn(userQueryLanguage: Swift.String, closedCaptioningLanguage: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func setRepeat(isOn: Swift.Bool, isSingle: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func shuffle() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ExtendedModeSelectTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedModes) public var supportedModes: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode]? {
      get
    }
    public var $supportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentModeSettings) public var currentModeSettings: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting]? {
      get
    }
    public var $currentModeSettings: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedModeSelectTrait, rhs: GoogleHomeTypes.Google.ExtendedModeSelectTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait {
  public struct SettingSynonyms : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let language: Swift.String
    public let settingSynonyms: [Swift.String]
    public init(language: Swift.String, settingSynonyms: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms, b: GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Setting : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let synonyms: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms]
    public init(name: Swift.String, synonyms: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting, b: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeSynonyms : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let language: Swift.String
    public let modeSynonyms: [Swift.String]
    public init(language: Swift.String, modeSynonyms: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms, b: GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Mode : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let settings: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting]
    public let ordered: Swift.Bool
    public let synonyms: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms]
    public init(name: Swift.String, settings: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting], ordered: Swift.Bool, synonyms: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode, b: GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ModeSetting : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let modeNameKey: Swift.String
    public let modeValueKey: Swift.String
    public init(modeNameKey: Swift.String, modeValueKey: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting, b: GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait {
  public var supportsChangeModeSettingsCommand: Swift.Bool {
    get
  }
  public func changeModeSettings(updateModeSettings: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting]) async throws
  public func changeModeSettingsBatchable(updateModeSettings: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ChangeModeSettingsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedModes
    case currentModeSettings
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedModeSelectTrait {
  public var supportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode]> {
    get
  }
  public var currentModeSettings: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.ChangeModeSettingsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case updateModeSettings
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ChangeModeSettingsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ChangeModeSettingsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait {
  public static func changeModeSettings(updateModeSettings: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting]) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case language
    case settingSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms {
  public var language: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var settingSynonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case synonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var synonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.SettingSynonyms]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case language
    case modeSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms {
  public var language: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var modeSynonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case settings
    case ordered
    case synonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedModeSelectTrait.Mode {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var settings: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.Setting]> {
    get
  }
  public var ordered: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var synonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSynonyms]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case modeNameKey
    case modeValueKey
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedModeSelectTrait.ModeSetting {
  public var modeNameKey: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var modeValueKey: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedOperationalStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationZones) public var operationZones: [Swift.String]? {
      get
    }
    public var $operationZones: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeOperationZones) public var activeOperationZones: [Swift.String]? {
      get
    }
    public var $activeOperationZones: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentPhaseCountdownTimeSeconds) public var currentPhaseCountdownTimeSeconds: Swift.UInt32? {
      get
    }
    public var $currentPhaseCountdownTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minOperationDurationSeconds) public var minOperationDurationSeconds: Swift.UInt32? {
      get
    }
    public var $minOperationDurationSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxOperationDurationSeconds) public var maxOperationDurationSeconds: Swift.UInt32? {
      get
    }
    public var $maxOperationDurationSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($operationCompletionTimestamp) public var operationCompletionTimestamp: Swift.Int64? {
      get
    }
    public var $operationCompletionTimestamp: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedOperationalStateTrait, rhs: GoogleHomeTypes.Google.ExtendedOperationalStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public struct StartStopFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let isRunning: Swift.Bool?
      public init(isRunning: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent.Payload, b: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent, b: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PauseUnpauseFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let isPaused: Swift.Bool?
      public init(isPaused: Swift.Bool?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent.Payload, b: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent, b: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct StartStopErrorFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorCode: Swift.String?
      public init(errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent.Payload, b: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent, b: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public var supportsStartWithOperationZonesCommand: Swift.Bool {
    get
  }
  public func startWithOperationZones(operationZones: [Swift.String]) async throws
  public func startWithOperationZonesBatchable(operationZones: [Swift.String]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartWithOperationZonesCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public var supportsStartWithDurationCommand: Swift.Bool {
    get
  }
  public func startWithDuration(operationZones: [Swift.String], durationSeconds: Swift.UInt32) async throws
  public func startWithDurationBatchable(operationZones: [Swift.String], durationSeconds: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartWithDurationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case success
    case failure
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public struct OperationalStateFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsZones: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.OperationalStateFeature
    public static let supportsDuration: GoogleHomeTypes.Google.ExtendedOperationalStateTrait.OperationalStateFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ExtendedOperationalStateTrait.OperationalStateFeature
    public typealias Element = GoogleHomeTypes.Google.ExtendedOperationalStateTrait.OperationalStateFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationZones
    case activeOperationZones
    case currentPhaseCountdownTimeSeconds
    case minOperationDurationSeconds
    case maxOperationDurationSeconds
    case operationCompletionTimestamp
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public var operationZones: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var activeOperationZones: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var currentPhaseCountdownTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var minOperationDurationSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxOperationDurationSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var operationCompletionTimestamp: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case isRunning
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopFollowUpEvent {
  public var isRunning: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case isPaused
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedOperationalStateTrait.PauseUnpauseFollowUpEvent {
  public var isPaused: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartStopErrorFollowUpEvent {
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartWithOperationZonesCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationZones
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartWithOperationZonesCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartWithOperationZonesCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartWithDurationCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case operationZones
    case durationSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartWithDurationCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedOperationalStateTrait.StartWithDurationCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedOperationalStateTrait {
  public static func startWithOperationZones(operationZones: [Swift.String]) -> GoogleHomeSDK.AutomationCommand
  public static func startWithDuration(operationZones: [Swift.String], durationSeconds: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ExtendedPowerSourceTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($energyStorageDistanceUnitForUX) public var energyStorageDistanceUnitForUX: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DistanceUnit? {
      get
    }
    public var $energyStorageDistanceUnitForUX: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DistanceUnit> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($descriptiveCapacityRemaining) public var descriptiveCapacityRemaining: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining? {
      get
    }
    public var $descriptiveCapacityRemaining: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($capacityRemaining) public var capacityRemaining: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity]? {
      get
    }
    public var $capacityRemaining: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($capacityUntilFull) public var capacityUntilFull: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity]? {
      get
    }
    public var $capacityUntilFull: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isPluggedIn) public var isPluggedIn: Swift.Bool? {
      get
    }
    public var $isPluggedIn: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($chargeSpeed) public var chargeSpeed: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.ChargeSpeed? {
      get
    }
    public var $chargeSpeed: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.ChargeSpeed> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($batterySaverEnabled) public var batterySaverEnabled: Swift.Bool? {
      get
    }
    public var $batterySaverEnabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($energySource) public var energySource: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.EnergySource? {
      get
    }
    public var $energySource: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.EnergySource> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($usingBackupEnergySource) public var usingBackupEnergySource: Swift.Bool? {
      get
    }
    public var $usingBackupEnergySource: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedPowerSourceTrait, rhs: GoogleHomeTypes.Google.ExtendedPowerSourceTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public struct Capacity : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let rawValue: Swift.Int32
    public let unit: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.CapacityUnit
    public init(rawValue: Swift.Int32, unit: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.CapacityUnit)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity, b: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public struct BatteryStateChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let current: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining]?
      public init(priority: Swift.UInt32?, current: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining]?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent.Payload, b: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent, b: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct UsingBackUpEnergySourceEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public init(priority: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent.Payload, b: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent, b: GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public var supportsStartChargingCommand: Swift.Bool {
    get
  }
  public func startCharging() async throws
  public func startChargingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartChargingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public var supportsStopChargingCommand: Swift.Bool {
    get
  }
  public func stopCharging() async throws
  public func stopChargingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopChargingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public enum DistanceUnit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case kilometers
    case miles
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DistanceUnit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum DescriptiveCapacityRemaining : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case empty
    case criticallyLow
    case low
    case medium
    case high
    case full
    case ok
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum CapacityUnit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case miles
    case kilometers
    case kilowattHours
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedPowerSourceTrait.CapacityUnit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ChargeSpeed : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case slow
    case normal
    case rapid
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedPowerSourceTrait.ChargeSpeed
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum EnergySource : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case solar
    case battery
    case wire
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedPowerSourceTrait.EnergySource
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case energyStorageDistanceUnitForUX
    case descriptiveCapacityRemaining
    case capacityRemaining
    case capacityUntilFull
    case isPluggedIn
    case chargeSpeed
    case batterySaverEnabled
    case energySource
    case usingBackupEnergySource
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public var energyStorageDistanceUnitForUX: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DistanceUnit> {
    get
  }
  public var descriptiveCapacityRemaining: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining> {
    get
  }
  public var capacityRemaining: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity]> {
    get
  }
  public var capacityUntilFull: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity]> {
    get
  }
  public var isPluggedIn: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var chargeSpeed: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.ChargeSpeed> {
    get
  }
  public var batterySaverEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var energySource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.EnergySource> {
    get
  }
  public var usingBackupEnergySource: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case current
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedPowerSourceTrait.BatteryStateChangeEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedPowerSourceTrait.DescriptiveCapacityRemaining]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedPowerSourceTrait.UsingBackUpEnergySourceEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait {
  public static func startCharging() -> GoogleHomeSDK.AutomationCommand
  public static func stopCharging() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rawValue
    case unit
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedPowerSourceTrait.Capacity {
  public var rawValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var unit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedPowerSourceTrait.CapacityUnit> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedSmokeCoAlarmTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedEndOfServiceAlert) public var extendedEndOfServiceAlert: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum? {
      get
    }
    public var $extendedEndOfServiceAlert: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait, rhs: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait {
  public struct ExtendedEndOfServiceEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let current: [GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum]?
      public let expiryDate: Swift.Int64?
      public init(priority: Swift.UInt32?, current: [GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum]?, expiryDate: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent.Payload, b: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent, b: GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait {
  public enum ExtendedEndOfServiceEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case standard
    case expiringSoon
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extendedEndOfServiceAlert
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait {
  public var extendedEndOfServiceAlert: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case current
    case expiryDate
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var current: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedSmokeCoAlarmTrait.ExtendedEndOfServiceEnum]> {
    get
  }
  public var expiryDate: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedTemperatureControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureDisplayMode) public var temperatureDisplayMode: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureDisplayMode? {
      get
    }
    public var $temperatureDisplayMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureDisplayMode> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait, rhs: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait {
  public struct TemperatureSetpointReachedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let targetTemperatureReached: Swift.Bool?
      public let temperatureSetpointCelsius: Swift.Int16?
      public init(priority: Swift.Int32?, targetTemperatureReached: Swift.Bool?, temperatureSetpointCelsius: Swift.Int16?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent.Payload, b: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent, b: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TemperatureControlErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorCode: Swift.String?
      public init(errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent.Payload, b: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent, b: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait {
  public enum TemperatureDisplayMode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case celsius
    case fahrenheit
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureDisplayMode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case temperatureDisplayMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedTemperatureControlTrait {
  public var temperatureDisplayMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureDisplayMode> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case targetTemperatureReached
    case temperatureSetpointCelsius
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureSetpointReachedEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var targetTemperatureReached: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var temperatureSetpointCelsius: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedTemperatureControlTrait.TemperatureControlErrorEvent {
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ExtendedThermostatTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ExtendedThermostatTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.ExtendedThermostatTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.ExtendedThermostatTrait
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minHeatSafetySetpointLimit) public var minHeatSafetySetpointLimit: Swift.Int16? {
      get
    }
    public var $minHeatSafetySetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxHeatSafetySetpointLimit) public var maxHeatSafetySetpointLimit: Swift.Int16? {
      get
    }
    public var $maxHeatSafetySetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minCoolSafetySetpointLimit) public var minCoolSafetySetpointLimit: Swift.Int16? {
      get
    }
    public var $minCoolSafetySetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxCoolSafetySetpointLimit) public var maxCoolSafetySetpointLimit: Swift.Int16? {
      get
    }
    public var $maxCoolSafetySetpointLimit: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedSupportedModes) public var extendedSupportedModes: [GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode]? {
      get
    }
    public var $extendedSupportedModes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedRunningMode) public var extendedRunningMode: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedRunningMode? {
      get
    }
    public var $extendedRunningMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedRunningMode> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($presets) public var presets: [GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset]? {
      get
    }
    public var $presets: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxSetpointHoldSeconds) public var maxSetpointHoldSeconds: Swift.Int32? {
      get
    }
    public var $maxSetpointHoldSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetTemperatureTimestampSeconds) public var targetTemperatureTimestampSeconds: Swift.Int64? {
      get
    }
    public var $targetTemperatureTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activePresetHandle) public var activePresetHandle: Swift.String? {
      get
    }
    public var $activePresetHandle: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($averageLocalTemperature) public var averageLocalTemperature: Swift.Int16? {
      get
    }
    public var $averageLocalTemperature: GoogleHomeSDK.TraitAttribute<Swift.Int16> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($remoteTemperatureSensorIds) public var remoteTemperatureSensorIds: [Swift.String]? {
      get
    }
    public var $remoteTemperatureSensorIds: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxSettableThermostatTemperatureSensors) public var maxSettableThermostatTemperatureSensors: Swift.UInt32? {
      get
    }
    public var $maxSettableThermostatTemperatureSensors: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activeRemoteTemperatureSensorIds) public var activeRemoteTemperatureSensorIds: [Swift.String]? {
      get
    }
    public var $activeRemoteTemperatureSensorIds: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($temperatureSetpointHoldExpiryTimestampSeconds) public var temperatureSetpointHoldExpiryTimestampSeconds: Swift.Int64? {
      get
    }
    public var $temperatureSetpointHoldExpiryTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedSetpointChangeSource) public var extendedSetpointChangeSource: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedSetpointChangeSource? {
      get
    }
    public var $extendedSetpointChangeSource: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedSetpointChangeSource> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedProgrammingOperationMode) public var extendedProgrammingOperationMode: Swift.UInt32? {
      get
    }
    public var $extendedProgrammingOperationMode: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($extendedSystemMode) public var extendedSystemMode: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode? {
      get
    }
    public var $extendedSystemMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedThermostatTrait, rhs: GoogleHomeTypes.Google.ExtendedThermostatTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ExtendedThermostatTrait.Attributes, rhs: GoogleHomeTypes.Google.ExtendedThermostatTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var activePresetHandleIsSet: Swift.Bool {
      get
    }
    final public func setActivePresetHandle(_ value: Swift.String)
    final public func clearActivePresetHandle()
    final public var activeRemoteTemperatureSensorIdsIsSet: Swift.Bool {
      get
    }
    final public func setActiveRemoteTemperatureSensorIds(_ value: [Swift.String])
    final public func clearActiveRemoteTemperatureSensorIds()
    final public var extendedSystemModeIsSet: Swift.Bool {
      get
    }
    final public func setExtendedSystemMode(_ value: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode)
    final public func clearExtendedSystemMode()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public struct PresetSynonyms : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let language: Swift.String
    public let synonyms: [Swift.String]
    public init(language: Swift.String, synonyms: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms, b: GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Preset : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let presetHandle: Swift.String
    public let presetScenario: GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetScenario
    public let presetMaxHoldSeconds: Swift.Int32
    public let names: [GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms]
    public init(presetHandle: Swift.String, presetScenario: GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetScenario, presetMaxHoldSeconds: Swift.Int32, names: [GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset, b: GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public var supportsNotifySensorStateChangeCommand: Swift.Bool {
    get
  }
  public func notifySensorStateChange(sensorType: GoogleHomeTypes.Google.ExtendedThermostatTrait.SensorType, alarmType: GoogleHomeTypes.Google.ExtendedThermostatTrait.AlarmType) async throws
  public func notifySensorStateChangeBatchable(sensorType: GoogleHomeTypes.Google.ExtendedThermostatTrait.SensorType, alarmType: GoogleHomeTypes.Google.ExtendedThermostatTrait.AlarmType) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct NotifySensorStateChangeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public enum ExtendedThermostatMode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case standard
    case on
    case purifier
    case eco
    case smarthomeAuto
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ExtendedRunningMode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case standard
    case fanOnly
    case purifier
    case dry
    case auto
    case on
    case heatCool
    case eco
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedRunningMode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PresetScenario : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case comfort
    case eco
    case sleep
    case wake
    case home
    case away
    case occupied
    case unoccupied
    case vacation
    case userDefined
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetScenario
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ExtendedSetpointChangeSource : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case energyProgram
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedSetpointChangeSource
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum SensorType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case smoke
    case carbonMonoxide
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedThermostatTrait.SensorType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum AlarmType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ExtendedThermostatTrait.AlarmType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public struct ExtendedThermostatFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let presets: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature
    public static let remoteTemperatureSensing: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature
    public typealias Element = GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature
    public typealias RawValue = Swift.UInt32
  }
  public struct ExtendedProgrammingOperationMode : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let safetyOverride: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedProgrammingOperationMode
    public static let preconditioningSchedule: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedProgrammingOperationMode
    public static let preconditioningEnergyProgram: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedProgrammingOperationMode
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedProgrammingOperationMode
    public typealias Element = GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedProgrammingOperationMode
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case minHeatSafetySetpointLimit
    case maxHeatSafetySetpointLimit
    case minCoolSafetySetpointLimit
    case maxCoolSafetySetpointLimit
    case extendedSupportedModes
    case extendedRunningMode
    case presets
    case maxSetpointHoldSeconds
    case targetTemperatureTimestampSeconds
    case activePresetHandle
    case averageLocalTemperature
    case remoteTemperatureSensorIds
    case maxSettableThermostatTemperatureSensors
    case activeRemoteTemperatureSensorIds
    case temperatureSetpointHoldExpiryTimestampSeconds
    case extendedSetpointChangeSource
    case extendedProgrammingOperationMode
    case extendedSystemMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedThermostatTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedThermostatTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public var minHeatSafetySetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var maxHeatSafetySetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var minCoolSafetySetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var maxCoolSafetySetpointLimit: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var extendedSupportedModes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode]> {
    get
  }
  public var extendedRunningMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedRunningMode> {
    get
  }
  public var presets: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset]> {
    get
  }
  public var maxSetpointHoldSeconds: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var targetTemperatureTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var activePresetHandle: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var averageLocalTemperature: GoogleHomeSDK.TypedExpression<Swift.Int16> {
    get
  }
  public var remoteTemperatureSensorIds: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var maxSettableThermostatTemperatureSensors: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var activeRemoteTemperatureSensorIds: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var temperatureSetpointHoldExpiryTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var extendedSetpointChangeSource: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedSetpointChangeSource> {
    get
  }
  public var extendedProgrammingOperationMode: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var extendedSystemMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.ExtendedThermostatTrait {
  final public func setActivePresetHandle(_ value: Swift.String)
  final public func setActiveRemoteTemperatureSensorIds(_ value: [Swift.String])
  final public func setExtendedSystemMode(_ value: GoogleHomeTypes.Google.ExtendedThermostatTrait.ExtendedThermostatMode)
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait.NotifySensorStateChangeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sensorType
    case alarmType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedThermostatTrait.NotifySensorStateChangeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedThermostatTrait.NotifySensorStateChangeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait {
  public static func notifySensorStateChange(sensorType: GoogleHomeTypes.Google.ExtendedThermostatTrait.SensorType, alarmType: GoogleHomeTypes.Google.ExtendedThermostatTrait.AlarmType) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case language
    case synonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms {
  public var language: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var synonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case presetHandle
    case presetScenario
    case presetMaxHoldSeconds
    case names
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ExtendedThermostatTrait.Preset {
  public var presetHandle: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var presetScenario: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetScenario> {
    get
  }
  public var presetMaxHoldSeconds: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var names: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ExtendedThermostatTrait.PresetSynonyms]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct FillTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.FillTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.FillTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.FillTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availableFillLevels) public var availableFillLevels: GoogleHomeTypes.Google.FillTrait.AvailableFillLevels? {
      get
    }
    public var $availableFillLevels: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.FillTrait.AvailableFillLevels> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isFilled) public var isFilled: Swift.Bool? {
      get
    }
    public var $isFilled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFillLevel) public var currentFillLevel: Swift.String? {
      get
    }
    public var $currentFillLevel: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentFillPercent) public var currentFillPercent: Swift.Float32? {
      get
    }
    public var $currentFillPercent: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.FillTrait.FillFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.FillTrait.FillFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.FillTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.FillTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.FillTrait, rhs: GoogleHomeTypes.Google.FillTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.FillTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.FillTrait.Attributes, rhs: GoogleHomeTypes.Google.FillTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.FillTrait {
  public struct LevelSynonym : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let levelSynonym: [Swift.String]
    public let lang: Swift.String
    public init(levelSynonym: [Swift.String], lang: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.FillTrait.LevelSynonym, b: GoogleHomeTypes.Google.FillTrait.LevelSynonym) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Level : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let levelName: Swift.String
    public let levelValues: [GoogleHomeTypes.Google.FillTrait.LevelSynonym]
    public init(levelName: Swift.String, levelValues: [GoogleHomeTypes.Google.FillTrait.LevelSynonym])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.FillTrait.Level, b: GoogleHomeTypes.Google.FillTrait.Level) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct AvailableFillLevels : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let levels: [GoogleHomeTypes.Google.FillTrait.Level]
    public let ordered: Swift.Bool
    public init(levels: [GoogleHomeTypes.Google.FillTrait.Level], ordered: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.FillTrait.AvailableFillLevels, b: GoogleHomeTypes.Google.FillTrait.AvailableFillLevels) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.FillTrait {
  public var supportsFillCommand: Swift.Bool {
    get
  }
  public func fill(fill: Swift.Bool, fillLevel: Swift.String, fillPercent: Swift.Float32) async throws
  public func fillBatchable(fill: Swift.Bool, fillLevel: Swift.String, fillPercent: Swift.Float32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct FillCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.FillTrait {
  public struct FillFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsFillPercent: GoogleHomeTypes.Google.FillTrait.FillFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.FillTrait.FillFeature
    public typealias Element = GoogleHomeTypes.Google.FillTrait.FillFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.FillTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case availableFillLevels
    case isFilled
    case currentFillLevel
    case currentFillPercent
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FillTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FillTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.FillTrait {
  public var availableFillLevels: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FillTrait.AvailableFillLevels> {
    get
  }
  public var isFilled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var currentFillLevel: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var currentFillPercent: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FillTrait.FillFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.FillTrait.FillCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case fill
    case fillLevel
    case fillPercent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FillTrait.FillCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FillTrait.FillCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.FillTrait {
  public static func fill(fill: Swift.Bool, fillLevel: Swift.String, fillPercent: Swift.Float32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.FillTrait.LevelSynonym {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case levelSynonym
    case lang
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FillTrait.LevelSynonym.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FillTrait.LevelSynonym.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.FillTrait.LevelSynonym {
  public var levelSynonym: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var lang: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.FillTrait.Level {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case levelName
    case levelValues
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FillTrait.Level.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FillTrait.Level.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.FillTrait.Level {
  public var levelName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var levelValues: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.FillTrait.LevelSynonym]> {
    get
  }
}
extension GoogleHomeTypes.Google.FillTrait.AvailableFillLevels {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case levels
    case ordered
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FillTrait.AvailableFillLevels.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FillTrait.AvailableFillLevels.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.FillTrait.AvailableFillLevels {
  public var levels: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.FillTrait.Level]> {
    get
  }
  public var ordered: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct FilterMonitoringTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.FilterMonitoringTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($condition) public var condition: Swift.UInt32? {
      get
    }
    public var $condition: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($changeIndicationCleanliness) public var changeIndicationCleanliness: GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication? {
      get
    }
    public var $changeIndicationCleanliness: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($changeIndicationLifetime) public var changeIndicationLifetime: GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication? {
      get
    }
    public var $changeIndicationLifetime: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.FilterMonitoringTrait, rhs: GoogleHomeTypes.Google.FilterMonitoringTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.FilterMonitoringTrait.Attributes, rhs: GoogleHomeTypes.Google.FilterMonitoringTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait {
  public struct FilterChangeIndicationCleanlinessEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let changeIndication: GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication?
      public init(priority: Swift.Int32?, changeIndication: GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent.Payload, b: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent, b: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct FilterChangeIndicationLifetimeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let changeIndication: GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication?
      public init(priority: Swift.Int32?, changeIndication: GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent.Payload, b: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent, b: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct FilterMonitoringSensorErrorEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let errorCode: Swift.String?
      public init(priority: Swift.Int32?, errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent.Payload, b: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent, b: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait {
  public enum ChangeIndication : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait {
  public struct FilterMonitoringFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let warning: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature
    public static let condition: GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature
    public typealias Element = GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case condition
    case changeIndicationCleanliness
    case changeIndicationLifetime
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FilterMonitoringTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FilterMonitoringTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.FilterMonitoringTrait {
  public var condition: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var changeIndicationCleanliness: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication> {
    get
  }
  public var changeIndicationLifetime: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case changeIndication
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationCleanlinessEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var changeIndication: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication> {
    get
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case changeIndication
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.FilterMonitoringTrait.FilterChangeIndicationLifetimeEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var changeIndication: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.FilterMonitoringTrait.ChangeIndication> {
    get
  }
}
extension GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.FilterMonitoringTrait.FilterMonitoringSensorErrorEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ForceReadTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ForceReadTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ForceReadTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ForceReadTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ForceReadTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ForceReadTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ForceReadTrait, rhs: GoogleHomeTypes.Google.ForceReadTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ForceReadTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ForceReadTrait.Attributes, rhs: GoogleHomeTypes.Google.ForceReadTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ForceReadTrait {
  public typealias ForceReadCommandCommandResponse = GoogleHomeTypes.Google.ForceReadTrait.ForceReadCommandCommand.Response
  public var supportsForceReadCommandCommand: Swift.Bool {
    get
  }
  public func forceReadCommand(trait_id: Swift.String) async throws -> GoogleHomeTypes.Google.ForceReadTrait.ForceReadCommandCommandResponse
  public func forceReadCommandBatchable(trait_id: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.ForceReadTrait.ForceReadCommandCommandResponse>
  public struct ForceReadCommandCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let local_version: Swift.UInt64
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.ForceReadTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ForceReadTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ForceReadTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ForceReadTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ForceReadTrait.ForceReadCommandCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case trait_id
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ForceReadTrait.ForceReadCommandCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ForceReadTrait.ForceReadCommandCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.ForceReadTrait {
  public static func forceReadCommand(trait_id: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct GeofenceTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.GeofenceTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.GeofenceTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentGeofenceRadius) public var currentGeofenceRadius: Swift.Float64? {
      get
    }
    public var $currentGeofenceRadius: GoogleHomeSDK.TraitAttribute<Swift.Float64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($agentId) public var agentId: Swift.String? {
      get
    }
    public var $agentId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($structureId) public var structureId: Swift.String? {
      get
    }
    public var $structureId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($durationSinceRebootSeconds) public var durationSinceRebootSeconds: Swift.Int64? {
      get
    }
    public var $durationSinceRebootSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($addressId) public var addressId: Swift.String? {
      get
    }
    public var $addressId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedGeofenceRadii) public var supportedGeofenceRadii: [Swift.Float64]? {
      get
    }
    public var $supportedGeofenceRadii: GoogleHomeSDK.TraitAttribute<[Swift.Float64]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($agentDeviceId) public var agentDeviceId: Swift.String? {
      get
    }
    public var $agentDeviceId: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clientEnvironment) public var clientEnvironment: GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment? {
      get
    }
    public var $clientEnvironment: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($locationState) public var locationState: GoogleHomeTypes.Google.GeofenceTrait.LocationState? {
      get
    }
    public var $locationState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.GeofenceTrait.LocationState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($observedTimestampSeconds) public var observedTimestampSeconds: Swift.Int64? {
      get
    }
    public var $observedTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($localizedEventTime) public var localizedEventTime: Swift.String? {
      get
    }
    public var $localizedEventTime: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($accuracyInMeters) public var accuracyInMeters: Swift.Float64? {
      get
    }
    public var $accuracyInMeters: GoogleHomeSDK.TraitAttribute<Swift.Float64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.GeofenceTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.GeofenceTrait, rhs: GoogleHomeTypes.Google.GeofenceTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.GeofenceTrait.Attributes, rhs: GoogleHomeTypes.Google.GeofenceTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait {
  public struct AndroidInfo : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let appReleaseVersion: Swift.String
    public let sdkVersion: Swift.Int32
    public init(appReleaseVersion: Swift.String, sdkVersion: Swift.Int32)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo, b: GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct IOSInfo : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let appReleaseVersion: Swift.String
    public let osMajorVersion: Swift.String
    public let osFullVersion: Swift.String
    public init(appReleaseVersion: Swift.String, osMajorVersion: Swift.String, osFullVersion: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.GeofenceTrait.IOSInfo, b: GoogleHomeTypes.Google.GeofenceTrait.IOSInfo) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ClientEnvironment : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let androidInfo: GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo
    public let iOSInfo: GoogleHomeTypes.Google.GeofenceTrait.IOSInfo
    public init(androidInfo: GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo, iOSInfo: GoogleHomeTypes.Google.GeofenceTrait.IOSInfo)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment, b: GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait {
  public enum LocationState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case locationStateUnspecified
    case locationStateInside
    case locationStateOutside
    case locationStateEntered
    case locationStateExited
    case locationStateUnknown
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.GeofenceTrait.LocationState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentGeofenceRadius
    case agentId
    case structureId
    case durationSinceRebootSeconds
    case addressId
    case supportedGeofenceRadii
    case agentDeviceId
    case clientEnvironment
    case locationState
    case observedTimestampSeconds
    case localizedEventTime
    case accuracyInMeters
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.GeofenceTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.GeofenceTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.GeofenceTrait {
  public var currentGeofenceRadius: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var agentId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var structureId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var durationSinceRebootSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var addressId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var supportedGeofenceRadii: GoogleHomeSDK.TypedExpression<[Swift.Float64]> {
    get
  }
  public var agentDeviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var clientEnvironment: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment> {
    get
  }
  public var locationState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.GeofenceTrait.LocationState> {
    get
  }
  public var observedTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var localizedEventTime: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var accuracyInMeters: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case appReleaseVersion
    case sdkVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo {
  public var appReleaseVersion: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var sdkVersion: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait.IOSInfo {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case appReleaseVersion
    case osMajorVersion
    case osFullVersion
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.GeofenceTrait.IOSInfo.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.GeofenceTrait.IOSInfo.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.GeofenceTrait.IOSInfo {
  public var appReleaseVersion: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var osMajorVersion: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var osFullVersion: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case androidInfo
    case iOSInfo
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.GeofenceTrait.ClientEnvironment {
  public var androidInfo: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.GeofenceTrait.AndroidInfo> {
    get
  }
  public var iOSInfo: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.GeofenceTrait.IOSInfo> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct InterconnectTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.InterconnectTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.InterconnectTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.InterconnectTrait
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($credentialStatus) public var credentialStatus: GoogleHomeTypes.Google.InterconnectTrait.CredentialStatus? {
      get
    }
    public var $credentialStatus: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.InterconnectTrait.CredentialStatus> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($threadUUID) public var threadUUID: Swift.String? {
      get
    }
    public var $threadUUID: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.InterconnectTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.InterconnectTrait, rhs: GoogleHomeTypes.Google.InterconnectTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.InterconnectTrait.Attributes, rhs: GoogleHomeTypes.Google.InterconnectTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var credentialStatusIsSet: Swift.Bool {
      get
    }
    final public func setCredentialStatus(_ value: GoogleHomeTypes.Google.InterconnectTrait.CredentialStatus)
    final public func clearCredentialStatus()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  public var supportsSetInterconnectCredentialsCommand: Swift.Bool {
    get
  }
  public func setInterconnectCredentials(threadPanId: Swift.Int64, networkKey: Swift.String, networkChannel: Swift.Int64) async throws
  public func setInterconnectCredentialsBatchable(threadPanId: Swift.Int64, networkKey: Swift.String, networkChannel: Swift.Int64) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetInterconnectCredentialsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  public var supportsClearInterconnectCredentialsCommand: Swift.Bool {
    get
  }
  public func clearInterconnectCredentials() async throws
  public func clearInterconnectCredentialsBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ClearInterconnectCredentialsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  public enum CredentialStatus : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case empty
    case setupCompleted
    case invalidated
    case clearRequested
    case cleared
    case credentialUpdatePending
    case googleToPartnerDeliveryPending
    case partnerToDeviceUpdatePending
    case googlePartnerDeliveryPending
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.InterconnectTrait.CredentialStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case credentialStatus
    case threadUUID
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.InterconnectTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.InterconnectTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.InterconnectTrait {
  public var credentialStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.InterconnectTrait.CredentialStatus> {
    get
  }
  public var threadUUID: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.InterconnectTrait {
  final public func setCredentialStatus(_ value: GoogleHomeTypes.Google.InterconnectTrait.CredentialStatus)
}
extension GoogleHomeTypes.Google.InterconnectTrait.SetInterconnectCredentialsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case threadPanId
    case networkKey
    case networkChannel
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.InterconnectTrait.SetInterconnectCredentialsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.InterconnectTrait.SetInterconnectCredentialsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.InterconnectTrait {
  public static func setInterconnectCredentials(threadPanId: Swift.Int64, networkKey: Swift.String, networkChannel: Swift.Int64) -> GoogleHomeSDK.AutomationCommand
  public static func clearInterconnectCredentials() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct LeafWetnessMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.LeafWetnessMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.LeafWetnessMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.UInt32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.UInt32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.UInt32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt32? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.LeafWetnessMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait, rhs: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LeafWetnessMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LeafWetnessMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.LeafWetnessMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct LightEffectsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.LightEffectsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultSleepDurationSeconds) public var defaultSleepDurationSeconds: Swift.UInt32? {
      get
    }
    public var $defaultSleepDurationSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultWakeDurationSeconds) public var defaultWakeDurationSeconds: Swift.UInt32? {
      get
    }
    public var $defaultWakeDurationSeconds: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($effectEndTimestampSeconds) public var effectEndTimestampSeconds: Swift.Int64? {
      get
    }
    public var $effectEndTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pulseEffectSet) public var pulseEffectSet: Swift.Bool? {
      get
    }
    public var $pulseEffectSet: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sleepEffectSet) public var sleepEffectSet: Swift.Bool? {
      get
    }
    public var $sleepEffectSet: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($wakeEffectSet) public var wakeEffectSet: Swift.Bool? {
      get
    }
    public var $wakeEffectSet: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.LightEffectsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LightEffectsTrait, rhs: GoogleHomeTypes.Google.LightEffectsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LightEffectsTrait.Attributes, rhs: GoogleHomeTypes.Google.LightEffectsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public struct SpectrumHSV : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let saturation: Swift.Float64
    public let hue: Swift.Float64
    public let value: Swift.Float64
    public init(saturation: Swift.Float64, hue: Swift.Float64, value: Swift.Float64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV, b: GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Color : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let temperature: Swift.UInt32
    public let spectrumHSV: GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV
    public let spectrumRGB: Swift.UInt64
    public init(name: Swift.String, temperature: Swift.UInt32, spectrumHSV: GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV, spectrumRGB: Swift.UInt64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.LightEffectsTrait.Color, b: GoogleHomeTypes.Google.LightEffectsTrait.Color) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public var supportsPulseEffectSetCommand: Swift.Bool {
    get
  }
  public func pulseEffectSet(durationSeconds: Swift.UInt32, color: GoogleHomeTypes.Google.LightEffectsTrait.Color) async throws
  public func pulseEffectSetBatchable(durationSeconds: Swift.UInt32, color: GoogleHomeTypes.Google.LightEffectsTrait.Color) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct PulseEffectSetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public var supportsSleepEffectSetCommand: Swift.Bool {
    get
  }
  public func sleepEffectSet(durationSeconds: Swift.UInt32) async throws
  public func sleepEffectSetBatchable(durationSeconds: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SleepEffectSetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public var supportsWakeEffectSetCommand: Swift.Bool {
    get
  }
  public func wakeEffectSet(durationSeconds: Swift.UInt32) async throws
  public func wakeEffectSetBatchable(durationSeconds: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct WakeEffectSetCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public var supportsStopEffectCommand: Swift.Bool {
    get
  }
  public func stopEffect() async throws
  public func stopEffectBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopEffectCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public struct LightEffectsFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let pulse: GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature
    public static let sleep: GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature
    public static let wake: GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature
    public typealias Element = GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case defaultSleepDurationSeconds
    case defaultWakeDurationSeconds
    case effectEndTimestampSeconds
    case pulseEffectSet
    case sleepEffectSet
    case wakeEffectSet
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LightEffectsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LightEffectsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.LightEffectsTrait {
  public var defaultSleepDurationSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var defaultWakeDurationSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var effectEndTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var pulseEffectSet: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var sleepEffectSet: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var wakeEffectSet: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.LightEffectsTrait.LightEffectsFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait.PulseEffectSetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case durationSeconds
    case color
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LightEffectsTrait.PulseEffectSetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LightEffectsTrait.PulseEffectSetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.LightEffectsTrait.SleepEffectSetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case durationSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LightEffectsTrait.SleepEffectSetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LightEffectsTrait.SleepEffectSetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.LightEffectsTrait.WakeEffectSetCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case durationSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LightEffectsTrait.WakeEffectSetCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LightEffectsTrait.WakeEffectSetCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.LightEffectsTrait {
  public static func pulseEffectSet(durationSeconds: Swift.UInt32, color: GoogleHomeTypes.Google.LightEffectsTrait.Color) -> GoogleHomeSDK.AutomationCommand
  public static func sleepEffectSet(durationSeconds: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
  public static func wakeEffectSet(durationSeconds: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
  public static func stopEffect() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case saturation
    case hue
    case value
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV {
  public var saturation: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var hue: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var value: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
}
extension GoogleHomeTypes.Google.LightEffectsTrait.Color {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case temperature
    case spectrumHSV
    case spectrumRGB
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LightEffectsTrait.Color.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LightEffectsTrait.Color.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.LightEffectsTrait.Color {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var temperature: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var spectrumHSV: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.LightEffectsTrait.SpectrumHSV> {
    get
  }
  public var spectrumRGB: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct LocatorTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.LocatorTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.LocatorTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.LocatorTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.LocatorTrait.LocatorFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.LocatorTrait.LocatorFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LocatorTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.LocatorTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LocatorTrait, rhs: GoogleHomeTypes.Google.LocatorTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LocatorTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LocatorTrait.Attributes, rhs: GoogleHomeTypes.Google.LocatorTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LocatorTrait {
  public var supportsLocateCommand: Swift.Bool {
    get
  }
  public func locate(lang: Swift.String, reportLocation: Swift.Bool) async throws
  public func locateBatchable(lang: Swift.String, reportLocation: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct LocateCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LocatorTrait {
  public var supportsSilenceCommand: Swift.Bool {
    get
  }
  public func silence() async throws
  public func silenceBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SilenceCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LocatorTrait {
  public struct LocatorFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let isSilenceable: GoogleHomeTypes.Google.LocatorTrait.LocatorFeature
    public static let isRingable: GoogleHomeTypes.Google.LocatorTrait.LocatorFeature
    public static let reportsLocation: GoogleHomeTypes.Google.LocatorTrait.LocatorFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.LocatorTrait.LocatorFeature
    public typealias Element = GoogleHomeTypes.Google.LocatorTrait.LocatorFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.LocatorTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LocatorTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LocatorTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.LocatorTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.LocatorTrait.LocatorFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.LocatorTrait.LocateCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lang
    case reportLocation
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LocatorTrait.LocateCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LocatorTrait.LocateCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.LocatorTrait {
  public static func locate(lang: Swift.String, reportLocation: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func silence() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct LockUnlockTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.LockUnlockTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lockState) public var lockState: GoogleHomeTypes.Google.LockUnlockTrait.LockState? {
      get
    }
    public var $lockState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.LockUnlockTrait.LockState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.LockUnlockTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LockUnlockTrait, rhs: GoogleHomeTypes.Google.LockUnlockTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.LockUnlockTrait.Attributes, rhs: GoogleHomeTypes.Google.LockUnlockTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public struct LockFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.LockUnlockTrait.LockFollowUpEvent.Payload, b: GoogleHomeTypes.Google.LockUnlockTrait.LockFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.LockUnlockTrait.LockFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.LockUnlockTrait.LockFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.LockUnlockTrait.LockFollowUpEvent, b: GoogleHomeTypes.Google.LockUnlockTrait.LockFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct UnlockFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.LockUnlockTrait.UnlockFollowUpEvent.Payload, b: GoogleHomeTypes.Google.LockUnlockTrait.UnlockFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.LockUnlockTrait.UnlockFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.LockUnlockTrait.UnlockFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.LockUnlockTrait.UnlockFollowUpEvent, b: GoogleHomeTypes.Google.LockUnlockTrait.UnlockFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LockUnlockErrorFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorCode: Swift.String?
      public init(errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent.Payload, b: GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent, b: GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public var supportsLockCommand: Swift.Bool {
    get
  }
  public func lock(followUpToken: Swift.String) async throws
  public func lockBatchable(followUpToken: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct LockCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public var supportsUnlockCommand: Swift.Bool {
    get
  }
  public func unlock(followUpToken: Swift.String) async throws
  public func unlockBatchable(followUpToken: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UnlockCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public enum LockState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case locked
    case unlocked
    case jammed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.LockUnlockTrait.LockState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case success
    case failure
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.LockUnlockTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lockState
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LockUnlockTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LockUnlockTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.LockUnlockTrait {
  public var lockState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.LockUnlockTrait.LockState> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.LockUnlockTrait.LockUnlockErrorFollowUpEvent {
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.LockUnlockTrait.LockCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case followUpToken
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LockUnlockTrait.LockCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LockUnlockTrait.LockCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.LockUnlockTrait.UnlockCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case followUpToken
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.LockUnlockTrait.UnlockCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.LockUnlockTrait.UnlockCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.LockUnlockTrait {
  public static func lock(followUpToken: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func unlock(followUpToken: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct MatterIcdInteractionTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($state) public var state: GoogleHomeTypes.Google.MatterIcdInteractionTrait.LITState? {
      get
    }
    public var $state: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.MatterIcdInteractionTrait.LITState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MatterIcdInteractionTrait, rhs: GoogleHomeTypes.Google.MatterIcdInteractionTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attributes, rhs: GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public struct DeviceNowActiveEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.MatterIcdInteractionTrait.DeviceNowActiveEvent.Payload, b: GoogleHomeTypes.Google.MatterIcdInteractionTrait.DeviceNowActiveEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.MatterIcdInteractionTrait.DeviceNowActiveEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.MatterIcdInteractionTrait.DeviceNowActiveEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.MatterIcdInteractionTrait.DeviceNowActiveEvent, b: GoogleHomeTypes.Google.MatterIcdInteractionTrait.DeviceNowActiveEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public var supportsStayActiveCommand: Swift.Bool {
    get
  }
  public func stayActive(extendActiveOnAnyInteraction: Swift.Bool, durationSeconds: Swift.UInt32) async throws
  public func stayActiveBatchable(extendActiveOnAnyInteraction: Swift.Bool, durationSeconds: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StayActiveCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public enum LITState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case active
    case inactive
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.MatterIcdInteractionTrait.LITState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case state
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MatterIcdInteractionTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public var state: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MatterIcdInteractionTrait.LITState> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait.StayActiveCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case extendActiveOnAnyInteraction
    case durationSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MatterIcdInteractionTrait.StayActiveCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MatterIcdInteractionTrait.StayActiveCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.MatterIcdInteractionTrait {
  public static func stayActive(extendActiveOnAnyInteraction: Swift.Bool, durationSeconds: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct MatterUpgradableTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.MatterUpgradableTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MatterUpgradableTrait, rhs: GoogleHomeTypes.Google.MatterUpgradableTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MatterUpgradableTrait.Attributes, rhs: GoogleHomeTypes.Google.MatterUpgradableTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait {
  public var supportsInitiateMatterUpgradeCommand: Swift.Bool {
    get
  }
  public func initiateMatterUpgrade() async throws
  public func initiateMatterUpgradeBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct InitiateMatterUpgradeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MatterUpgradableTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MatterUpgradableTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.MatterUpgradableTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.MatterUpgradableTrait {
  public static func initiateMatterUpgrade() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct Max2FilterMonitoringTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($condition) public var condition: Swift.UInt32? {
      get
    }
    public var $condition: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($changeIndication) public var changeIndication: GoogleHomeTypes.Google.Max2FilterMonitoringTrait.ChangeIndication? {
      get
    }
    public var $changeIndication: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.Max2FilterMonitoringTrait.ChangeIndication> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.Max2FilterMonitoringTrait, rhs: GoogleHomeTypes.Google.Max2FilterMonitoringTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attributes, rhs: GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait {
  public enum ChangeIndication : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.Max2FilterMonitoringTrait.ChangeIndication
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait {
  public struct FilterMonitoringFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let warning: GoogleHomeTypes.Google.Max2FilterMonitoringTrait.FilterMonitoringFeature
    public static let condition: GoogleHomeTypes.Google.Max2FilterMonitoringTrait.FilterMonitoringFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.Max2FilterMonitoringTrait.FilterMonitoringFeature
    public typealias Element = GoogleHomeTypes.Google.Max2FilterMonitoringTrait.FilterMonitoringFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.Max2FilterMonitoringTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case condition
    case changeIndication
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.Max2FilterMonitoringTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.Max2FilterMonitoringTrait {
  public var condition: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var changeIndication: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.Max2FilterMonitoringTrait.ChangeIndication> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct MediaActivityStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.MediaActivityStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($activityState) public var activityState: GoogleHomeTypes.Google.MediaActivityStateTrait.ActivityState? {
      get
    }
    public var $activityState: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.MediaActivityStateTrait.ActivityState> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MediaActivityStateTrait, rhs: GoogleHomeTypes.Google.MediaActivityStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MediaActivityStateTrait.Attributes, rhs: GoogleHomeTypes.Google.MediaActivityStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait {
  public enum ActivityState : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case inactive
    case standby
    case active
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.MediaActivityStateTrait.ActivityState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MediaActivityStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case activityState
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MediaActivityStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MediaActivityStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.MediaActivityStateTrait {
  public var activityState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MediaActivityStateTrait.ActivityState> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct MeterStateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.MeterStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedMeterStates) public var supportedMeterStates: [GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState]? {
      get
    }
    public var $supportedMeterStates: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentMeterStateData) public var currentMeterStateData: [GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData]? {
      get
    }
    public var $currentMeterStateData: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.MeterStateTrait.MeterStateFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.MeterStateTrait.MeterStateFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.MeterStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MeterStateTrait, rhs: GoogleHomeTypes.Google.MeterStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MeterStateTrait.Attributes, rhs: GoogleHomeTypes.Google.MeterStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public struct CurrentMeterStateData : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let resourceType: GoogleHomeTypes.Google.MeterStateTrait.ResourceType
    public let collectionType: GoogleHomeTypes.Google.MeterStateTrait.CollectionType
    public let collectionScope: GoogleHomeTypes.Google.MeterStateTrait.CollectionScope
    public let startTimeUnixTimestampSeconds: Swift.Int64
    public let endTimeUnixTimestampSeconds: Swift.Int64
    public let rawValue: Swift.Float32
    public init(resourceType: GoogleHomeTypes.Google.MeterStateTrait.ResourceType, collectionType: GoogleHomeTypes.Google.MeterStateTrait.CollectionType, collectionScope: GoogleHomeTypes.Google.MeterStateTrait.CollectionScope, startTimeUnixTimestampSeconds: Swift.Int64, endTimeUnixTimestampSeconds: Swift.Int64, rawValue: Swift.Float32)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData, b: GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SupportedMeterState : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let resourceType: GoogleHomeTypes.Google.MeterStateTrait.ResourceType
    public let collectionType: GoogleHomeTypes.Google.MeterStateTrait.CollectionType
    public let unit: GoogleHomeTypes.Google.MeterStateTrait.MeasurementUnit
    public let collectionScope: GoogleHomeTypes.Google.MeterStateTrait.CollectionScope
    public let tolerance: Swift.Float32
    public let cadenceSeconds: Swift.UInt32
    public init(resourceType: GoogleHomeTypes.Google.MeterStateTrait.ResourceType, collectionType: GoogleHomeTypes.Google.MeterStateTrait.CollectionType, unit: GoogleHomeTypes.Google.MeterStateTrait.MeasurementUnit, collectionScope: GoogleHomeTypes.Google.MeterStateTrait.CollectionScope, tolerance: Swift.Float32, cadenceSeconds: Swift.UInt32)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState, b: GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct MeterStates : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let resourceType: GoogleHomeTypes.Google.MeterStateTrait.ResourceType
    public let collectionType: GoogleHomeTypes.Google.MeterStateTrait.CollectionType
    public let collectionScope: GoogleHomeTypes.Google.MeterStateTrait.CollectionScope
    public init(resourceType: GoogleHomeTypes.Google.MeterStateTrait.ResourceType, collectionType: GoogleHomeTypes.Google.MeterStateTrait.CollectionType, collectionScope: GoogleHomeTypes.Google.MeterStateTrait.CollectionScope)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.MeterStateTrait.MeterStates, b: GoogleHomeTypes.Google.MeterStateTrait.MeterStates) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public var supportsFetchMeterStateHistoryCommand: Swift.Bool {
    get
  }
  public func fetchMeterStateHistory(startTimeUnixTimestampSeconds: Swift.Int64, endTimeUnixTimestampSeconds: Swift.Int64, meterStates: [GoogleHomeTypes.Google.MeterStateTrait.MeterStates]) async throws
  public func fetchMeterStateHistoryBatchable(startTimeUnixTimestampSeconds: Swift.Int64, endTimeUnixTimestampSeconds: Swift.Int64, meterStates: [GoogleHomeTypes.Google.MeterStateTrait.MeterStates]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct FetchMeterStateHistoryCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public enum CollectionType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case measured
    case estimated
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.MeterStateTrait.CollectionType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case kilowattHours
    case cubicMeters
    case btus
    case therms
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.MeterStateTrait.MeasurementUnit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum CollectionScope : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case `self`
    case connectedDevice
    case aggregate
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.MeterStateTrait.CollectionScope
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ResourceType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case electricity
    case water
    case naturalGas
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.MeterStateTrait.ResourceType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public struct MeterStateFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let meterStateHistoryFetching: GoogleHomeTypes.Google.MeterStateTrait.MeterStateFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.MeterStateTrait.MeterStateFeature
    public typealias Element = GoogleHomeTypes.Google.MeterStateTrait.MeterStateFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedMeterStates
    case currentMeterStateData
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MeterStateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MeterStateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.MeterStateTrait {
  public var supportedMeterStates: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState]> {
    get
  }
  public var currentMeterStateData: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.MeterStateFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait.FetchMeterStateHistoryCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case startTimeUnixTimestampSeconds
    case endTimeUnixTimestampSeconds
    case meterStates
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MeterStateTrait.FetchMeterStateHistoryCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MeterStateTrait.FetchMeterStateHistoryCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.MeterStateTrait {
  public static func fetchMeterStateHistory(startTimeUnixTimestampSeconds: Swift.Int64, endTimeUnixTimestampSeconds: Swift.Int64, meterStates: [GoogleHomeTypes.Google.MeterStateTrait.MeterStates]) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case resourceType
    case collectionType
    case collectionScope
    case startTimeUnixTimestampSeconds
    case endTimeUnixTimestampSeconds
    case rawValue
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.MeterStateTrait.CurrentMeterStateData {
  public var resourceType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.ResourceType> {
    get
  }
  public var collectionType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.CollectionType> {
    get
  }
  public var collectionScope: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.CollectionScope> {
    get
  }
  public var startTimeUnixTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var endTimeUnixTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var rawValue: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case resourceType
    case collectionType
    case unit
    case collectionScope
    case tolerance
    case cadenceSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.MeterStateTrait.SupportedMeterState {
  public var resourceType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.ResourceType> {
    get
  }
  public var collectionType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.CollectionType> {
    get
  }
  public var unit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.MeasurementUnit> {
    get
  }
  public var collectionScope: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.CollectionScope> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var cadenceSeconds: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Google.MeterStateTrait.MeterStates {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case resourceType
    case collectionType
    case collectionScope
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MeterStateTrait.MeterStates.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MeterStateTrait.MeterStates.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.MeterStateTrait.MeterStates {
  public var resourceType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.ResourceType> {
    get
  }
  public var collectionType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.CollectionType> {
    get
  }
  public var collectionScope: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MeterStateTrait.CollectionScope> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct MotionDetectionTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.MotionDetectionTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.MotionDetectionTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($motionDetectionTimestampSeconds) public var motionDetectionTimestampSeconds: Swift.Int64? {
      get
    }
    public var $motionDetectionTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($motionDetectionEventInProgress) public var motionDetectionEventInProgress: Swift.Bool? {
      get
    }
    public var $motionDetectionEventInProgress: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastMotionDetectionEventStartTimestampSeconds) public var lastMotionDetectionEventStartTimestampSeconds: Swift.Int64? {
      get
    }
    public var $lastMotionDetectionEventStartTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastMotionDetectionEventEndTimestampSeconds) public var lastMotionDetectionEventEndTimestampSeconds: Swift.Int64? {
      get
    }
    public var $lastMotionDetectionEventEndTimestampSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.MotionDetectionTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MotionDetectionTrait, rhs: GoogleHomeTypes.Google.MotionDetectionTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.MotionDetectionTrait.Attributes, rhs: GoogleHomeTypes.Google.MotionDetectionTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait {
  public struct MotionDetectedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let motionDetectionTimestampSeconds: Swift.Int64?
      public let motionDetectionStartTimestampMillis: Swift.Int64?
      public let motionDetectionEndTimestampMillis: Swift.Int64?
      public init(priority: Swift.UInt32?, motionDetectionTimestampSeconds: Swift.Int64?, motionDetectionStartTimestampMillis: Swift.Int64?, motionDetectionEndTimestampMillis: Swift.Int64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent.Payload, b: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent, b: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait {
  public struct MotionDetectionFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsMotionDetectionTimestampSeconds: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature
    public static let supportsMotionDetectionEventInProgress: GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature
    public typealias Element = GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case motionDetectionTimestampSeconds
    case motionDetectionEventInProgress
    case lastMotionDetectionEventStartTimestampSeconds
    case lastMotionDetectionEventEndTimestampSeconds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MotionDetectionTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MotionDetectionTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.MotionDetectionTrait {
  public var motionDetectionTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var motionDetectionEventInProgress: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var lastMotionDetectionEventStartTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var lastMotionDetectionEventEndTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectionFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case motionDetectionTimestampSeconds
    case motionDetectionStartTimestampMillis
    case motionDetectionEndTimestampMillis
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.MotionDetectionTrait.MotionDetectedEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var motionDetectionTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var motionDetectionStartTimestampMillis: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var motionDetectionEndTimestampMillis: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct NetworkControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.NetworkControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkProfiles) public var networkProfiles: [Swift.String]? {
      get
    }
    public var $networkProfiles: GoogleHomeSDK.TraitAttribute<[Swift.String]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkEnabled) public var networkEnabled: Swift.Bool? {
      get
    }
    public var $networkEnabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($guestNetworkEnabled) public var guestNetworkEnabled: Swift.Bool? {
      get
    }
    public var $guestNetworkEnabled: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkSettings) public var networkSettings: GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings? {
      get
    }
    public var $networkSettings: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkUsageUnlimited) public var networkUsageUnlimited: Swift.Bool? {
      get
    }
    public var $networkUsageUnlimited: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkUsageLimitMB) public var networkUsageLimitMB: Swift.Float32? {
      get
    }
    public var $networkUsageLimitMB: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkUsageMB) public var networkUsageMB: Swift.Float32? {
      get
    }
    public var $networkUsageMB: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkProfileStates) public var networkProfileStates: [GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState]? {
      get
    }
    public var $networkProfileStates: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastNetworkUploadSpeedTest) public var lastNetworkUploadSpeedTest: GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest? {
      get
    }
    public var $lastNetworkUploadSpeedTest: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($networkSpeedTestInProgress) public var networkSpeedTestInProgress: Swift.Bool? {
      get
    }
    public var $networkSpeedTestInProgress: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($guestNetworkSettings) public var guestNetworkSettings: GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings? {
      get
    }
    public var $guestNetworkSettings: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($numConnectedDevices) public var numConnectedDevices: Swift.UInt32? {
      get
    }
    public var $numConnectedDevices: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastNetworkDownloadSpeedTest) public var lastNetworkDownloadSpeedTest: GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest? {
      get
    }
    public var $lastNetworkDownloadSpeedTest: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.NetworkControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.NetworkControlTrait, rhs: GoogleHomeTypes.Google.NetworkControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.NetworkControlTrait.Attributes, rhs: GoogleHomeTypes.Google.NetworkControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public struct NetworkSettings : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let ssid: Swift.String
    public init(ssid: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings, b: GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct NetworkProfileState : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let networkProfileName: Swift.String
    public let enabled: Swift.Bool
    public init(networkProfileName: Swift.String, enabled: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState, b: GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LastNetworkUploadSpeedTest : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let unixTimestampSeconds: Swift.Int64
    public let uploadSpeedMbps: Swift.Float32
    public let status: GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus
    public init(unixTimestampSeconds: Swift.Int64, uploadSpeedMbps: Swift.Float32, status: GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest, b: GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GuestNetworkSettings : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let ssid: Swift.String
    public init(ssid: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings, b: GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LastNetworkDownloadSpeedTest : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let downloadSpeedMbps: Swift.Float32
    public let unixTimestampSeconds: Swift.Int64
    public let status: GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus
    public init(downloadSpeedMbps: Swift.Float32, unixTimestampSeconds: Swift.Int64, status: GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest, b: GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public struct TestNetworkSpeedFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let status: GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus?
      public let networkUploadSpeedMbps: Swift.Float32?
      public let networkDownloadSpeedMbps: Swift.Float32?
      public let errorCode: Swift.String?
      public init(status: GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus?, networkUploadSpeedMbps: Swift.Float32?, networkDownloadSpeedMbps: Swift.Float32?, errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent.Payload, b: GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent, b: GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public var supportsEnableDisableGuestNetworkCommand: Swift.Bool {
    get
  }
  public func enableDisableGuestNetwork(enable: Swift.Bool) async throws
  public func enableDisableGuestNetworkBatchable(enable: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableDisableGuestNetworkCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public var supportsEnableDisableNetworkProfileCommand: Swift.Bool {
    get
  }
  public func enableDisableNetworkProfile(enable: Swift.Bool, networkProfileName: Swift.String) async throws
  public func enableDisableNetworkProfileBatchable(enable: Swift.Bool, networkProfileName: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct EnableDisableNetworkProfileCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public typealias GetGuestNetworkPasswordCommandResponse = GoogleHomeTypes.Google.NetworkControlTrait.GetGuestNetworkPasswordCommand.Response
  public var supportsGetGuestNetworkPasswordCommand: Swift.Bool {
    get
  }
  public func getGuestNetworkPassword() async throws -> GoogleHomeTypes.Google.NetworkControlTrait.GetGuestNetworkPasswordCommandResponse
  public func getGuestNetworkPasswordBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.NetworkControlTrait.GetGuestNetworkPasswordCommandResponse>
  public struct GetGuestNetworkPasswordCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let guestNetworkPassword: Swift.String
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public var supportsTestNetworkSpeedCommand: Swift.Bool {
    get
  }
  public func testNetworkSpeed(testUploadSpeed: Swift.Bool, testDownloadSpeed: Swift.Bool) async throws
  public func testNetworkSpeedBatchable(testUploadSpeed: Swift.Bool, testDownloadSpeed: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TestNetworkSpeedCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public enum SpeedTestStatus : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case success
    case failure
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public struct NetworkControlFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsEnablingNetworkProfile: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public static let supportsDisablingNetworkProfile: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public static let supportsEnablingGuestNetwork: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public static let supportsDisablingGuestNetwork: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public static let supportsGettingGuestNetworkPassword: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public static let supportsNetworkDownloadSpeedTest: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public static let supportsNetworkUploadSpeedTest: GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public typealias Element = GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkProfiles
    case networkEnabled
    case guestNetworkEnabled
    case networkSettings
    case networkUsageUnlimited
    case networkUsageLimitMB
    case networkUsageMB
    case networkProfileStates
    case lastNetworkUploadSpeedTest
    case networkSpeedTestInProgress
    case guestNetworkSettings
    case numConnectedDevices
    case lastNetworkDownloadSpeedTest
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.NetworkControlTrait {
  public var networkProfiles: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var networkEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var guestNetworkEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var networkSettings: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings> {
    get
  }
  public var networkUsageUnlimited: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var networkUsageLimitMB: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var networkUsageMB: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var networkProfileStates: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState]> {
    get
  }
  public var lastNetworkUploadSpeedTest: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest> {
    get
  }
  public var networkSpeedTestInProgress: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var guestNetworkSettings: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings> {
    get
  }
  public var numConnectedDevices: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var lastNetworkDownloadSpeedTest: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.NetworkControlFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case status
    case networkUploadSpeedMbps
    case networkDownloadSpeedMbps
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedFollowUpEvent {
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus> {
    get
  }
  public var networkUploadSpeedMbps: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var networkDownloadSpeedMbps: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.EnableDisableGuestNetworkCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enable
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.EnableDisableGuestNetworkCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.EnableDisableGuestNetworkCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.NetworkControlTrait.EnableDisableNetworkProfileCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case enable
    case networkProfileName
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.EnableDisableNetworkProfileCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.EnableDisableNetworkProfileCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case testUploadSpeed
    case testDownloadSpeed
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.TestNetworkSpeedCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.NetworkControlTrait {
  public static func enableDisableGuestNetwork(enable: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func enableDisableNetworkProfile(enable: Swift.Bool, networkProfileName: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func getGuestNetworkPassword() -> GoogleHomeSDK.AutomationCommand
  public static func testNetworkSpeed(testUploadSpeed: Swift.Bool, testDownloadSpeed: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case ssid
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.NetworkControlTrait.NetworkSettings {
  public var ssid: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case networkProfileName
    case enabled
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.NetworkControlTrait.NetworkProfileState {
  public var networkProfileName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var enabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case unixTimestampSeconds
    case uploadSpeedMbps
    case status
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkUploadSpeedTest {
  public var unixTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var uploadSpeedMbps: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case ssid
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.NetworkControlTrait.GuestNetworkSettings {
  public var ssid: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case downloadSpeedMbps
    case unixTimestampSeconds
    case status
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.NetworkControlTrait.LastNetworkDownloadSpeedTest {
  public var downloadSpeedMbps: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var unixTimestampSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.NetworkControlTrait.SpeedTestStatus> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct NetworkIdentityManagementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($bleConnectionKey) public var bleConnectionKey: Swift.String? {
      get
    }
    public var $bleConnectionKey: GoogleHomeSDK.TraitAttribute<Swift.String> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.NetworkIdentityManagementTrait, rhs: GoogleHomeTypes.Google.NetworkIdentityManagementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attributes, rhs: GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public var supportsSetBLEConnectionKeyCommand: Swift.Bool {
    get
  }
  public func setBLEConnectionKey(bleConnectionKey: Swift.String) async throws
  public func setBLEConnectionKeyBatchable(bleConnectionKey: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetBLEConnectionKeyCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public typealias GetMacAddressCommandResponse = GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetMacAddressCommand.Response
  public var supportsGetMacAddressCommand: Swift.Bool {
    get
  }
  public func getMacAddress() async throws -> GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetMacAddressCommandResponse
  public func getMacAddressBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetMacAddressCommandResponse>
  public struct GetMacAddressCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let macAddress: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public typealias GetWeaveAccessTokenCommandResponse = GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetWeaveAccessTokenCommand.Response
  public var supportsGetWeaveAccessTokenCommand: Swift.Bool {
    get
  }
  public func getWeaveAccessToken() async throws -> GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetWeaveAccessTokenCommandResponse
  public func getWeaveAccessTokenBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetWeaveAccessTokenCommandResponse>
  public struct GetWeaveAccessTokenCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let weaveAccessToken: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public typealias GetUniqueDeviceIdentifierCommandResponse = GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetUniqueDeviceIdentifierCommand.Response
  public var supportsGetUniqueDeviceIdentifierCommand: Swift.Bool {
    get
  }
  public func getUniqueDeviceIdentifier() async throws -> GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetUniqueDeviceIdentifierCommandResponse
  public func getUniqueDeviceIdentifierBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetUniqueDeviceIdentifierCommandResponse>
  public struct GetUniqueDeviceIdentifierCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let uniqueId: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public typealias GetNetworkIdentityInformationCommandResponse = GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetNetworkIdentityInformationCommand.Response
  public var supportsGetNetworkIdentityInformationCommand: Swift.Bool {
    get
  }
  public func getNetworkIdentityInformation() async throws -> GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetNetworkIdentityInformationCommandResponse
  public func getNetworkIdentityInformationBatchable() throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.NetworkIdentityManagementTrait.GetNetworkIdentityInformationCommandResponse>
  public struct GetNetworkIdentityInformationCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let wifiMac: Swift.String?
      public let wifiIP: Swift.String?
      public let lowRateWirelessMac: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case bleConnectionKey
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkIdentityManagementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public var bleConnectionKey: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait.SetBLEConnectionKeyCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case bleConnectionKey
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.NetworkIdentityManagementTrait.SetBLEConnectionKeyCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.NetworkIdentityManagementTrait.SetBLEConnectionKeyCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.NetworkIdentityManagementTrait {
  public static func setBLEConnectionKey(bleConnectionKey: Swift.String) -> GoogleHomeSDK.AutomationCommand
  public static func getMacAddress() -> GoogleHomeSDK.AutomationCommand
  public static func getWeaveAccessToken() -> GoogleHomeSDK.AutomationCommand
  public static func getUniqueDeviceIdentifier() -> GoogleHomeSDK.AutomationCommand
  public static func getNetworkIdentityInformation() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ObjectDetectionTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ObjectDetectionTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ObjectDetectionTrait, rhs: GoogleHomeTypes.Google.ObjectDetectionTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ObjectDetectionTrait.Attributes, rhs: GoogleHomeTypes.Google.ObjectDetectionTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait {
  public struct Object : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let type: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectType
    public let startTimestampMillis: Swift.Int64
    public let endTimestampMillis: Swift.Int64
    public let name: Swift.String
    public let imageUrl: Swift.String
    public init(type: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectType, startTimestampMillis: Swift.Int64, endTimestampMillis: Swift.Int64, name: Swift.String, imageUrl: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ObjectDetectionTrait.Object, b: GoogleHomeTypes.Google.ObjectDetectionTrait.Object) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Objects : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let unfamiliar: Swift.Int32
    public let named: [Swift.String]
    public let unclassified: Swift.Int32
    public let familiar: Swift.Int32
    public let objects: [GoogleHomeTypes.Google.ObjectDetectionTrait.Object]
    public init(unfamiliar: Swift.Int32, named: [Swift.String], unclassified: Swift.Int32, familiar: Swift.Int32, objects: [GoogleHomeTypes.Google.ObjectDetectionTrait.Object])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ObjectDetectionTrait.Objects, b: GoogleHomeTypes.Google.ObjectDetectionTrait.Objects) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait {
  public struct ObjectDetectedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.Int32?
      public let detectionTimestampMillis: Swift.Int64?
      public let objects: GoogleHomeTypes.Google.ObjectDetectionTrait.Objects?
      public init(priority: Swift.Int32?, detectionTimestampMillis: Swift.Int64?, objects: GoogleHomeTypes.Google.ObjectDetectionTrait.Objects?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent.Payload, b: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent, b: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait {
  public enum ObjectType : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case faceFamiliar
    case faceUnfamiliar
    case person
    case packageDelivered
    case animal
    case vehicle
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait {
  public struct ObjectDetectionFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let faceDetection: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public static let personDetection: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public static let packageDetection: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public static let animalDetection: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public static let vehicleDetection: GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public typealias Element = GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ObjectDetectionTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ObjectDetectionTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ObjectDetectionTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectionFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case detectionTimestampMillis
    case objects
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectDetectedEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var detectionTimestampMillis: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var objects: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ObjectDetectionTrait.Objects> {
    get
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait.Object {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case type
    case startTimestampMillis
    case endTimestampMillis
    case name
    case imageUrl
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ObjectDetectionTrait.Object.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ObjectDetectionTrait.Object.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ObjectDetectionTrait.Object {
  public var type: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ObjectDetectionTrait.ObjectType> {
    get
  }
  public var startTimestampMillis: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var endTimestampMillis: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var imageUrl: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.ObjectDetectionTrait.Objects {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case unfamiliar
    case named
    case unclassified
    case familiar
    case objects
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ObjectDetectionTrait.Objects.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ObjectDetectionTrait.Objects.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ObjectDetectionTrait.Objects {
  public var unfamiliar: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var named: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var unclassified: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var familiar: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var objects: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ObjectDetectionTrait.Object]> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct OpenCloseTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.OpenCloseTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedDirections) public var supportedDirections: [GoogleHomeTypes.Google.OpenCloseTrait.Direction]? {
      get
    }
    public var $supportedDirections: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.OpenCloseTrait.Direction]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($openPercent) public var openPercent: Swift.Float64? {
      get
    }
    public var $openPercent: GoogleHomeSDK.TraitAttribute<Swift.Float64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetOpenPercent) public var targetOpenPercent: Swift.Float64? {
      get
    }
    public var $targetOpenPercent: GoogleHomeSDK.TraitAttribute<Swift.Float64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($openState) public var openState: [GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState]? {
      get
    }
    public var $openState: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.OpenCloseTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.OpenCloseTrait, rhs: GoogleHomeTypes.Google.OpenCloseTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.OpenCloseTrait.Attributes, rhs: GoogleHomeTypes.Google.OpenCloseTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public struct DirectionOpenState : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let openPercent: Swift.Float64
    public let openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction
    public let targetOpenPercent: Swift.Float64
    public init(openPercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction, targetOpenPercent: Swift.Float64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState, b: GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public struct OpenFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.OpenFollowUpEvent.Payload, b: GoogleHomeTypes.Google.OpenCloseTrait.OpenFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.OpenCloseTrait.OpenFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.OpenCloseTrait.OpenFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.OpenFollowUpEvent, b: GoogleHomeTypes.Google.OpenCloseTrait.OpenFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct CloseFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.CloseFollowUpEvent.Payload, b: GoogleHomeTypes.Google.OpenCloseTrait.CloseFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.OpenCloseTrait.CloseFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.OpenCloseTrait.CloseFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.CloseFollowUpEvent, b: GoogleHomeTypes.Google.OpenCloseTrait.CloseFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GoToOpenPercentageFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let openPercent: Swift.Float64?
      public init(openPercent: Swift.Float64?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent.Payload, b: GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent, b: GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct OpenCloseErrorFollowUpEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let errorCode: Swift.String?
      public init(errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent.Payload, b: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent, b: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public var supportsOpenCommand: Swift.Bool {
    get
  }
  public func open(openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) async throws
  public func openBatchable(openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OpenCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public var supportsCloseCommand: Swift.Bool {
    get
  }
  public func close() async throws
  public func closeBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct CloseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public var supportsGoToOpenPercentageCommand: Swift.Bool {
    get
  }
  public func goToOpenPercentage(openPercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) async throws
  public func goToOpenPercentageBatchable(openPercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct GoToOpenPercentageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public var supportsStepCommand: Swift.Bool {
    get
  }
  public func step(openRelativePercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) async throws
  public func stepBatchable(openRelativePercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public enum Direction : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case up
    case down
    case left
    case right
    case `in`
    case out
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.OpenCloseTrait.Direction
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum StatusEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case success
    case failure
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.OpenCloseTrait.StatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public struct OpenCloseFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsDiscreteOnlyOpenClose: GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseFeature
    public typealias Element = GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedDirections
    case openPercent
    case targetOpenPercent
    case openState
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.OpenCloseTrait {
  public var supportedDirections: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.OpenCloseTrait.Direction]> {
    get
  }
  public var openPercent: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var targetOpenPercent: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var openState: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openPercent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageFollowUpEvent {
  public var openPercent: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.OpenCloseTrait.OpenCloseErrorFollowUpEvent {
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.OpenCloseTrait.OpenCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openDirection
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.OpenCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.OpenCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openPercent
    case openDirection
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.GoToOpenPercentageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.OpenCloseTrait.StepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openRelativePercent
    case openDirection
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.StepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.StepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.OpenCloseTrait {
  public static func open(openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) -> GoogleHomeSDK.AutomationCommand
  public static func close() -> GoogleHomeSDK.AutomationCommand
  public static func goToOpenPercentage(openPercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) -> GoogleHomeSDK.AutomationCommand
  public static func step(openRelativePercent: Swift.Float64, openDirection: GoogleHomeTypes.Google.OpenCloseTrait.Direction) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openPercent
    case openDirection
    case targetOpenPercent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.OpenCloseTrait.DirectionOpenState {
  public var openPercent: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
  public var openDirection: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.OpenCloseTrait.Direction> {
    get
  }
  public var targetOpenPercent: GoogleHomeSDK.TypedExpression<Swift.Float64> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct PairableTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.PairableTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.PairableTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.PairableTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($openForPairing) public var openForPairing: Swift.Bool? {
      get
    }
    public var $openForPairing: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PairableTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.PairableTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PairableTrait, rhs: GoogleHomeTypes.Google.PairableTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PairableTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PairableTrait.Attributes, rhs: GoogleHomeTypes.Google.PairableTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PairableTrait {
  public var supportsOpenForPairingCommand: Swift.Bool {
    get
  }
  public func openForPairing() async throws
  public func openForPairingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct OpenForPairingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.PairableTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case openForPairing
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PairableTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PairableTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.PairableTrait {
  public var openForPairing: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.PairableTrait {
  public static func openForPairing() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ParkingLocationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ParkingLocationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ParkingLocationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ParkingLocationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentParkingLocation) public var currentParkingLocation: [GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation]? {
      get
    }
    public var $currentParkingLocation: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ParkingLocationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ParkingLocationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ParkingLocationTrait, rhs: GoogleHomeTypes.Google.ParkingLocationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ParkingLocationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ParkingLocationTrait.Attributes, rhs: GoogleHomeTypes.Google.ParkingLocationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ParkingLocationTrait {
  public struct CurrentParkingLocation : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let locationDescription: [Swift.String]
    public let languageCode: Swift.String
    public init(locationDescription: [Swift.String], languageCode: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation, b: GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ParkingLocationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentParkingLocation
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ParkingLocationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ParkingLocationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ParkingLocationTrait {
  public var currentParkingLocation: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case locationDescription
    case languageCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ParkingLocationTrait.CurrentParkingLocation {
  public var locationDescription: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var languageCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct PreFilterMonitoringTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($condition) public var condition: Swift.UInt32? {
      get
    }
    public var $condition: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($changeIndication) public var changeIndication: GoogleHomeTypes.Google.PreFilterMonitoringTrait.ChangeIndication? {
      get
    }
    public var $changeIndication: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.PreFilterMonitoringTrait.ChangeIndication> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PreFilterMonitoringTrait, rhs: GoogleHomeTypes.Google.PreFilterMonitoringTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attributes, rhs: GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait {
  public enum ChangeIndication : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case ok
    case warning
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.PreFilterMonitoringTrait.ChangeIndication
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait {
  public struct FilterMonitoringFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let warning: GoogleHomeTypes.Google.PreFilterMonitoringTrait.FilterMonitoringFeature
    public static let condition: GoogleHomeTypes.Google.PreFilterMonitoringTrait.FilterMonitoringFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.PreFilterMonitoringTrait.FilterMonitoringFeature
    public typealias Element = GoogleHomeTypes.Google.PreFilterMonitoringTrait.FilterMonitoringFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.PreFilterMonitoringTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case condition
    case changeIndication
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PreFilterMonitoringTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.PreFilterMonitoringTrait {
  public var condition: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var changeIndication: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.PreFilterMonitoringTrait.ChangeIndication> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct PresetMessageTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.PresetMessageTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.PresetMessageTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($availablePhraseTypes) public var availablePhraseTypes: [GoogleHomeTypes.Google.PresetMessageTrait.PhraseType]? {
      get
    }
    public var $availablePhraseTypes: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.PresetMessageTrait.PhraseType]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.PresetMessageTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PresetMessageTrait, rhs: GoogleHomeTypes.Google.PresetMessageTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PresetMessageTrait.Attributes, rhs: GoogleHomeTypes.Google.PresetMessageTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait {
  public struct PhraseType : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let phraseType: Swift.String
    public init(phraseType: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.PresetMessageTrait.PhraseType, b: GoogleHomeTypes.Google.PresetMessageTrait.PhraseType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait {
  public var supportsPlayPresetMessageCommand: Swift.Bool {
    get
  }
  public func playPresetMessage(phraseType: Swift.String) async throws
  public func playPresetMessageBatchable(phraseType: Swift.String) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct PlayPresetMessageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case availablePhraseTypes
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PresetMessageTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PresetMessageTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.PresetMessageTrait {
  public var availablePhraseTypes: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.PresetMessageTrait.PhraseType]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.PresetMessageTrait.PlayPresetMessageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case phraseType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PresetMessageTrait.PlayPresetMessageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PresetMessageTrait.PlayPresetMessageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.PresetMessageTrait {
  public static func playPresetMessage(phraseType: Swift.String) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.PresetMessageTrait.PhraseType {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case phraseType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PresetMessageTrait.PhraseType.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PresetMessageTrait.PhraseType.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.PresetMessageTrait.PhraseType {
  public var phraseType: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct PushAvStreamTransportTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentConnections) public var currentConnections: [GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct]? {
      get
    }
    public var $currentConnections: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PushAvStreamTransportTrait, rhs: GoogleHomeTypes.Google.PushAvStreamTransportTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attributes, rhs: GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public struct TransportConfigurationStruct : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let connectionID: Swift.UInt16
    public let transportStatus: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum
    public init(connectionID: Swift.UInt16, transportStatus: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct, b: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public var supportsSetTransportStatusCommand: Swift.Bool {
    get
  }
  public func setTransportStatus(transportStatus: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Google.PushAvStreamTransportTrait.SetTransportStatusCommand.OptionalArgs) -> Swift.Void)? = nil) async throws
  public func setTransportStatusBatchable(transportStatus: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum, optionalArgsProvider: ((GoogleHomeTypes.Google.PushAvStreamTransportTrait.SetTransportStatusCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetTransportStatusCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var connectionIDIsSet: Swift.Bool {
        get
      }
      final public func setConnectionID(_ value: Swift.UInt16?)
      final public func clearConnectionID()
      @objc deinit
    }
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public typealias FindTransportCommandResponse = GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand.Response
  public var supportsFindTransportCommand: Swift.Bool {
    get
  }
  public func findTransport(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand.OptionalArgs) -> Swift.Void)? = nil) async throws -> GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommandResponse
  public func findTransportBatchable(optionalArgsProvider: ((GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand.OptionalArgs) -> Swift.Void)? = nil) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommandResponse>
  public struct FindTransportCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    @_hasMissingDesignatedInitializers final public class OptionalArgs : @unchecked Swift.Sendable {
      final public var connectionIDIsSet: Swift.Bool {
        get
      }
      final public func setConnectionID(_ value: Swift.UInt16?)
      final public func clearConnectionID()
      @objc deinit
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let transportConfigurations: [GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public enum TransportStatusEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case active
    case inactive
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentConnections
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PushAvStreamTransportTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public var currentConnections: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait.SetTransportStatusCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case connectionID
    case transportStatus
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PushAvStreamTransportTrait.SetTransportStatusCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PushAvStreamTransportTrait.SetTransportStatusCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case connectionID
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait {
  public static func setTransportStatus(transportStatus: GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum, optionalArgsProvider: (@Sendable (GoogleHomeTypes.Google.PushAvStreamTransportTrait.SetTransportStatusCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
  public static func findTransport(optionalArgsProvider: (@Sendable (GoogleHomeTypes.Google.PushAvStreamTransportTrait.FindTransportCommand.OptionalArgs) -> Swift.Void)? = nil) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case connectionID
    case transportStatus
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportConfigurationStruct {
  public var connectionID: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
  public var transportStatus: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.PushAvStreamTransportTrait.TransportStatusEnum> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct RebootTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RebootTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.RebootTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RebootTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RebootTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RebootTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RebootTrait, rhs: GoogleHomeTypes.Google.RebootTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RebootTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RebootTrait.Attributes, rhs: GoogleHomeTypes.Google.RebootTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RebootTrait {
  public var supportsRebootCommand: Swift.Bool {
    get
  }
  public func reboot() async throws
  public func rebootBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RebootCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RebootTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RebootTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RebootTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RebootTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.RebootTrait {
  public static func reboot() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct RecordTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RecordTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.RecordTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RecordTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isCurrentlyRecording) public var isCurrentlyRecording: Swift.Bool? {
      get
    }
    public var $isCurrentlyRecording: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RecordTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RecordTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RecordTrait, rhs: GoogleHomeTypes.Google.RecordTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RecordTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RecordTrait.Attributes, rhs: GoogleHomeTypes.Google.RecordTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RecordTrait {
  public var supportsStartRecordingCommand: Swift.Bool {
    get
  }
  public func startRecording() async throws
  public func startRecordingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StartRecordingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RecordTrait {
  public var supportsStopRecordingCommand: Swift.Bool {
    get
  }
  public func stopRecording() async throws
  public func stopRecordingBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StopRecordingCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RecordTrait {
  public typealias RecordCommandResponse = GoogleHomeTypes.Google.RecordTrait.RecordCommand.Response
  public var supportsRecordCommand: Swift.Bool {
    get
  }
  public func record(reason: GoogleHomeTypes.Google.RecordTrait.RecordingReason, durationSeconds: Swift.UInt32) async throws -> GoogleHomeTypes.Google.RecordTrait.RecordCommandResponse
  public func recordBatchable(reason: GoogleHomeTypes.Google.RecordTrait.RecordingReason, durationSeconds: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<GoogleHomeTypes.Google.RecordTrait.RecordCommandResponse>
  public struct RecordCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Response : GoogleHomeSDK.CommandResponse {
      public static let identifier: GoogleHomeSDK.ScopedCommandID
      public let result: GoogleHomeTypes.Google.RecordTrait.RecordingResult
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
  }
}
extension GoogleHomeTypes.Google.RecordTrait {
  public enum RecordingReason : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case automationSmoke
    case automationCo
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.RecordTrait.RecordingReason
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum RecordingResult : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case unknown
    case success
    case failed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.RecordTrait.RecordingResult
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RecordTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case isCurrentlyRecording
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RecordTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RecordTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RecordTrait {
  public var isCurrentlyRecording: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.RecordTrait.RecordCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case reason
    case durationSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RecordTrait.RecordCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RecordTrait.RecordCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.RecordTrait {
  public static func startRecording() -> GoogleHomeSDK.AutomationCommand
  public static func stopRecording() -> GoogleHomeSDK.AutomationCommand
  public static func record(reason: GoogleHomeTypes.Google.RecordTrait.RecordingReason, durationSeconds: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct RecordingTriggerSettingsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.RecordingTriggerSettingsTrait
  }
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($safetyTriggerSetting) public var safetyTriggerSetting: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting? {
      get
    }
    public var $safetyTriggerSetting: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($defaultSafetyTriggerSetting) public var defaultSafetyTriggerSetting: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting? {
      get
    }
    public var $defaultSafetyTriggerSetting: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait, rhs: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attributes, rhs: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var safetyTriggerSettingIsSet: Swift.Bool {
      get
    }
    final public func setSafetyTriggerSetting(_ value: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting)
    final public func clearSafetyTriggerSetting()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait {
  public enum Setting : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case unset
    case on
    case off
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RecordingTriggerSettingsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case safetyTriggerSetting
    case defaultSafetyTriggerSetting
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RecordingTriggerSettingsTrait {
  public var safetyTriggerSetting: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting> {
    get
  }
  public var defaultSafetyTriggerSetting: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.RecordingTriggerSettingsTrait {
  final public func setSafetyTriggerSetting(_ value: GoogleHomeTypes.Google.RecordingTriggerSettingsTrait.Setting)
}
extension GoogleHomeTypes.Google {
  public struct RelativeHumidityControlTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minRelativeHumidity) public var minRelativeHumidity: Swift.UInt32? {
      get
    }
    public var $minRelativeHumidity: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxRelativeHumidity) public var maxRelativeHumidity: Swift.UInt32? {
      get
    }
    public var $maxRelativeHumidity: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($relativeHumiditySetpoint) public var relativeHumiditySetpoint: Swift.UInt32? {
      get
    }
    public var $relativeHumiditySetpoint: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RelativeHumidityControlTrait, rhs: GoogleHomeTypes.Google.RelativeHumidityControlTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attributes, rhs: GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public var supportsSetRelativeHumidityCommand: Swift.Bool {
    get
  }
  public func setRelativeHumidity(humidity: Swift.UInt32) async throws
  public func setRelativeHumidityBatchable(humidity: Swift.UInt32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetRelativeHumidityCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public var supportsStepRelativeHumidityCommand: Swift.Bool {
    get
  }
  public func stepRelativeHumidity(relativeHumidityPercent: Swift.UInt32, relativeHumidityWeight: Swift.UInt32, stepMode: GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepMode) async throws
  public func stepRelativeHumidityBatchable(relativeHumidityPercent: Swift.UInt32, relativeHumidityWeight: Swift.UInt32, stepMode: GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepMode) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct StepRelativeHumidityCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public enum StepMode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case up
    case down
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepMode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case minRelativeHumidity
    case maxRelativeHumidity
    case relativeHumiditySetpoint
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RelativeHumidityControlTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public var minRelativeHumidity: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxRelativeHumidity: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var relativeHumiditySetpoint: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait.SetRelativeHumidityCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case humidity
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RelativeHumidityControlTrait.SetRelativeHumidityCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RelativeHumidityControlTrait.SetRelativeHumidityCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepRelativeHumidityCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case relativeHumidityPercent
    case relativeHumidityWeight
    case stepMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepRelativeHumidityCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepRelativeHumidityCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.RelativeHumidityControlTrait {
  public static func setRelativeHumidity(humidity: Swift.UInt32) -> GoogleHomeSDK.AutomationCommand
  public static func stepRelativeHumidity(relativeHumidityPercent: Swift.UInt32, relativeHumidityWeight: Swift.UInt32, stepMode: GoogleHomeTypes.Google.RelativeHumidityControlTrait.StepMode) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct RemoteDuckingTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RemoteDuckingTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.RemoteDuckingTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RemoteDuckingTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RemoteDuckingTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RemoteDuckingTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RemoteDuckingTrait, rhs: GoogleHomeTypes.Google.RemoteDuckingTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RemoteDuckingTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RemoteDuckingTrait.Attributes, rhs: GoogleHomeTypes.Google.RemoteDuckingTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RemoteDuckingTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RemoteDuckingTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RemoteDuckingTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RemoteDuckingTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct RotationTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RotationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.RotationTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RotationTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rotationDegreesRange) public var rotationDegreesRange: GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange? {
      get
    }
    public var $rotationDegreesRange: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rotationPercent) public var rotationPercent: Swift.Float32? {
      get
    }
    public var $rotationPercent: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($rotationDegrees) public var rotationDegrees: Swift.Float32? {
      get
    }
    public var $rotationDegrees: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($targetRotationPercent) public var targetRotationPercent: Swift.Float32? {
      get
    }
    public var $targetRotationPercent: GoogleHomeSDK.TraitAttribute<Swift.Float32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: GoogleHomeTypes.Google.RotationTrait.RotationFeature? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.RotationTrait.RotationFeature> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RotationTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RotationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RotationTrait, rhs: GoogleHomeTypes.Google.RotationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RotationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RotationTrait.Attributes, rhs: GoogleHomeTypes.Google.RotationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RotationTrait {
  public struct RotationDegreesRange : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let rotationDegreesMin: Swift.Float32
    public let rotationDegreesMax: Swift.Float32
    public init(rotationDegreesMin: Swift.Float32, rotationDegreesMax: Swift.Float32)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange, b: GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RotationTrait {
  public var supportsRotateToDegreesCommand: Swift.Bool {
    get
  }
  public func rotateToDegrees(rotationDegrees: Swift.Float32) async throws
  public func rotateToDegreesBatchable(rotationDegrees: Swift.Float32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RotateToDegreesCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RotationTrait {
  public var supportsRotateToPercentageCommand: Swift.Bool {
    get
  }
  public func rotateToPercentage(rotationPercent: Swift.Float32) async throws
  public func rotateToPercentageBatchable(rotationPercent: Swift.Float32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct RotateToPercentageCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.RotationTrait {
  public struct RotationFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let supportsDegreesRotation: GoogleHomeTypes.Google.RotationTrait.RotationFeature
    public static let supportsPercentRotation: GoogleHomeTypes.Google.RotationTrait.RotationFeature
    public static let supportsContinuousRotation: GoogleHomeTypes.Google.RotationTrait.RotationFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.RotationTrait.RotationFeature
    public typealias Element = GoogleHomeTypes.Google.RotationTrait.RotationFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.RotationTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rotationDegreesRange
    case rotationPercent
    case rotationDegrees
    case targetRotationPercent
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RotationTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RotationTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RotationTrait {
  public var rotationDegreesRange: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange> {
    get
  }
  public var rotationPercent: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var rotationDegrees: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var targetRotationPercent: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.RotationTrait.RotationFeature> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.RotationTrait.RotateToDegreesCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rotationDegrees
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RotationTrait.RotateToDegreesCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RotationTrait.RotateToDegreesCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.RotationTrait.RotateToPercentageCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rotationPercent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RotationTrait.RotateToPercentageCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RotationTrait.RotateToPercentageCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.RotationTrait {
  public static func rotateToDegrees(rotationDegrees: Swift.Float32) -> GoogleHomeSDK.AutomationCommand
  public static func rotateToPercentage(rotationPercent: Swift.Float32) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case rotationDegreesMin
    case rotationDegreesMax
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.RotationTrait.RotationDegreesRange {
  public var rotationDegreesMin: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
  public var rotationDegreesMax: GoogleHomeSDK.TypedExpression<Swift.Float32> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct RoutineTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.RoutineTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.RoutineTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.RoutineTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.RoutineTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.RoutineTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RoutineTrait, rhs: GoogleHomeTypes.Google.RoutineTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RoutineTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.RoutineTrait.Attributes, rhs: GoogleHomeTypes.Google.RoutineTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.RoutineTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.RoutineTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.RoutineTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.RoutineTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SceneTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SceneTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SceneTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SceneTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sceneReversible) public var sceneReversible: Swift.Bool? {
      get
    }
    public var $sceneReversible: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($sceneDynamic) public var sceneDynamic: Swift.Bool? {
      get
    }
    public var $sceneDynamic: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SceneTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SceneTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SceneTrait, rhs: GoogleHomeTypes.Google.SceneTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SceneTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SceneTrait.Attributes, rhs: GoogleHomeTypes.Google.SceneTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SceneTrait {
  public var supportsActivateSceneCommand: Swift.Bool {
    get
  }
  public func activateScene(dynamic: Swift.Bool) async throws
  public func activateSceneBatchable(dynamic: Swift.Bool) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ActivateSceneCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.SceneTrait {
  public var supportsDeactivateSceneCommand: Swift.Bool {
    get
  }
  public func deactivateScene() async throws
  public func deactivateSceneBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct DeactivateSceneCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.SceneTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case sceneReversible
    case sceneDynamic
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SceneTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SceneTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SceneTrait {
  public var sceneReversible: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var sceneDynamic: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.SceneTrait.ActivateSceneCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case dynamic
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SceneTrait.ActivateSceneCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SceneTrait.ActivateSceneCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.SceneTrait {
  public static func activateScene(dynamic: Swift.Bool) -> GoogleHomeSDK.AutomationCommand
  public static func deactivateScene() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct SelfTestTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SelfTestTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($manualTest) public var manualTest: GoogleHomeTypes.Google.SelfTestTrait.Test? {
      get
    }
    public var $manualTest: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SelfTestTrait.Test> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($audioTest) public var audioTest: GoogleHomeTypes.Google.SelfTestTrait.Test? {
      get
    }
    public var $audioTest: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SelfTestTrait.Test> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SelfTestTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SelfTestTrait, rhs: GoogleHomeTypes.Google.SelfTestTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SelfTestTrait.Attributes, rhs: GoogleHomeTypes.Google.SelfTestTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public struct Test : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let status: GoogleHomeTypes.Google.SelfTestTrait.SelfTestStatus
    public let startTimeSeconds: Swift.Int64
    public let endTimeSeconds: Swift.Int64
    public let testDeviceIds: [Swift.String]
    public let lastSuccessfulTestTimeSeconds: Swift.Int64
    public init(status: GoogleHomeTypes.Google.SelfTestTrait.SelfTestStatus, startTimeSeconds: Swift.Int64, endTimeSeconds: Swift.Int64, testDeviceIds: [Swift.String], lastSuccessfulTestTimeSeconds: Swift.Int64)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SelfTestTrait.Test, b: GoogleHomeTypes.Google.SelfTestTrait.Test) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DeviceStatus : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let deviceId: Swift.String
    public let errorCode: GoogleHomeTypes.Google.SelfTestTrait.ErrorCode
    public let spokenWhere: Swift.String
    public init(deviceId: Swift.String, errorCode: GoogleHomeTypes.Google.SelfTestTrait.ErrorCode, spokenWhere: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus, b: GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public struct StructureSelfTestEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let priority: Swift.UInt32?
      public let triggeredDeviceId: Swift.String?
      public let manualTest: GoogleHomeTypes.Google.SelfTestTrait.Test?
      public let audioTest: GoogleHomeTypes.Google.SelfTestTrait.Test?
      public let errorCode: Swift.String?
      public init(priority: Swift.UInt32?, triggeredDeviceId: Swift.String?, manualTest: GoogleHomeTypes.Google.SelfTestTrait.Test?, audioTest: GoogleHomeTypes.Google.SelfTestTrait.Test?, errorCode: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent.Payload, b: GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent, b: GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public var supportsUpdateStructureSelfTestStatusCommand: Swift.Bool {
    get
  }
  public func updateStructureSelfTestStatus(manualTest: GoogleHomeTypes.Google.SelfTestTrait.Test, audioTest: GoogleHomeTypes.Google.SelfTestTrait.Test) async throws
  public func updateStructureSelfTestStatusBatchable(manualTest: GoogleHomeTypes.Google.SelfTestTrait.Test, audioTest: GoogleHomeTypes.Google.SelfTestTrait.Test) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UpdateStructureSelfTestStatusCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public var supportsSetExecutionSummaryCommand: Swift.Bool {
    get
  }
  public func setExecutionSummary(warningDevices: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus], criticalDevices: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus]) async throws
  public func setExecutionSummaryBatchable(warningDevices: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus], criticalDevices: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetExecutionSummaryCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public enum SelfTestStatus : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case inProgress
    case completed
    case canceled
    case failed
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SelfTestTrait.SelfTestStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ErrorCode : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case smokeSensorFault
    case coSensorFault
    case tempSensorFault
    case humiditySensorFault
    case ambientLightSensorFault
    case passiveInfraredSensorFault
    case audioSpeakerFault
    case expired
    case expiringSoon
    case lowBattery
    case veryLowBattery
    case lossOfWifi
    case ledFault
    case lossOfPower
    case offline
    case buzzer
    case hardwareFault
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SelfTestTrait.ErrorCode
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case manualTest
    case audioTest
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SelfTestTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SelfTestTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SelfTestTrait {
  public var manualTest: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SelfTestTrait.Test> {
    get
  }
  public var audioTest: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SelfTestTrait.Test> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case priority
    case triggeredDeviceId
    case manualTest
    case audioTest
    case errorCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SelfTestTrait.StructureSelfTestEvent {
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var triggeredDeviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var manualTest: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SelfTestTrait.Test> {
    get
  }
  public var audioTest: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SelfTestTrait.Test> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait.UpdateStructureSelfTestStatusCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case manualTest
    case audioTest
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SelfTestTrait.UpdateStructureSelfTestStatusCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SelfTestTrait.UpdateStructureSelfTestStatusCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.SelfTestTrait.SetExecutionSummaryCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case warningDevices
    case criticalDevices
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SelfTestTrait.SetExecutionSummaryCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SelfTestTrait.SetExecutionSummaryCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.SelfTestTrait {
  public static func updateStructureSelfTestStatus(manualTest: GoogleHomeTypes.Google.SelfTestTrait.Test, audioTest: GoogleHomeTypes.Google.SelfTestTrait.Test) -> GoogleHomeSDK.AutomationCommand
  public static func setExecutionSummary(warningDevices: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus], criticalDevices: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus]) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.SelfTestTrait.Test {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case status
    case startTimeSeconds
    case endTimeSeconds
    case testDeviceIds
    case lastSuccessfulTestTimeSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SelfTestTrait.Test.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SelfTestTrait.Test.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.SelfTestTrait.Test {
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SelfTestTrait.SelfTestStatus> {
    get
  }
  public var startTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var endTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var testDeviceIds: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
  public var lastSuccessfulTestTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
}
extension GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case deviceId
    case errorCode
    case spokenWhere
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.SelfTestTrait.DeviceStatus {
  public var deviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var errorCode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SelfTestTrait.ErrorCode> {
    get
  }
  public var spokenWhere: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SetupTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SetupTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SetupTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SetupTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SetupTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SetupTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SetupTrait, rhs: GoogleHomeTypes.Google.SetupTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SetupTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SetupTrait.Attributes, rhs: GoogleHomeTypes.Google.SetupTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SetupTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SetupTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SetupTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SetupTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SharedTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SharedTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SharedTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SharedTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($deviceCanBeShared) public var deviceCanBeShared: Swift.Bool? {
      get
    }
    public var $deviceCanBeShared: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SharedTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SharedTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SharedTrait, rhs: GoogleHomeTypes.Google.SharedTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SharedTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SharedTrait.Attributes, rhs: GoogleHomeTypes.Google.SharedTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SharedTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case deviceCanBeShared
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SharedTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SharedTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SharedTrait {
  public var deviceCanBeShared: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SmokeCoAlarmSettingsTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait
  }
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($pathlightSensitivity) public var pathlightSensitivity: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.PathlightSensitivity? {
      get
    }
    public var $pathlightSensitivity: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.PathlightSensitivity> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableNightlyPromise) public var enableNightlyPromise: Swift.Bool? {
      get
    }
    public var $enableNightlyPromise: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableSteamCheck) public var enableSteamCheck: Swift.Bool? {
      get
    }
    public var $enableSteamCheck: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($enableHeadsUpAlert) public var enableHeadsUpAlert: Swift.Bool? {
      get
    }
    public var $enableHeadsUpAlert: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait, rhs: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attributes, rhs: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var pathlightSensitivityIsSet: Swift.Bool {
      get
    }
    final public func setPathlightSensitivity(_ value: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.PathlightSensitivity)
    final public func clearPathlightSensitivity()
    final public var enableNightlyPromiseIsSet: Swift.Bool {
      get
    }
    final public func setEnableNightlyPromise(_ value: Swift.Bool)
    final public func clearEnableNightlyPromise()
    final public var enableSteamCheckIsSet: Swift.Bool {
      get
    }
    final public func setEnableSteamCheck(_ value: Swift.Bool)
    final public func clearEnableSteamCheck()
    final public var enableHeadsUpAlertIsSet: Swift.Bool {
      get
    }
    final public func setEnableHeadsUpAlert(_ value: Swift.Bool)
    final public func clearEnableHeadsUpAlert()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait {
  public enum PathlightSensitivity : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case on
    case off
    case alwaysOn
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.PathlightSensitivity
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case pathlightSensitivity
    case enableNightlyPromise
    case enableSteamCheck
    case enableHeadsUpAlert
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait {
  public var pathlightSensitivity: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.PathlightSensitivity> {
    get
  }
  public var enableNightlyPromise: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var enableSteamCheck: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var enableHeadsUpAlert: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait {
  final public func setPathlightSensitivity(_ value: GoogleHomeTypes.Google.SmokeCoAlarmSettingsTrait.PathlightSensitivity)
  final public func setEnableNightlyPromise(_ value: Swift.Bool)
  final public func setEnableSteamCheck(_ value: Swift.Bool)
  final public func setEnableHeadsUpAlert(_ value: Swift.Bool)
}
extension GoogleHomeTypes.Google {
  public struct SmokeLevelConcentrationMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.MeasurementUnit? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.MeasurementUnit> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Int32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($levelValue) public var levelValue: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.ConcentrationLevel? {
      get
    }
    public var $levelValue: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.ConcentrationLevel> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait, rhs: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait {
  public enum ConcentrationLevel : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case low
    case medium
    case high
    case critical
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.ConcentrationLevel
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum MeasurementUnit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case partsPerMillion
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.MeasurementUnit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait {
  public struct SmokeLevelMeasurementFeature : GoogleHomeSDK.Bitmap {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let numericMeasurement: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.SmokeLevelMeasurementFeature
    public static let levelIndication: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.SmokeLevelMeasurementFeature
    public static let mediumLevel: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.SmokeLevelMeasurementFeature
    public static let criticalLevel: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.SmokeLevelMeasurementFeature
    public typealias ArrayLiteralElement = GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.SmokeLevelMeasurementFeature
    public typealias Element = GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.SmokeLevelMeasurementFeature
    public typealias RawValue = Swift.UInt32
  }
}
extension GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measurementUnit
    case measuredValue
    case levelValue
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait {
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.MeasurementUnit> {
    get
  }
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var levelValue: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait.ConcentrationLevel> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SoftwareUpdateTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SoftwareUpdateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func update(_ block: @Sendable (GoogleHomeTypes.Google.SoftwareUpdateTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.SoftwareUpdateTrait
  }
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($lastSoftwareUpdateTimeSeconds) public var lastSoftwareUpdateTimeSeconds: Swift.Int64? {
      get
    }
    public var $lastSoftwareUpdateTimeSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int64> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SoftwareUpdateTrait, rhs: GoogleHomeTypes.Google.SoftwareUpdateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SoftwareUpdateTrait.Attributes, rhs: GoogleHomeTypes.Google.SoftwareUpdateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait {
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var lastSoftwareUpdateTimeSecondsIsSet: Swift.Bool {
      get
    }
    final public func setLastSoftwareUpdateTimeSeconds(_ value: Swift.Int64)
    final public func clearLastSoftwareUpdateTimeSeconds()
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait {
  public var supportsSoftwareUpdateCommand: Swift.Bool {
    get
  }
  public func softwareUpdate() async throws
  public func softwareUpdateBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SoftwareUpdateCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case lastSoftwareUpdateTimeSeconds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SoftwareUpdateTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SoftwareUpdateTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SoftwareUpdateTrait {
  public var lastSoftwareUpdateTimeSeconds: GoogleHomeSDK.TypedExpression<Swift.Int64> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.SoftwareUpdateTrait {
  final public func setLastSoftwareUpdateTimeSeconds(_ value: Swift.Int64)
}
extension GoogleHomeTypes.Google.SoftwareUpdateTrait {
  public static func softwareUpdate() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct SoilMoistureMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SoilMoistureMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SoilMoistureMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.UInt32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.UInt32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.UInt32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt32? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SoilMoistureMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait, rhs: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SoilMoistureMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SoilMoistureMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SoilMoistureMeasurementTrait {
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SoundSensingTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SoundSensingTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SoundSensingTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentSoundActivity) public var currentSoundActivity: [GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity]? {
      get
    }
    public var $currentSoundActivity: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SoundSensingTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SoundSensingTrait, rhs: GoogleHomeTypes.Google.SoundSensingTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SoundSensingTrait.Attributes, rhs: GoogleHomeTypes.Google.SoundSensingTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait {
  public struct ClipData : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let soundTrackId: Swift.String
    public init(soundTrackId: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SoundSensingTrait.ClipData, b: GoogleHomeTypes.Google.SoundSensingTrait.ClipData) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SoundActivity : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let id: Swift.UInt32
    public let startTimeSec: Swift.UInt32?
    public let endTimeSec: Swift.UInt32?
    public let soundClipData: GoogleHomeTypes.Google.SoundSensingTrait.ClipData
    public let soundType: GoogleHomeTypes.Google.SoundSensingTrait.SoundType
    public init(id: Swift.UInt32, startTimeSec: Swift.UInt32?, endTimeSec: Swift.UInt32?, soundClipData: GoogleHomeTypes.Google.SoundSensingTrait.ClipData, soundType: GoogleHomeTypes.Google.SoundSensingTrait.SoundType)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity, b: GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait {
  public enum SoundType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unknown
    case smokeAlarm
    case coAlarm
    case glassBreak
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SoundSensingTrait.SoundType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentSoundActivity
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SoundSensingTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SoundSensingTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SoundSensingTrait {
  public var currentSoundActivity: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait.ClipData {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case soundTrackId
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SoundSensingTrait.ClipData.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SoundSensingTrait.ClipData.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.SoundSensingTrait.ClipData {
  public var soundTrackId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case id
    case startTimeSec
    case endTimeSec
    case soundClipData
    case soundType
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.SoundSensingTrait.SoundActivity {
  public var id: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var startTimeSec: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var endTimeSec: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var soundClipData: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SoundSensingTrait.ClipData> {
    get
  }
  public var soundType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SoundSensingTrait.SoundType> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SpeedMeasurementTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SpeedMeasurementTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measurementUnit) public var measurementUnit: GoogleHomeTypes.Google.SpeedMeasurementTrait.MeasurementUnit? {
      get
    }
    public var $measurementUnit: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SpeedMeasurementTrait.MeasurementUnit> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($measuredValue) public var measuredValue: Swift.Int32? {
      get
    }
    public var $measuredValue: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($minMeasuredValue) public var minMeasuredValue: Swift.UInt32? {
      get
    }
    public var $minMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxMeasuredValue) public var maxMeasuredValue: Swift.UInt32? {
      get
    }
    public var $maxMeasuredValue: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($tolerance) public var tolerance: Swift.UInt32? {
      get
    }
    public var $tolerance: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SpeedMeasurementTrait, rhs: GoogleHomeTypes.Google.SpeedMeasurementTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SpeedMeasurementTrait.Attributes, rhs: GoogleHomeTypes.Google.SpeedMeasurementTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait {
  public enum MeasurementUnit : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case rotationsPerMinute
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SpeedMeasurementTrait.MeasurementUnit
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SpeedMeasurementTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case measurementUnit
    case measuredValue
    case minMeasuredValue
    case maxMeasuredValue
    case tolerance
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SpeedMeasurementTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SpeedMeasurementTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SpeedMeasurementTrait {
  public var measurementUnit: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SpeedMeasurementTrait.MeasurementUnit> {
    get
  }
  public var measuredValue: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var minMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var maxMeasuredValue: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var tolerance: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct StatusReportTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.StatusReportTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.StatusReportTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.StatusReportTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentStatusReports) public var currentStatusReports: [GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport]? {
      get
    }
    public var $currentStatusReports: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.StatusReportTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.StatusReportTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.StatusReportTrait, rhs: GoogleHomeTypes.Google.StatusReportTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.StatusReportTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.StatusReportTrait.Attributes, rhs: GoogleHomeTypes.Google.StatusReportTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.StatusReportTrait {
  public struct CurrentStatusReport : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let targetDeviceId: Swift.String
    public let priority: Swift.UInt64
    public let blocking: Swift.Bool
    public let statusCode: Swift.String
    public init(targetDeviceId: Swift.String, priority: Swift.UInt64, blocking: Swift.Bool, statusCode: Swift.String)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport, b: GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.StatusReportTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentStatusReports
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.StatusReportTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.StatusReportTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.StatusReportTrait {
  public var currentStatusReports: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case targetDeviceId
    case priority
    case blocking
    case statusCode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.StatusReportTrait.CurrentStatusReport {
  public var targetDeviceId: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var priority: GoogleHomeSDK.TypedExpression<Swift.UInt64> {
    get
  }
  public var blocking: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var statusCode: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct TalkTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.TalkTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.TalkTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.TalkTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($audioCommunicationType) public var audioCommunicationType: GoogleHomeTypes.Google.TalkTrait.AudioCommunicationType? {
      get
    }
    public var $audioCommunicationType: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.TalkTrait.AudioCommunicationType> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentlyInUse) public var currentlyInUse: Swift.Bool? {
      get
    }
    public var $currentlyInUse: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TalkTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.TalkTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TalkTrait, rhs: GoogleHomeTypes.Google.TalkTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TalkTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TalkTrait.Attributes, rhs: GoogleHomeTypes.Google.TalkTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TalkTrait {
  public enum AudioCommunicationType : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case fdx
    case hdx
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.TalkTrait.AudioCommunicationType
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TalkTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case audioCommunicationType
    case currentlyInUse
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TalkTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TalkTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.TalkTrait {
  public var audioCommunicationType: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.TalkTrait.AudioCommunicationType> {
    get
  }
  public var currentlyInUse: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct ThreadNetworkCapabilitiesTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($internetAccessOption) public var internetAccessOption: GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.InternetAccessOption? {
      get
    }
    public var $internetAccessOption: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.InternetAccessOption> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait, rhs: GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attributes, rhs: GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait {
  public enum InternetAccessOption : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case none
    case all
    case nat64Only
    case dhcpv6PdOnly
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.InternetAccessOption
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case internetAccessOption
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait {
  public var internetAccessOption: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ThreadNetworkCapabilitiesTrait.InternetAccessOption> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct TimerTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.TimerTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.TimerTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.TimerTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($maxTimerLimitSeconds) public var maxTimerLimitSeconds: Swift.Int32? {
      get
    }
    public var $maxTimerLimitSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($commandOnlyTimer) public var commandOnlyTimer: Swift.Bool? {
      get
    }
    public var $commandOnlyTimer: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timerPaused) public var timerPaused: Swift.Bool? {
      get
    }
    public var $timerPaused: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($timerRemainingSeconds) public var timerRemainingSeconds: Swift.Int32? {
      get
    }
    public var $timerRemainingSeconds: GoogleHomeSDK.TraitAttribute<Swift.Int32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TimerTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.TimerTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TimerTrait, rhs: GoogleHomeTypes.Google.TimerTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TimerTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TimerTrait.Attributes, rhs: GoogleHomeTypes.Google.TimerTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TimerTrait {
  public var supportsTimerStartCommand: Swift.Bool {
    get
  }
  public func timerStart(timerTimeSeconds: Swift.Int32) async throws
  public func timerStartBatchable(timerTimeSeconds: Swift.Int32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TimerStartCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.TimerTrait {
  public var supportsTimerAdjustCommand: Swift.Bool {
    get
  }
  public func timerAdjust(adjustmentTimeSeconds: Swift.Int32) async throws
  public func timerAdjustBatchable(adjustmentTimeSeconds: Swift.Int32) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TimerAdjustCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.TimerTrait {
  public var supportsTimerPauseCommand: Swift.Bool {
    get
  }
  public func timerPause() async throws
  public func timerPauseBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TimerPauseCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.TimerTrait {
  public var supportsTimerResumeCommand: Swift.Bool {
    get
  }
  public func timerResume() async throws
  public func timerResumeBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TimerResumeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.TimerTrait {
  public var supportsTimerCancelCommand: Swift.Bool {
    get
  }
  public func timerCancel() async throws
  public func timerCancelBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct TimerCancelCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.TimerTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case maxTimerLimitSeconds
    case commandOnlyTimer
    case timerPaused
    case timerRemainingSeconds
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TimerTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TimerTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.TimerTrait {
  public var maxTimerLimitSeconds: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var commandOnlyTimer: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var timerPaused: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var timerRemainingSeconds: GoogleHomeSDK.TypedExpression<Swift.Int32> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.TimerTrait.TimerStartCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case timerTimeSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TimerTrait.TimerStartCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TimerTrait.TimerStartCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.TimerTrait.TimerAdjustCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case adjustmentTimeSeconds
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TimerTrait.TimerAdjustCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TimerTrait.TimerAdjustCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.TimerTrait {
  public static func timerStart(timerTimeSeconds: Swift.Int32) -> GoogleHomeSDK.AutomationCommand
  public static func timerAdjust(adjustmentTimeSeconds: Swift.Int32) -> GoogleHomeSDK.AutomationCommand
  public static func timerPause() -> GoogleHomeSDK.AutomationCommand
  public static func timerResume() -> GoogleHomeSDK.AutomationCommand
  public static func timerCancel() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct TogglesTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.TogglesTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.TogglesTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.TogglesTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($supportedToggles) public var supportedToggles: [GoogleHomeTypes.Google.TogglesTrait.Toggle]? {
      get
    }
    public var $supportedToggles: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.TogglesTrait.Toggle]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentToggleSettings) public var currentToggleSettings: [GoogleHomeTypes.Google.TogglesTrait.ToggleSetting]? {
      get
    }
    public var $currentToggleSettings: GoogleHomeSDK.TraitAttribute<[GoogleHomeTypes.Google.TogglesTrait.ToggleSetting]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TogglesTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.TogglesTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TogglesTrait, rhs: GoogleHomeTypes.Google.TogglesTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TogglesTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.TogglesTrait.Attributes, rhs: GoogleHomeTypes.Google.TogglesTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.TogglesTrait {
  public struct ToggleSynonyms : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let language: Swift.String
    public let toggleSynonyms: [Swift.String]
    public init(language: Swift.String, toggleSynonyms: [Swift.String])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms, b: GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Toggle : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let name: Swift.String
    public let synonyms: [GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms]
    public init(name: Swift.String, synonyms: [GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.TogglesTrait.Toggle, b: GoogleHomeTypes.Google.TogglesTrait.Toggle) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ToggleSetting : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public let toggleName: Swift.String
    public let enabled: Swift.Bool
    public init(toggleName: Swift.String, enabled: Swift.Bool)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public init()
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.TogglesTrait.ToggleSetting, b: GoogleHomeTypes.Google.TogglesTrait.ToggleSetting) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.TogglesTrait {
  public var supportsChangeToggleSettingsCommand: Swift.Bool {
    get
  }
  public func changeToggleSettings(updatedToggleSettings: [GoogleHomeTypes.Google.TogglesTrait.ToggleSetting]) async throws
  public func changeToggleSettingsBatchable(updatedToggleSettings: [GoogleHomeTypes.Google.TogglesTrait.ToggleSetting]) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct ChangeToggleSettingsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.TogglesTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case supportedToggles
    case currentToggleSettings
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TogglesTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TogglesTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.TogglesTrait {
  public var supportedToggles: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.TogglesTrait.Toggle]> {
    get
  }
  public var currentToggleSettings: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.TogglesTrait.ToggleSetting]> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.TogglesTrait.ChangeToggleSettingsCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case updatedToggleSettings
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TogglesTrait.ChangeToggleSettingsCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TogglesTrait.ChangeToggleSettingsCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.TogglesTrait {
  public static func changeToggleSettings(updatedToggleSettings: [GoogleHomeTypes.Google.TogglesTrait.ToggleSetting]) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case language
    case toggleSynonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms {
  public var language: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var toggleSynonyms: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.TogglesTrait.Toggle {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case name
    case synonyms
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TogglesTrait.Toggle.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TogglesTrait.Toggle.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.TogglesTrait.Toggle {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var synonyms: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.TogglesTrait.ToggleSynonyms]> {
    get
  }
}
extension GoogleHomeTypes.Google.TogglesTrait.ToggleSetting {
  public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case toggleName
    case enabled
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.TogglesTrait.ToggleSetting.StructFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.TogglesTrait.ToggleSetting.StructFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.TogglesTrait.ToggleSetting {
  public var toggleName: GoogleHomeSDK.TypedExpression<Swift.String> {
    get
  }
  public var enabled: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
}
public struct GoogleAirCoolerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleAirCoolerDeviceType.GoogleAirCoolerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleAirCoolerDeviceType.GoogleAirCoolerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleAirCoolerGoogleTraits : Swift.Sendable {
    public let extendedFanControlTrait: GoogleHomeTypes.Google.ExtendedFanControlTrait?
    public let relativeHumidityControlTrait: GoogleHomeTypes.Google.RelativeHumidityControlTrait?
    public let extendedThermostatTrait: GoogleHomeTypes.Google.ExtendedThermostatTrait?
  }
  public struct GoogleAirCoolerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let fanControlTrait: GoogleHomeTypes.Matter.FanControlTrait?
    public let relativeHumidityMeasurementTrait: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let thermostatTrait: GoogleHomeTypes.Matter.ThermostatTrait?
    public let thermostatUserInterfaceConfigurationTrait: GoogleHomeTypes.Matter.ThermostatUserInterfaceConfigurationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleAirFreshenerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleAirFreshenerDeviceType.GoogleAirFreshenerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleAirFreshenerDeviceType.GoogleAirFreshenerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleAirFreshenerGoogleTraits : Swift.Sendable {
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct GoogleAirFreshenerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleAlarmDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleAlarmDeviceType.GoogleAlarmGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleAlarmDeviceType.GoogleAlarmMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleAlarmGoogleTraits : Swift.Sendable {
    public let extendedAirQualityTrait: GoogleHomeTypes.Google.ExtendedAirQualityTrait?
    public let preFilterMonitoringTrait: GoogleHomeTypes.Google.PreFilterMonitoringTrait?
    public let max2FilterMonitoringTrait: GoogleHomeTypes.Google.Max2FilterMonitoringTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
    public let speedMeasurementTrait: GoogleHomeTypes.Google.SpeedMeasurementTrait?
    public let leafWetnessMeasurementTrait: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait?
    public let soilMoistureMeasurementTrait: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait?
    public let smokeLevelConcentrationMeasurementTrait: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait?
  }
  public struct GoogleAlarmMatterTraits : Swift.Sendable {
    public let smokeCoAlarmTrait: GoogleHomeTypes.Matter.SmokeCoAlarmTrait?
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
    public let airQualityTrait: GoogleHomeTypes.Matter.AirQualityTrait?
    public let hepaFilterMonitoringTrait: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait?
    public let pressureMeasurementTrait: GoogleHomeTypes.Matter.PressureMeasurementTrait?
    public let flowMeasurementTrait: GoogleHomeTypes.Matter.FlowMeasurementTrait?
    public let illuminanceMeasurementTrait: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait?
    public let carbonDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait?
    public let pumpConfigurationAndControlTrait: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait?
    public let totalVolatileOrganicCompoundsConcentrationMeasurementTrait: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let pm25ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait?
    public let pm10ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleAudioVideoReceiverDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleAudioVideoReceiverDeviceType.GoogleAudioVideoReceiverGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleAudioVideoReceiverDeviceType.GoogleAudioVideoReceiverMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleAudioVideoReceiverGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleAudioVideoReceiverMatterTraits : Swift.Sendable {
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleAutoDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleAutoDeviceType.GoogleAutoGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleAutoDeviceType.GoogleAutoMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleAutoGoogleTraits : Swift.Sendable {
    public let lockUnlockTrait: GoogleHomeTypes.Google.LockUnlockTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct GoogleAutoMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBagDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBagDeviceType.GoogleBagGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBagGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBathtubDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBathtubDeviceType.GoogleBathtubGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleBathtubDeviceType.GoogleBathtubMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBathtubGoogleTraits : Swift.Sendable {
    public let fillTrait: GoogleHomeTypes.Google.FillTrait?
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleBathtubMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBedDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBedDeviceType.GoogleBedGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBedGoogleTraits : Swift.Sendable {
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBikeDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBikeDeviceType.GoogleBikeGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBikeGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBlanketDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBlanketDeviceType.GoogleBlanketGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleBlanketDeviceType.GoogleBlanketMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBlanketGoogleTraits : Swift.Sendable {
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct GoogleBlanketMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBlenderDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBlenderDeviceType.GoogleBlenderGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleBlenderDeviceType.GoogleBlenderMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBlenderGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleBlenderMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBoilerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleBoilerDeviceType.GoogleBoilerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleBoilerDeviceType.GoogleBoilerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleBoilerGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct GoogleBoilerMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleBorderRouterDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleCameraDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleCameraDeviceType.GoogleCameraGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleCameraGoogleTraits : Swift.Sendable {
    public let cameraStreamTrait: GoogleHomeTypes.Google.CameraStreamTrait?
    public let clipTrait: GoogleHomeTypes.Google.ClipTrait?
    public let recordTrait: GoogleHomeTypes.Google.RecordTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleCatDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleCatDeviceType.GoogleCatGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleCatGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleChargerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleChargerDeviceType.GoogleChargerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleChargerDeviceType.GoogleChargerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleChargerGoogleTraits : Swift.Sendable {
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
  }
  public struct GoogleChargerMatterTraits : Swift.Sendable {
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleClockDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleClockDeviceType.GoogleClockGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleClockGoogleTraits : Swift.Sendable {
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleClockradioDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleClockradioDeviceType.GoogleClockradioGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleClockradioGoogleTraits : Swift.Sendable {
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleClosetDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleClosetDeviceType.GoogleClosetGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleClosetGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleClothingDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleClothingDeviceType.GoogleClothingGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleClothingGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleCoffeeMakerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleCoffeeMakerDeviceType.GoogleCoffeeMakerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleCoffeeMakerDeviceType.GoogleCoffeeMakerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleCoffeeMakerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct GoogleCoffeeMakerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleComputerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleComputerDeviceType.GoogleComputerGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleComputerGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleControlPanelDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleControlPanelDeviceType.GoogleControlPanelGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleControlPanelGoogleTraits : Swift.Sendable {
    public let buildingManagementTrait: GoogleHomeTypes.Google.BuildingManagementTrait?
    public let elevatorControlTrait: GoogleHomeTypes.Google.ElevatorControlTrait?
    public let parkingLocationTrait: GoogleHomeTypes.Google.ParkingLocationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDehydratorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleDehydratorDeviceType.GoogleDehydratorGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleDehydratorDeviceType.GoogleDehydratorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleDehydratorGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleDehydratorMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDisplayDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GoogleDisplayDeviceType.GoogleDisplayMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleDisplayMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDockDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDoorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleDoorDeviceType.GoogleDoorGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleDoorDeviceType.GoogleDoorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleDoorGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public struct GoogleDoorMatterTraits : Swift.Sendable {
    public let doorLockTrait: GoogleHomeTypes.Matter.DoorLockTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDoorbellDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleDoorbellDeviceType.GoogleDoorbellGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleDoorbellGoogleTraits : Swift.Sendable {
    public let doorbellPressTrait: GoogleHomeTypes.Google.DoorbellPressTrait?
    public let cameraStreamTrait: GoogleHomeTypes.Google.CameraStreamTrait?
    public let clipTrait: GoogleHomeTypes.Google.ClipTrait?
    public let recordTrait: GoogleHomeTypes.Google.RecordTrait?
    public let objectDetectionTrait: GoogleHomeTypes.Google.ObjectDetectionTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDrawerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleDrawerDeviceType.GoogleDrawerGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleDrawerGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleDeviceGroupDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleElevatorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleElevatorDeviceType.GoogleElevatorGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleElevatorGoogleTraits : Swift.Sendable {
    public let elevatorControlTrait: GoogleHomeTypes.Google.ElevatorControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleFaucetDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleFaucetDeviceType.GoogleFaucetGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleFaucetDeviceType.GoogleFaucetMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleFaucetGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
    public let dispenseTrait: GoogleHomeTypes.Google.DispenseTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleFaucetMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleFilterDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleFilterDeviceType.GoogleFilterGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleFilterDeviceType.GoogleFilterMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleFilterGoogleTraits : Swift.Sendable {
    public let extendedAirQualityTrait: GoogleHomeTypes.Google.ExtendedAirQualityTrait?
    public let preFilterMonitoringTrait: GoogleHomeTypes.Google.PreFilterMonitoringTrait?
    public let max2FilterMonitoringTrait: GoogleHomeTypes.Google.Max2FilterMonitoringTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
    public let smokeLevelConcentrationMeasurementTrait: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait?
  }
  public struct GoogleFilterMatterTraits : Swift.Sendable {
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
    public let airQualityTrait: GoogleHomeTypes.Matter.AirQualityTrait?
    public let hepaFilterMonitoringTrait: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait?
    public let carbonDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait?
    public let totalVolatileOrganicCompoundsConcentrationMeasurementTrait: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait?
    public let pm25ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait?
    public let pm10ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleFireplaceDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleFireplaceDeviceType.GoogleFireplaceGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleFireplaceDeviceType.GoogleFireplaceMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleFireplaceGoogleTraits : Swift.Sendable {
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct GoogleFireplaceMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleFreezerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleFreezerDeviceType.GoogleFreezerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleFreezerDeviceType.GoogleFreezerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleFreezerGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct GoogleFreezerMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleFryerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleFryerDeviceType.GoogleFryerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleFryerDeviceType.GoogleFryerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleFryerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleFryerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleGameConsoleDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleGameConsoleDeviceType.GoogleGameConsoleGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleGameConsoleDeviceType.GoogleGameConsoleMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleGameConsoleGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleGameConsoleMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleGarageDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleGarageDeviceType.GoogleGarageGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleGarageGoogleTraits : Swift.Sendable {
    public let lockUnlockTrait: GoogleHomeTypes.Google.LockUnlockTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleGardenDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleGardenDeviceType.GoogleGardenGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleGardenDeviceType.GoogleGardenMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleGardenGoogleTraits : Swift.Sendable {
    public let leafWetnessMeasurementTrait: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait?
    public let soilMoistureMeasurementTrait: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait?
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
    public let relativeHumidityControlTrait: GoogleHomeTypes.Google.RelativeHumidityControlTrait?
  }
  public struct GoogleGardenMatterTraits : Swift.Sendable {
    public let illuminanceMeasurementTrait: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let relativeHumidityMeasurementTrait: GoogleHomeTypes.Matter.RelativeHumidityMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleGateDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleGateDeviceType.GoogleGateGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleGateGoogleTraits : Swift.Sendable {
    public let lockUnlockTrait: GoogleHomeTypes.Google.LockUnlockTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleGenericSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleGenericSensorDeviceType.GoogleGenericSensorGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleGenericSensorDeviceType.GoogleGenericSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleGenericSensorGoogleTraits : Swift.Sendable {
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
    public let extendedAirQualityTrait: GoogleHomeTypes.Google.ExtendedAirQualityTrait?
    public let preFilterMonitoringTrait: GoogleHomeTypes.Google.PreFilterMonitoringTrait?
    public let max2FilterMonitoringTrait: GoogleHomeTypes.Google.Max2FilterMonitoringTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
    public let speedMeasurementTrait: GoogleHomeTypes.Google.SpeedMeasurementTrait?
    public let leafWetnessMeasurementTrait: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait?
    public let soilMoistureMeasurementTrait: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait?
    public let smokeLevelConcentrationMeasurementTrait: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait?
  }
  public struct GoogleGenericSensorMatterTraits : Swift.Sendable {
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
    public let smokeCoAlarmTrait: GoogleHomeTypes.Matter.SmokeCoAlarmTrait?
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
    public let airQualityTrait: GoogleHomeTypes.Matter.AirQualityTrait?
    public let hepaFilterMonitoringTrait: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait?
    public let pressureMeasurementTrait: GoogleHomeTypes.Matter.PressureMeasurementTrait?
    public let flowMeasurementTrait: GoogleHomeTypes.Matter.FlowMeasurementTrait?
    public let illuminanceMeasurementTrait: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait?
    public let carbonDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait?
    public let pumpConfigurationAndControlTrait: GoogleHomeTypes.Matter.PumpConfigurationAndControlTrait?
    public let totalVolatileOrganicCompoundsConcentrationMeasurementTrait: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let pm25ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait?
    public let pm10ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleGrillDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleGrillDeviceType.GoogleGrillGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleGrillDeviceType.GoogleGrillMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleGrillGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleGrillMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleHeadphonesDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleHeadphonesDeviceType.GoogleHeadphonesGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleHeadphonesGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleIcemakerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleIcemakerDeviceType.GoogleIcemakerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleIcemakerDeviceType.GoogleIcemakerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleIcemakerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
  }
  public struct GoogleIcemakerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleIDBadgeDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleIDBadgeDeviceType.GoogleIDBadgeGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleIDBadgeGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleIntercomDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleIntercomDeviceType.GoogleIntercomGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleIntercomDeviceType.GoogleIntercomMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleIntercomGoogleTraits : Swift.Sendable {
    public let talkTrait: GoogleHomeTypes.Google.TalkTrait?
  }
  public struct GoogleIntercomMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleKettleDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleKettleDeviceType.GoogleKettleGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleKettleDeviceType.GoogleKettleMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleKettleGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct GoogleKettleMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleKeysDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleKeysDeviceType.GoogleKeysGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleKeysGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleLaptopDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleLaptopDeviceType.GoogleLaptopGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleLaptopGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleLocatorTagDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleLocatorTagDeviceType.GoogleLocatorTagGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleLocatorTagGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleMailboxDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleMailboxDeviceType.GoogleMailboxGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleMailboxGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleMicrophoneDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GoogleMicrophoneDeviceType.GoogleMicrophoneMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleMicrophoneMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleMixerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleMixerDeviceType.GoogleMixerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleMixerDeviceType.GoogleMixerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleMixerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleMixerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleMopDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleMopDeviceType.GoogleMopGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleMopDeviceType.GoogleMopMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleMopGoogleTraits : Swift.Sendable {
    public let dockTrait: GoogleHomeTypes.Google.DockTrait?
    public let rebootTrait: GoogleHomeTypes.Google.RebootTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
  }
  public struct GoogleMopMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleMowerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleMowerDeviceType.GoogleMowerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleMowerDeviceType.GoogleMowerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleMowerGoogleTraits : Swift.Sendable {
    public let dockTrait: GoogleHomeTypes.Google.DockTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
    public let extendedPowerSourceTrait: GoogleHomeTypes.Google.ExtendedPowerSourceTrait?
  }
  public struct GoogleMowerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let powerSourceTrait: GoogleHomeTypes.Matter.PowerSourceTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleMulticookerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleMulticookerDeviceType.GoogleMulticookerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleMulticookerDeviceType.GoogleMulticookerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleMulticookerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleMulticookerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleNetworkDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleNetworkDeviceType.GoogleNetworkGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleNetworkGoogleTraits : Swift.Sendable {
    public let networkControlTrait: GoogleHomeTypes.Google.NetworkControlTrait?
    public let rebootTrait: GoogleHomeTypes.Google.RebootTrait?
    public let softwareUpdateTrait: GoogleHomeTypes.Google.SoftwareUpdateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleNotebookDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleNotebookDeviceType.GoogleNotebookGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleNotebookGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePassportDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GooglePassportDeviceType.GooglePassportGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePassportGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePergolaDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GooglePergolaDeviceType.GooglePergolaGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePergolaGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
    public let rotationTrait: GoogleHomeTypes.Google.RotationTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePetFeederDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GooglePetFeederDeviceType.GooglePetFeederGoogleTraits
  public let matterTraits: GoogleHomeTypes.GooglePetFeederDeviceType.GooglePetFeederMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePetFeederGoogleTraits : Swift.Sendable {
    public let dispenseTrait: GoogleHomeTypes.Google.DispenseTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GooglePetFeederMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePhoneDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GooglePhoneDeviceType.GooglePhoneGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePhoneGoogleTraits : Swift.Sendable {
    public let geofenceTrait: GoogleHomeTypes.Google.GeofenceTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePictureDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GooglePictureDeviceType.GooglePictureGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePictureGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePressureCookerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GooglePressureCookerDeviceType.GooglePressureCookerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GooglePressureCookerDeviceType.GooglePressureCookerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePressureCookerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
  }
  public struct GooglePressureCookerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GooglePowerControlDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GooglePowerControlDeviceType.GooglePowerControlMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GooglePowerControlMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleRadiatorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleRadiatorDeviceType.GoogleRadiatorGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleRadiatorDeviceType.GoogleRadiatorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleRadiatorGoogleTraits : Swift.Sendable {
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct GoogleRadiatorMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleRainDetectionSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GoogleRainDetectionSensorDeviceType.GoogleRainDetectionSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleRainDetectionSensorMatterTraits : Swift.Sendable {
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleRobotDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleRobotDeviceType.GoogleRobotGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleRobotDeviceType.GoogleRobotMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleRobotGoogleTraits : Swift.Sendable {
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let dockTrait: GoogleHomeTypes.Google.DockTrait?
  }
  public struct GoogleRobotMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleRoofDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleRoofDeviceType.GoogleRoofGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleRoofGoogleTraits : Swift.Sendable {
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleRouterDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleRouterDeviceType.GoogleRouterGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleRouterGoogleTraits : Swift.Sendable {
    public let networkControlTrait: GoogleHomeTypes.Google.NetworkControlTrait?
    public let rebootTrait: GoogleHomeTypes.Google.RebootTrait?
    public let softwareUpdateTrait: GoogleHomeTypes.Google.SoftwareUpdateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleRoutineDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSceneDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSceneDeviceType.GoogleSceneGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSceneGoogleTraits : Swift.Sendable {
    public let sceneTrait: GoogleHomeTypes.Google.SceneTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleScreenDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GoogleScreenDeviceType.GoogleScreenMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleScreenMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSecuritySystemDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSecuritySystemDeviceType.GoogleSecuritySystemGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSecuritySystemGoogleTraits : Swift.Sendable {
    public let armDisarmTrait: GoogleHomeTypes.Google.ArmDisarmTrait?
    public let statusReportTrait: GoogleHomeTypes.Google.StatusReportTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSecurityTagDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSecurityTagDeviceType.GoogleSecurityTagGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSecurityTagGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSetTopBoxDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSetTopBoxDeviceType.GoogleSetTopBoxGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSetTopBoxDeviceType.GoogleSetTopBoxMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSetTopBoxGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedChannelTrait: GoogleHomeTypes.Google.ExtendedChannelTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleSetTopBoxMatterTraits : Swift.Sendable {
    public let channelTrait: GoogleHomeTypes.Matter.ChannelTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleShowerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleShowerDeviceType.GoogleShowerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleShowerDeviceType.GoogleShowerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleShowerGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleShowerMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSoundbarDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSoundbarDeviceType.GoogleSoundbarGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSoundbarDeviceType.GoogleSoundbarMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSoundbarGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleSoundbarMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSousVideDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSousVideDeviceType.GoogleSousVideGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSousVideDeviceType.GoogleSousVideMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSousVideGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleSousVideMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSpeakerGroupDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSpeakerGroupDeviceType.GoogleSpeakerGroupGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSpeakerGroupDeviceType.GoogleSpeakerGroupMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSpeakerGroupGoogleTraits : Swift.Sendable {
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleSpeakerGroupMatterTraits : Swift.Sendable {
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSpeakerPairDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSpeakerPairDeviceType.GoogleSpeakerPairGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSpeakerPairDeviceType.GoogleSpeakerPairMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSpeakerPairGoogleTraits : Swift.Sendable {
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleSpeakerPairMatterTraits : Swift.Sendable {
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSprinklerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSprinklerDeviceType.GoogleSprinklerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSprinklerDeviceType.GoogleSprinklerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSprinklerGoogleTraits : Swift.Sendable {
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleSprinklerMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleStandmixerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleStandmixerDeviceType.GoogleStandmixerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleStandmixerDeviceType.GoogleStandmixerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleStandmixerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleStandmixerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleStreamingBoxDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleStreamingBoxDeviceType.GoogleStreamingBoxGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleStreamingBoxDeviceType.GoogleStreamingBoxMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleStreamingBoxGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedChannelTrait: GoogleHomeTypes.Google.ExtendedChannelTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleStreamingBoxMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let channelTrait: GoogleHomeTypes.Matter.ChannelTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleStreamingSoundbarDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleStreamingSoundbarDeviceType.GoogleStreamingSoundbarGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleStreamingSoundbarDeviceType.GoogleStreamingSoundbarMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleStreamingSoundbarGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleStreamingSoundbarMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleStreamingStickDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleStreamingStickDeviceType.GoogleStreamingStickGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleStreamingStickDeviceType.GoogleStreamingStickMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleStreamingStickGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleStreamingStickMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleStylerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleStylerDeviceType.GoogleStylerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleStylerDeviceType.GoogleStylerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleStylerGoogleTraits : Swift.Sendable {
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
  }
  public struct GoogleStylerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleSyncboxDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleSyncboxDeviceType.GoogleSyncboxGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleSyncboxDeviceType.GoogleSyncboxMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleSyncboxGoogleTraits : Swift.Sendable {
    public let togglesTrait: GoogleHomeTypes.Google.TogglesTrait?
    public let extendedModeSelectTrait: GoogleHomeTypes.Google.ExtendedModeSelectTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleSyncboxMatterTraits : Swift.Sendable {
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleTabletDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleTabletDeviceType.GoogleTabletGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleTabletGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleToiletDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleToyDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleToyDeviceType.GoogleToyGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleToyGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleTVDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleTVDeviceType.GoogleTVGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleTVDeviceType.GoogleTVMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleTVGoogleTraits : Swift.Sendable {
    public let extendedApplicationLauncherTrait: GoogleHomeTypes.Google.ExtendedApplicationLauncherTrait?
    public let extendedChannelTrait: GoogleHomeTypes.Google.ExtendedChannelTrait?
    public let extendedMediaInputTrait: GoogleHomeTypes.Google.ExtendedMediaInputTrait?
    public let extendedMediaPlaybackTrait: GoogleHomeTypes.Google.ExtendedMediaPlaybackTrait?
    public let mediaActivityStateTrait: GoogleHomeTypes.Google.MediaActivityStateTrait?
    public let extendedLevelControlTrait: GoogleHomeTypes.Google.ExtendedLevelControlTrait?
  }
  public struct GoogleTVMatterTraits : Swift.Sendable {
    public let channelTrait: GoogleHomeTypes.Matter.ChannelTrait?
    public let mediaPlaybackTrait: GoogleHomeTypes.Matter.MediaPlaybackTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let levelControlTrait: GoogleHomeTypes.Matter.LevelControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleUmbrellaDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleUmbrellaDeviceType.GoogleUmbrellaGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleUmbrellaGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleVentilatorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleVentilatorDeviceType.GoogleVentilatorGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleVentilatorDeviceType.GoogleVentilatorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleVentilatorGoogleTraits : Swift.Sendable {
    public let extendedAirQualityTrait: GoogleHomeTypes.Google.ExtendedAirQualityTrait?
    public let preFilterMonitoringTrait: GoogleHomeTypes.Google.PreFilterMonitoringTrait?
    public let max2FilterMonitoringTrait: GoogleHomeTypes.Google.Max2FilterMonitoringTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
    public let leafWetnessMeasurementTrait: GoogleHomeTypes.Google.LeafWetnessMeasurementTrait?
    public let soilMoistureMeasurementTrait: GoogleHomeTypes.Google.SoilMoistureMeasurementTrait?
    public let smokeLevelConcentrationMeasurementTrait: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait?
  }
  public struct GoogleVentilatorMatterTraits : Swift.Sendable {
    public let smokeCoAlarmTrait: GoogleHomeTypes.Matter.SmokeCoAlarmTrait?
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
    public let airQualityTrait: GoogleHomeTypes.Matter.AirQualityTrait?
    public let hepaFilterMonitoringTrait: GoogleHomeTypes.Matter.HepaFilterMonitoringTrait?
    public let pressureMeasurementTrait: GoogleHomeTypes.Matter.PressureMeasurementTrait?
    public let flowMeasurementTrait: GoogleHomeTypes.Matter.FlowMeasurementTrait?
    public let illuminanceMeasurementTrait: GoogleHomeTypes.Matter.IlluminanceMeasurementTrait?
    public let carbonDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait?
    public let totalVolatileOrganicCompoundsConcentrationMeasurementTrait: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait?
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
    public let pm25ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait?
    public let pm10ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait?
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWalletDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleWalletDeviceType.GoogleWalletGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWalletGoogleTraits : Swift.Sendable {
    public let locatorTrait: GoogleHomeTypes.Google.LocatorTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWaterHeaterDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GoogleWaterHeaterDeviceType.GoogleWaterHeaterMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWaterHeaterMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWaterLeakSensorDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let matterTraits: GoogleHomeTypes.GoogleWaterLeakSensorDeviceType.GoogleWaterLeakSensorMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWaterLeakSensorMatterTraits : Swift.Sendable {
    public let booleanStateTrait: GoogleHomeTypes.Matter.BooleanStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWaterPurifierDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleWaterPurifierDeviceType.GoogleWaterPurifierGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleWaterPurifierDeviceType.GoogleWaterPurifierMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWaterPurifierGoogleTraits : Swift.Sendable {
    public let preFilterMonitoringTrait: GoogleHomeTypes.Google.PreFilterMonitoringTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
  }
  public struct GoogleWaterPurifierMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWaterSoftenerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleWaterSoftenerDeviceType.GoogleWaterSoftenerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleWaterSoftenerDeviceType.GoogleWaterSoftenerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWaterSoftenerGoogleTraits : Swift.Sendable {
    public let preFilterMonitoringTrait: GoogleHomeTypes.Google.PreFilterMonitoringTrait?
    public let filterMonitoringTrait: GoogleHomeTypes.Google.FilterMonitoringTrait?
  }
  public struct GoogleWaterSoftenerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWeatherStationDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleWeatherStationDeviceType.GoogleWeatherStationGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleWeatherStationDeviceType.GoogleWeatherStationMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWeatherStationGoogleTraits : Swift.Sendable {
    public let extendedAirQualityTrait: GoogleHomeTypes.Google.ExtendedAirQualityTrait?
    public let smokeLevelConcentrationMeasurementTrait: GoogleHomeTypes.Google.SmokeLevelConcentrationMeasurementTrait?
  }
  public struct GoogleWeatherStationMatterTraits : Swift.Sendable {
    public let carbonMonoxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonMonoxideConcentrationMeasurementTrait?
    public let airQualityTrait: GoogleHomeTypes.Matter.AirQualityTrait?
    public let pressureMeasurementTrait: GoogleHomeTypes.Matter.PressureMeasurementTrait?
    public let carbonDioxideConcentrationMeasurementTrait: GoogleHomeTypes.Matter.CarbonDioxideConcentrationMeasurementTrait?
    public let totalVolatileOrganicCompoundsConcentrationMeasurementTrait: GoogleHomeTypes.Matter.TotalVolatileOrganicCompoundsConcentrationMeasurementTrait?
    public let pm25ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm25ConcentrationMeasurementTrait?
    public let pm10ConcentrationMeasurementTrait: GoogleHomeTypes.Matter.Pm10ConcentrationMeasurementTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWindowDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleWindowDeviceType.GoogleWindowGoogleTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWindowGoogleTraits : Swift.Sendable {
    public let lockUnlockTrait: GoogleHomeTypes.Google.LockUnlockTrait?
    public let openCloseTrait: GoogleHomeTypes.Google.OpenCloseTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleWineCellarDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleWineCellarDeviceType.GoogleWineCellarGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleWineCellarDeviceType.GoogleWineCellarMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleWineCellarGoogleTraits : Swift.Sendable {
    public let extendedTemperatureControlTrait: GoogleHomeTypes.Google.ExtendedTemperatureControlTrait?
  }
  public struct GoogleWineCellarMatterTraits : Swift.Sendable {
    public let temperatureControlTrait: GoogleHomeTypes.Matter.TemperatureControlTrait?
    public let temperatureMeasurementTrait: GoogleHomeTypes.Matter.TemperatureMeasurementTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleYogurtmakerDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public let googleTraits: GoogleHomeTypes.GoogleYogurtmakerDeviceType.GoogleYogurtmakerGoogleTraits
  public let matterTraits: GoogleHomeTypes.GoogleYogurtmakerDeviceType.GoogleYogurtmakerMatterTraits
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public struct GoogleYogurtmakerGoogleTraits : Swift.Sendable {
    public let cookTrait: GoogleHomeTypes.Google.CookTrait?
    public let timerTrait: GoogleHomeTypes.Google.TimerTrait?
    public let extendedOperationalStateTrait: GoogleHomeTypes.Google.ExtendedOperationalStateTrait?
  }
  public struct GoogleYogurtmakerMatterTraits : Swift.Sendable {
    public let onOffTrait: GoogleHomeTypes.Matter.OnOffTrait?
    public let operationalStateTrait: GoogleHomeTypes.Matter.OperationalStateTrait?
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GoogleHubDeviceType : GoogleHomeSDK.DeviceType {
  public static let identifier: Swift.String
  public let metadata: GoogleHomeSDK.DeviceTypeMetadata
  public let traits: GoogleHomeSDK.TraitCollection
  public let events: any GoogleHomeSDK.EventController
  public init(traits: GoogleHomeSDK.TraitCollection, eventController: any GoogleHomeSDK.EventController, metadataBuilder: ([any GoogleHomeSDK.Trait]?) -> GoogleHomeSDK.DeviceTypeMetadata) throws
  public var debugDescription: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct BrightnessTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.BrightnessTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.BrightnessTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentBrightnessPercent) public var currentBrightnessPercent: Swift.UInt8? {
      get
    }
    public var $currentBrightnessPercent: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.BrightnessTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.BrightnessTrait, rhs: GoogleHomeTypes.Google.BrightnessTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.BrightnessTrait.Attributes, rhs: GoogleHomeTypes.Google.BrightnessTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait {
  public var supportsMoveToBrightnessCommand: Swift.Bool {
    get
  }
  public func moveToBrightness(brightnessPercent: Swift.UInt8) async throws
  public func moveToBrightnessBatchable(brightnessPercent: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToBrightnessCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait {
  public var supportsBrightnessStepCommand: Swift.Bool {
    get
  }
  public func brightnessStep(stepMode: GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepModeEnum, step: Swift.UInt8) async throws
  public func brightnessStepBatchable(stepMode: GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepModeEnum, step: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct BrightnessStepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait {
  public enum BrightnessStepModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case increase
    case decrease
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentBrightnessPercent
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.BrightnessTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.BrightnessTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.BrightnessTrait {
  public var currentBrightnessPercent: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.BrightnessTrait.MoveToBrightnessCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case brightnessPercent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.BrightnessTrait.MoveToBrightnessCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.BrightnessTrait.MoveToBrightnessCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case step
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.BrightnessTrait {
  public static func moveToBrightness(brightnessPercent: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func brightnessStep(stepMode: GoogleHomeTypes.Google.BrightnessTrait.BrightnessStepModeEnum, step: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct SimplifiedOnOffTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($onOff) public var onOff: GoogleHomeTypes.Google.SimplifiedOnOffTrait.OnOffEnum? {
      get
    }
    public var $onOff: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SimplifiedOnOffTrait.OnOffEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SimplifiedOnOffTrait, rhs: GoogleHomeTypes.Google.SimplifiedOnOffTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attributes, rhs: GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait {
  public enum OnOffEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case on
    case off
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SimplifiedOnOffTrait.OnOffEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SimplifiedOnOffTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case onOff
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SimplifiedOnOffTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SimplifiedOnOffTrait {
  public var onOff: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SimplifiedOnOffTrait.OnOffEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct SimplifiedThermostatTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($systemMode) public var systemMode: GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum? {
      get
    }
    public var $systemMode: GoogleHomeSDK.TraitAttribute<GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SimplifiedThermostatTrait, rhs: GoogleHomeTypes.Google.SimplifiedThermostatTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attributes, rhs: GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait {
  public var supportsSetSystemModeCommand: Swift.Bool {
    get
  }
  public func setSystemMode(systemMode: GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum) async throws
  public func setSystemModeBatchable(systemMode: GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct SetSystemModeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait {
  public enum SystemModeEnum : Swift.UInt64, GoogleHomeSDK.Enum16, Swift.Sendable {
    case unspecified
    case off
    case auto
    case cool
    case heat
    case emergencyHeat
    case precooling
    case fanOnly
    case dry
    case sleep
    case eco
    case purifier
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt16
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case systemMode
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SimplifiedThermostatTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SimplifiedThermostatTrait {
  public var systemMode: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait.SetSystemModeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case systemMode
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SimplifiedThermostatTrait.SetSystemModeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SimplifiedThermostatTrait.SetSystemModeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.SimplifiedThermostatTrait {
  public static func setSystemMode(systemMode: GoogleHomeTypes.Google.SimplifiedThermostatTrait.SystemModeEnum) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct SyntheticSwitchTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SyntheticSwitchTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SyntheticSwitchTrait, rhs: GoogleHomeTypes.Google.SyntheticSwitchTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SyntheticSwitchTrait.Attributes, rhs: GoogleHomeTypes.Google.SyntheticSwitchTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait {
  public struct ButtonPressEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let pressCount: Swift.UInt32?
      public let latchPosition: Swift.UInt32?
      public init(pressCount: Swift.UInt32?, latchPosition: Swift.UInt32?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent.Payload, b: GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent, b: GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LongPressStartEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressStartEvent.Payload, b: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressStartEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressStartEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressStartEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressStartEvent, b: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressStartEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LongPressReleaseEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public init()
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressReleaseEvent.Payload, b: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressReleaseEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public let payload: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressReleaseEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressReleaseEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressReleaseEvent, b: GoogleHomeTypes.Google.SyntheticSwitchTrait.LongPressReleaseEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SyntheticSwitchTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SyntheticSwitchTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SyntheticSwitchTrait {
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent {
  public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case pressCount
    case latchPosition
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent.EventFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent.EventFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SyntheticSwitchTrait.ButtonPressEvent {
  public var pressCount: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var latchPosition: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct VolumeTrait : GoogleHomeSDK.MatterTrait {
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static let supportedCommandTypes: [any GoogleHomeSDK.Command.Type]
    public static let identifier: Swift.String
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.VolumeTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.VolumeTrait : GoogleHomeSDK.ForceReadableTrait {
  public func forceRead() async throws
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public struct Attributes : Swift.Sendable {
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($attributeList) public var attributeList: [Swift.UInt32]? {
      get
    }
    public var $attributeList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($currentVolumePercent) public var currentVolumePercent: Swift.UInt8? {
      get
    }
    public var $currentVolumePercent: GoogleHomeSDK.TraitAttribute<Swift.UInt8> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($isMuted) public var isMuted: Swift.Bool? {
      get
    }
    public var $isMuted: GoogleHomeSDK.TraitAttribute<Swift.Bool> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($generatedCommandList) public var generatedCommandList: [Swift.UInt32]? {
      get
    }
    public var $generatedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($acceptedCommandList) public var acceptedCommandList: [Swift.UInt32]? {
      get
    }
    public var $acceptedCommandList: GoogleHomeSDK.TraitAttribute<[Swift.UInt32]> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($featureMap) public var featureMap: Swift.UInt32? {
      get
    }
    public var $featureMap: GoogleHomeSDK.TraitAttribute<Swift.UInt32> {
      get
    }
    @GoogleHomeSDK.TraitAttribute @_projectedValueProperty($clusterRevision) public var clusterRevision: Swift.UInt16? {
      get
    }
    public var $clusterRevision: GoogleHomeSDK.TraitAttribute<Swift.UInt16> {
      get
    }
  }
}
extension GoogleHomeTypes.Google.VolumeTrait.Attributes : GoogleHomeSDK.TraitEncodable {
  public static var identifier: Swift.String {
    get
  }
  public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
}
extension GoogleHomeTypes.Google.VolumeTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.VolumeTrait, rhs: GoogleHomeTypes.Google.VolumeTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.VolumeTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.VolumeTrait.Attributes, rhs: GoogleHomeTypes.Google.VolumeTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public var supportsMoveToVolumeCommand: Swift.Bool {
    get
  }
  public func moveToVolume(volumePercent: Swift.UInt8) async throws
  public func moveToVolumeBatchable(volumePercent: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MoveToVolumeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public var supportsVolumeStepCommand: Swift.Bool {
    get
  }
  public func volumeStep(stepMode: GoogleHomeTypes.Google.VolumeTrait.VolumeStepModeEnum, step: Swift.UInt8) async throws
  public func volumeStepBatchable(stepMode: GoogleHomeTypes.Google.VolumeTrait.VolumeStepModeEnum, step: Swift.UInt8) throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct VolumeStepCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public var supportsMuteCommand: Swift.Bool {
    get
  }
  public func mute() async throws
  public func muteBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct MuteCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public var supportsUnmuteCommand: Swift.Bool {
    get
  }
  public func unmute() async throws
  public func unmuteBatchable() throws -> GoogleHomeSDK.BatchableCommand<Swift.Void>
  public struct UnmuteCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
  }
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public enum VolumeStepModeEnum : Swift.UInt64, GoogleHomeSDK.Enum8, Swift.Sendable {
    case increase
    case decrease
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.VolumeTrait.VolumeStepModeEnum
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt8
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case currentVolumePercent
    case isMuted
    case generatedCommandList
    case acceptedCommandList
    case attributeList
    case featureMap
    case clusterRevision
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.VolumeTrait.Attribute]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.VolumeTrait.Attribute] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.VolumeTrait {
  public var currentVolumePercent: GoogleHomeSDK.TypedExpression<Swift.UInt8?> {
    get
  }
  public var isMuted: GoogleHomeSDK.TypedExpression<Swift.Bool> {
    get
  }
  public var generatedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var acceptedCommandList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var attributeList: GoogleHomeSDK.TypedExpression<[Swift.UInt32]> {
    get
  }
  public var featureMap: GoogleHomeSDK.TypedExpression<Swift.UInt32> {
    get
  }
  public var clusterRevision: GoogleHomeSDK.TypedExpression<Swift.UInt16> {
    get
  }
}
extension GoogleHomeTypes.Google.VolumeTrait.MoveToVolumeCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case volumePercent
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.VolumeTrait.MoveToVolumeCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.VolumeTrait.MoveToVolumeCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.VolumeTrait.VolumeStepCommand {
  public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field, Swift.CaseIterable {
    case stepMode
    case step
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias AllCases = [GoogleHomeTypes.Google.VolumeTrait.VolumeStepCommand.CommandRequestFields]
    public typealias RawValue = Swift.UInt32
    nonisolated public static var allCases: [GoogleHomeTypes.Google.VolumeTrait.VolumeStepCommand.CommandRequestFields] {
      get
    }
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeTypes.Google.VolumeTrait {
  public static func moveToVolume(volumePercent: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func volumeStep(stepMode: GoogleHomeTypes.Google.VolumeTrait.VolumeStepModeEnum, step: Swift.UInt8) -> GoogleHomeSDK.AutomationCommand
  public static func mute() -> GoogleHomeSDK.AutomationCommand
  public static func unmute() -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct DoorLockStructureTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.DoorLockStructureTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.DoorLockStructureTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DoorLockStructureTrait, rhs: GoogleHomeTypes.Google.DoorLockStructureTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait {
  public struct Attributes : Swift.Sendable {
    public let maxGuestsPerStructure: Swift.UInt32?
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case maxGuestsPerStructure
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DoorLockStructureTrait {
  public var maxGuestsPerStructure: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.DoorLockStructureTrait.Attributes, rhs: GoogleHomeTypes.Google.DoorLockStructureTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait {
  public struct Duration : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case seconds
      case nanos
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let seconds: Swift.Int64?
    public let nanos: Swift.Int32?
    public init()
    public init(seconds: Swift.Int64?, nanos: Swift.Int32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.Duration, b: GoogleHomeTypes.Google.DoorLockStructureTrait.Duration) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Timestamp : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case seconds
      case nanos
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let seconds: Swift.Int64?
    public let nanos: Swift.Int32?
    public init()
    public init(seconds: Swift.Int64?, nanos: Swift.Int32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp, b: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TimeOfDay : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case hours
      case minutes
      case seconds
      case nanos
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let hours: Swift.Int32?
    public let minutes: Swift.Int32?
    public let seconds: Swift.Int32?
    public let nanos: Swift.Int32?
    public init()
    public init(hours: Swift.Int32?, minutes: Swift.Int32?, seconds: Swift.Int32?, nanos: Swift.Int32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.TimeOfDay, b: GoogleHomeTypes.Google.DoorLockStructureTrait.TimeOfDay) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DailyRepeatingScheduleItem : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case daysOfWeekArray
      case startTime
      case duration
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let daysOfWeekArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.DayOfWeek]
    public let startTime: GoogleHomeTypes.Google.DoorLockStructureTrait.TimeOfDay?
    public let duration: GoogleHomeTypes.Google.DoorLockStructureTrait.Duration?
    public init()
    public init(daysOfWeekArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.DayOfWeek], startTime: GoogleHomeTypes.Google.DoorLockStructureTrait.TimeOfDay?, duration: GoogleHomeTypes.Google.DoorLockStructureTrait.Duration?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.DailyRepeatingScheduleItem, b: GoogleHomeTypes.Google.DoorLockStructureTrait.DailyRepeatingScheduleItem) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct TimeboxScheduleItem : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case startTime
      case endTime
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let startTime: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?
    public let endTime: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?
    public init()
    public init(startTime: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?, endTime: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.TimeboxScheduleItem, b: GoogleHomeTypes.Google.DoorLockStructureTrait.TimeboxScheduleItem) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BasicUserSchedule : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case dailyRepeatingSchedulesArray
      case timeBoxSchedulesArray
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let userId: Swift.String?
    public let dailyRepeatingSchedulesArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.DailyRepeatingScheduleItem]
    public let timeBoxSchedulesArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.TimeboxScheduleItem]
    public init()
    public init(userId: Swift.String?, dailyRepeatingSchedulesArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.DailyRepeatingScheduleItem], timeBoxSchedulesArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.TimeboxScheduleItem])
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule, b: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct UserPincode : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case gaiaId
      case phoenixUserId
      case pincode
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let gaiaId: Swift.String?
    public let phoenixUserId: Swift.String?
    public let pincode: Foundation.Data?
    public init()
    public init(gaiaId: Swift.String?, phoenixUserId: Swift.String?, pincode: Foundation.Data?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode, b: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct UserPincodeStatus : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case gaiaId
      case phoenixUserId
      case pincodeValid
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let gaiaId: Swift.String?
    public let phoenixUserId: Swift.String?
    public let pincodeValid: Swift.Bool?
    public init()
    public init(gaiaId: Swift.String?, phoenixUserId: Swift.String?, pincodeValid: Swift.Bool?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeStatus, b: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GuestInfo : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case name
      case status
      case schedule
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let userId: Swift.String?
    public let name: Swift.String?
    public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestStatus?
    public let schedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?
    public init()
    public init(userId: Swift.String?, name: Swift.String?, status: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestStatus?, schedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestInfo, b: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestInfo) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EpochKey : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case keyId
      case startTime
      case key
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let keyId: Swift.UInt32?
    public let startTime: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?
    public let key: Foundation.Data?
    public init()
    public init(keyId: Swift.UInt32?, startTime: GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?, key: Foundation.Data?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.EpochKey, b: GoogleHomeTypes.Google.DoorLockStructureTrait.EpochKey) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ApplicationMasterKey : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case applicationGroupGlobalId
      case applicationGroupShortId
      case key
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let applicationGroupGlobalId: Swift.UInt32?
    public let applicationGroupShortId: Swift.UInt32?
    public let key: Foundation.Data?
    public init()
    public init(applicationGroupGlobalId: Swift.UInt32?, applicationGroupShortId: Swift.UInt32?, key: Foundation.Data?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.ApplicationMasterKey, b: GoogleHomeTypes.Google.DoorLockStructureTrait.ApplicationMasterKey) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.Duration {
  public var seconds: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nanos: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp {
  public var seconds: GoogleHomeSDK.TypedExpression<Swift.Int64?> {
    get
  }
  public var nanos: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.TimeOfDay {
  public var hours: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var minutes: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var seconds: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var nanos: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.DailyRepeatingScheduleItem {
  public var daysOfWeekArray: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DoorLockStructureTrait.DayOfWeek]> {
    get
  }
  public var startTime: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.TimeOfDay?> {
    get
  }
  public var duration: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.Duration?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.TimeboxScheduleItem {
  public var startTime: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?> {
    get
  }
  public var endTime: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule {
  public var userId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var dailyRepeatingSchedulesArray: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DoorLockStructureTrait.DailyRepeatingScheduleItem]> {
    get
  }
  public var timeBoxSchedulesArray: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.DoorLockStructureTrait.TimeboxScheduleItem]> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode {
  public var gaiaId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var phoenixUserId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var pincode: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeStatus {
  public var gaiaId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var phoenixUserId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var pincodeValid: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.GuestInfo {
  public var userId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var status: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.GuestStatus?> {
    get
  }
  public var schedule: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.EpochKey {
  public var keyId: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var startTime: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.Timestamp?> {
    get
  }
  public var key: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.DoorLockStructureTrait.ApplicationMasterKey {
  public var applicationGroupGlobalId: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var applicationGroupShortId: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var key: GoogleHomeSDK.TypedExpression<Foundation.Data?> {
    get
  }
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait {
  public enum DayOfWeek : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case dayOfWeekUnspecified
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case sunday
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DoorLockStructureTrait.DayOfWeek
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PincodeChangeReason : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case pincodeChangeReasonUnspecified
    case pincodeChangeReasonUpdate
    case pincodeChangeReasonDeletion
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeChangeReason
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum GuestStatus : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case guestStatusUnspecified
    case guestStatusActive
    case guestStatusAccessExpired
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DoorLockStructureTrait.GuestStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum ScheduleResponseStatus : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case scheduleResponseStatusUnspecified
    case scheduleResponseStatusSuccess
    case scheduleResponseStatusDuplicateEntry
    case scheduleResponseStatusIndexOutOfRange
    case scheduleResponseStatusEmptyScheduleEntry
    case scheduleResponseStatusInvalidSchedule
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DoorLockStructureTrait.ScheduleResponseStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum PincodeResponseStatus : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case pincodeResponseStatusUnspecified
    case pincodeResponseStatusDuplicatePincode
    case pincodeResponseStatusTooManyPincodes
    case pincodeResponseStatusInvalidPincode
    case pincodeResponseStatusSuccessPincodeDeleted
    case pincodeResponseStatusSuccessPincodeStatus
    case pincodeResponseStatusDuplicateNonce
    case pincodeResponseStatusExceededRateLimit
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeResponseStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
  public enum GuestResponseStatus : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case guestResponseStatusUnspecified
    case guestResponseStatusSuccess
    case guestResponseStatusInternalFailure
    case guestResponseStatusCommandMissingParams
    case guestResponseStatusDupGuestName
    case guestResponseStatusLimitReached
    case guestResponseStatusDupPincode
    case guestResponseStatusGuestNotFound
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.DoorLockStructureTrait.GuestResponseStatus
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait {
  public typealias SetUserScheduleCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.SetUserScheduleCommand.Request
  public typealias SetUserScheduleCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.SetUserScheduleCommand.Response
  public struct SetUserScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let userSchedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.ScheduleResponseStatus?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userSchedule
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func setUserSchedule(userSchedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.SetUserScheduleCommandResponse
  public static func setUserSchedule(userSchedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias GetUserScheduleCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.GetUserScheduleCommand.Request
  public typealias GetUserScheduleCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.GetUserScheduleCommand.Response
  public struct GetUserScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let userId: Swift.String?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.ScheduleResponseStatus?
      public let userSchedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func getUserSchedule(userId: Swift.String?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.GetUserScheduleCommandResponse
  public static func getUserSchedule(userId: Swift.String?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias DeleteUserScheduleCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.DeleteUserScheduleCommand.Request
  public typealias DeleteUserScheduleCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.DeleteUserScheduleCommand.Response
  public struct DeleteUserScheduleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let userId: Swift.String?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.ScheduleResponseStatus?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func deleteUserSchedule(userId: Swift.String?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.DeleteUserScheduleCommandResponse
  public static func deleteUserSchedule(userId: Swift.String?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias SetUserPincodeCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.SetUserPincodeCommand.Request
  public typealias SetUserPincodeCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.SetUserPincodeCommand.Response
  public struct SetUserPincodeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let userPincode: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeResponseStatus?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userPincode
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func setUserPincode(userPincode: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.SetUserPincodeCommandResponse
  public static func setUserPincode(userPincode: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias GetUserPincodeCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.GetUserPincodeCommand.Request
  public typealias GetUserPincodeCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.GetUserPincodeCommand.Response
  public struct GetUserPincodeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let gaiaId: Swift.String?
      public let phoenixUserId: Swift.String?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let userPincode: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincode?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case gaiaId
      case phoenixUserId
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func getUserPincode(gaiaId: Swift.String?, phoenixUserId: Swift.String?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.GetUserPincodeCommandResponse
  public static func getUserPincode(gaiaId: Swift.String?, phoenixUserId: Swift.String?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias DeleteUserPincodeCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.DeleteUserPincodeCommand.Request
  public typealias DeleteUserPincodeCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.DeleteUserPincodeCommand.Response
  public struct DeleteUserPincodeCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let gaiaId: Swift.String?
      public let phoenixUserId: Swift.String?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeResponseStatus?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case gaiaId
      case phoenixUserId
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func deleteUserPincode(gaiaId: Swift.String?, phoenixUserId: Swift.String?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.DeleteUserPincodeCommandResponse
  public static func deleteUserPincode(gaiaId: Swift.String?, phoenixUserId: Swift.String?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias ListUserPincodeStatusCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.ListUserPincodeStatusCommand.Request
  public typealias ListUserPincodeStatusCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.ListUserPincodeStatusCommand.Response
  public struct ListUserPincodeStatusCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeResponseStatus?
      public let userPincodeStatusListArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeStatus]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func listUserPincodeStatus(vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.ListUserPincodeStatusCommandResponse
  public static func listUserPincodeStatus(vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias CreateGuestCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestCommand.Request
  public typealias CreateGuestCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestCommand.Response
  public struct CreateGuestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let name: Swift.String?
      public let pincode: Foundation.Data?
      public let schedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestResponseStatus?
      public let userId: Swift.String?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case name
      case pincode
      case schedule
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func createGuest(name: Swift.String?, pincode: Foundation.Data?, schedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestCommandResponse
  public static func createGuest(name: Swift.String?, pincode: Foundation.Data?, schedule: GoogleHomeTypes.Google.DoorLockStructureTrait.BasicUserSchedule?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias RemoveGuestCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.RemoveGuestCommand.Request
  public typealias RemoveGuestCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.RemoveGuestCommand.Response
  public struct RemoveGuestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let userId: Swift.String?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestResponseStatus?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func removeGuest(userId: Swift.String?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.RemoveGuestCommandResponse
  public static func removeGuest(userId: Swift.String?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias GetGuestCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.GetGuestCommand.Request
  public typealias GetGuestCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.GetGuestCommand.Response
  public struct GetGuestCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let userId: Swift.String?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestResponseStatus?
      public let guest: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestInfo?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func getGuest(userId: Swift.String?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.GetGuestCommandResponse
  public static func getGuest(userId: Swift.String?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias ListGuestsCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.ListGuestsCommand.Request
  public typealias ListGuestsCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.ListGuestsCommand.Response
  public struct ListGuestsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let status: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestResponseStatus?
      public let guestsArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.GuestInfo]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func listGuests(vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.ListGuestsCommandResponse
  public static func listGuests(vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias CrkExportCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.CrkExportCommand.Request
  public typealias CrkExportCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.CrkExportCommand.Response
  public struct CrkExportCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let structureId: Swift.String?
      public let keyExportRequest: Foundation.Data?
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let structureId: Swift.String?
      public let keyExportResponse: Foundation.Data?
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case structureId
      case keyExportRequest
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func crkExport(structureId: Swift.String?, keyExportRequest: Foundation.Data?, vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.CrkExportCommandResponse
  public static func crkExport(structureId: Swift.String?, keyExportRequest: Foundation.Data?, vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
  public typealias GetApplicationKeysCommandRequest = GoogleHomeTypes.Google.DoorLockStructureTrait.GetApplicationKeysCommand.Request
  public typealias GetApplicationKeysCommandResponse = GoogleHomeTypes.Google.DoorLockStructureTrait.GetApplicationKeysCommand.Response
  public struct GetApplicationKeysCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let vendorId: Swift.UInt32?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public let epochKeysArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.EpochKey]
      public let applicationMasterKeysArray: [GoogleHomeTypes.Google.DoorLockStructureTrait.ApplicationMasterKey]
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case vendorId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func getApplicationKeys(vendorId: Swift.UInt32?) async throws -> GoogleHomeTypes.Google.DoorLockStructureTrait.GetApplicationKeysCommandResponse
  public static func getApplicationKeys(vendorId: Swift.UInt32?) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google.DoorLockStructureTrait {
  public struct UserPincodeChangeEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let userId: Swift.String?
      public let reason: GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeChangeReason?
      public init(userId: Swift.String?, reason: GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeChangeReason?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent.Payload, b: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
      case userId
      case reason
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public static func userId(_ userId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent>
    public static func reason(_ reason: GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeChangeReason?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent>
    public let payload: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent, b: GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct CreateGuestEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let inviterId: Swift.String?
      public let structureId: Swift.String?
      public let guestId: Swift.String?
      public init(inviterId: Swift.String?, structureId: Swift.String?, guestId: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent.Payload, b: GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
      case inviterId
      case structureId
      case guestId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public static func inviterId(_ inviterId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent>
    public static func structureId(_ structureId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent>
    public static func guestId(_ guestId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent>
    public let payload: GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent, b: GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct GuestPincodeFirstUsedEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let structureId: Swift.String?
      public let userId: Swift.String?
      public let deviceId: Swift.String?
      public init(structureId: Swift.String?, userId: Swift.String?, deviceId: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent.Payload, b: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
      case structureId
      case userId
      case deviceId
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public static func structureId(_ structureId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent>
    public static func userId(_ userId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent>
    public static func deviceId(_ deviceId: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent>
    public let payload: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent, b: GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DoorLockStructureTrait.UserPincodeChangeEvent {
  public var userId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var reason: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.DoorLockStructureTrait.PincodeChangeReason?> {
    get
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DoorLockStructureTrait.CreateGuestEvent {
  public var inviterId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var structureId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var guestId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.DoorLockStructureTrait.GuestPincodeFirstUsedEvent {
  public var structureId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var userId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var deviceId: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct AreaAttendanceStateTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.AreaAttendanceStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.AreaAttendanceStateTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AreaAttendanceStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AreaAttendanceStateTrait, rhs: GoogleHomeTypes.Google.AreaAttendanceStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AreaAttendanceStateTrait {
  public struct Attributes : Swift.Sendable {
    public let attendanceState: GoogleHomeTypes.Google.AreaAttendanceStateTrait.AttendanceState?
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case attendanceState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.AreaAttendanceStateTrait {
  public var attendanceState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.AreaAttendanceStateTrait.AttendanceState?> {
    get
  }
}
extension GoogleHomeTypes.Google.AreaAttendanceStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AreaAttendanceStateTrait.Attributes, rhs: GoogleHomeTypes.Google.AreaAttendanceStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AreaAttendanceStateTrait {
  public enum AttendanceState : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case attendanceStateUnspecified
    case attendanceStateUnknown
    case attendanceStateNoHouseholdMembers
    case attendanceStateSomeHouseholdMembers
    case attendanceStateAllHouseholdMembers
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.AreaAttendanceStateTrait.AttendanceState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google {
  public struct AreaPresenceStateTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.AreaPresenceStateTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.AreaPresenceStateTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AreaPresenceStateTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AreaPresenceStateTrait, rhs: GoogleHomeTypes.Google.AreaPresenceStateTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AreaPresenceStateTrait {
  public struct Attributes : Swift.Sendable {
    public let presenceState: GoogleHomeTypes.Google.AreaPresenceStateTrait.PresenceState?
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case presenceState
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.AreaPresenceStateTrait {
  public var presenceState: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.AreaPresenceStateTrait.PresenceState?> {
    get
  }
}
extension GoogleHomeTypes.Google.AreaPresenceStateTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AreaPresenceStateTrait.Attributes, rhs: GoogleHomeTypes.Google.AreaPresenceStateTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AreaPresenceStateTrait {
  public enum PresenceState : Swift.UInt64, GoogleHomeSDK.PlatformEnum, Swift.Sendable {
    case presenceStateUnspecified
    case presenceStateOccupied
    case presenceStateVacant
    case unrecognized_
    public static func unrecognizedCase() -> GoogleHomeTypes.Google.AreaPresenceStateTrait.PresenceState
    public init?(rawValue: Swift.UInt64)
    public typealias OriginalValue = Swift.UInt32
    public typealias RawValue = Swift.UInt64
    public var rawValue: Swift.UInt64 {
      get
    }
  }
}
extension GoogleHomeTypes.Google {
  public struct SmokeCoStructureSettingsTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait, rhs: GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait {
  public struct Attributes : Swift.Sendable {
    public let phoneHushEnabled: Swift.Bool?
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case phoneHushEnabled
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait {
  public var phoneHushEnabled: GoogleHomeSDK.TypedExpression<Swift.Bool?> {
    get
  }
}
extension GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait.Attributes, rhs: GoogleHomeTypes.Google.SmokeCoStructureSettingsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct AssistantBroadcastTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.AssistantBroadcastTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AssistantBroadcastTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AssistantBroadcastTrait, rhs: GoogleHomeTypes.Google.AssistantBroadcastTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantBroadcastTrait {
  public struct Attributes : Swift.Sendable {
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AssistantBroadcastTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AssistantBroadcastTrait.Attributes, rhs: GoogleHomeTypes.Google.AssistantBroadcastTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantBroadcastTrait {
  public typealias BroadcastCommandRequest = GoogleHomeTypes.Google.AssistantBroadcastTrait.BroadcastCommand.Request
  public typealias BroadcastCommandResponse = GoogleHomeTypes.Google.AssistantBroadcastTrait.BroadcastCommand.Response
  public struct BroadcastCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let msg: Swift.String?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case msg
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func broadcast(msg: Swift.String?) async throws -> GoogleHomeTypes.Google.AssistantBroadcastTrait.BroadcastCommandResponse
  public static func broadcast(msg: Swift.String?) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct AssistantFulfillmentTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.AssistantFulfillmentTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AssistantFulfillmentTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AssistantFulfillmentTrait, rhs: GoogleHomeTypes.Google.AssistantFulfillmentTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantFulfillmentTrait {
  public struct Attributes : Swift.Sendable {
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.AssistantFulfillmentTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.AssistantFulfillmentTrait.Attributes, rhs: GoogleHomeTypes.Google.AssistantFulfillmentTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.AssistantFulfillmentTrait {
  public typealias OkGoogleCommandRequest = GoogleHomeTypes.Google.AssistantFulfillmentTrait.OkGoogleCommand.Request
  public typealias OkGoogleCommandResponse = GoogleHomeTypes.Google.AssistantFulfillmentTrait.OkGoogleCommand.Response
  public struct OkGoogleCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let query: Swift.String?
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case query
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func okGoogle(query: Swift.String?) async throws -> GoogleHomeTypes.Google.AssistantFulfillmentTrait.OkGoogleCommandResponse
  public static func okGoogle(query: Swift.String?) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct ColorPresetsTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.ColorPresetsTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.ColorPresetsTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func update(_ block: (GoogleHomeTypes.Google.ColorPresetsTrait.MutableAttributes) -> Swift.Void) async throws -> GoogleHomeTypes.Google.ColorPresetsTrait
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.ColorPresetsTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ColorPresetsTrait, rhs: GoogleHomeTypes.Google.ColorPresetsTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ColorPresetsTrait {
  public struct Attributes : Swift.Sendable {
    public let currentPresetsArray: [GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset]
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func apply(_ update: GoogleHomeTypes.Google.ColorPresetsTrait.MutableAttributes) -> GoogleHomeTypes.Google.ColorPresetsTrait.Attributes
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case currentPresetsArray
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  @_hasMissingDesignatedInitializers final public class MutableAttributes : GoogleHomeSDK.TraitEncodable {
    public static let identifier: Swift.String
    final public var currentPresetsArray: [GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset]
    final public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    @objc deinit
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.ColorPresetsTrait {
  public var currentPresetsArray: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset]> {
    get
  }
}
extension GoogleHomeSDK.Updater where T == GoogleHomeTypes.Google.ColorPresetsTrait {
  final public func setCurrentPresetsArray(_ value: [GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset])
}
extension GoogleHomeTypes.Google.ColorPresetsTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.ColorPresetsTrait.Attributes, rhs: GoogleHomeTypes.Google.ColorPresetsTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.ColorPresetsTrait {
  public struct SpectrumColorXY : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case currentX
      case currentY
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let currentX: Swift.UInt32?
    public let currentY: Swift.UInt32?
    public init()
    public init(currentX: Swift.UInt32?, currentY: Swift.UInt32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ColorPresetsTrait.SpectrumColorXY, b: GoogleHomeTypes.Google.ColorPresetsTrait.SpectrumColorXY) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ColorTemperature : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case colorTemperatureMireds
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let colorTemperatureMireds: Swift.UInt32?
    public init()
    public init(colorTemperatureMireds: Swift.UInt32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ColorPresetsTrait.ColorTemperature, b: GoogleHomeTypes.Google.ColorPresetsTrait.ColorTemperature) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Color : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case spectrumColorXy
      case colorTemperature
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let spectrumColorXy: GoogleHomeTypes.Google.ColorPresetsTrait.SpectrumColorXY?
    public let colorTemperature: GoogleHomeTypes.Google.ColorPresetsTrait.ColorTemperature?
    public init()
    public init(spectrumColorXy: GoogleHomeTypes.Google.ColorPresetsTrait.SpectrumColorXY?, colorTemperature: GoogleHomeTypes.Google.ColorPresetsTrait.ColorTemperature?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ColorPresetsTrait.Color, b: GoogleHomeTypes.Google.ColorPresetsTrait.Color) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ColorPreset : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case identifier
      case name
      case colorArray
      case brightness
      case order
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let identifier: Swift.Int32?
    public let name: Swift.String?
    public let colorArray: [GoogleHomeTypes.Google.ColorPresetsTrait.Color]
    public let brightness: Swift.UInt32?
    public let order: Swift.UInt32?
    public init()
    public init(identifier: Swift.Int32?, name: Swift.String?, colorArray: [GoogleHomeTypes.Google.ColorPresetsTrait.Color], brightness: Swift.UInt32?, order: Swift.UInt32?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset, b: GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ColorPresetsTrait.SpectrumColorXY {
  public var currentX: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var currentY: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ColorPresetsTrait.ColorTemperature {
  public var colorTemperatureMireds: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ColorPresetsTrait.Color {
  public var spectrumColorXy: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ColorPresetsTrait.SpectrumColorXY?> {
    get
  }
  public var colorTemperature: GoogleHomeSDK.TypedExpression<GoogleHomeTypes.Google.ColorPresetsTrait.ColorTemperature?> {
    get
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.ColorPresetsTrait.ColorPreset {
  public var identifier: GoogleHomeSDK.TypedExpression<Swift.Int32?> {
    get
  }
  public var name: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var colorArray: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.ColorPresetsTrait.Color]> {
    get
  }
  public var brightness: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
  public var order: GoogleHomeSDK.TypedExpression<Swift.UInt32?> {
    get
  }
}
extension GoogleHomeTypes.Google {
  public struct NotificationTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.NotificationTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.NotificationTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.NotificationTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.NotificationTrait, rhs: GoogleHomeTypes.Google.NotificationTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.NotificationTrait {
  public struct Attributes : Swift.Sendable {
    public let structureMembersArray: [GoogleHomeTypes.Google.NotificationTrait.User]
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case structureMembersArray
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.NotificationTrait {
  public var structureMembersArray: GoogleHomeSDK.TypedExpression<[GoogleHomeTypes.Google.NotificationTrait.User]> {
    get
  }
}
extension GoogleHomeTypes.Google.NotificationTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.NotificationTrait.Attributes, rhs: GoogleHomeTypes.Google.NotificationTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.NotificationTrait {
  public struct User : Swift.Sendable, GoogleHomeSDK.StructDataRepresentable, GoogleHomeSDK.DefaultConstructible {
    public enum StructFields : Swift.UInt32, GoogleHomeSDK.Field {
      case name
      case email
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func structField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public let name: Swift.String?
    public let email: Swift.String?
    public init()
    public init(name: Swift.String?, email: Swift.String?)
    public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.NotificationTrait.User, b: GoogleHomeTypes.Google.NotificationTrait.User) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedExpression where V == GoogleHomeTypes.Google.NotificationTrait.User {
  public var name: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
  public var email: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
extension GoogleHomeTypes.Google.NotificationTrait {
  public typealias SendNotificationsCommandRequest = GoogleHomeTypes.Google.NotificationTrait.SendNotificationsCommand.Request
  public typealias SendNotificationsCommandResponse = GoogleHomeTypes.Google.NotificationTrait.SendNotificationsCommand.Response
  public struct SendNotificationsCommand : GoogleHomeSDK.Command {
    public static let identifier: GoogleHomeSDK.ScopedCommandID
    public struct Request : GoogleHomeSDK.CommandRequest {
      public let title: Swift.String?
      public let body: Swift.String?
      public let optInMemberEmailsArray: [Swift.String]
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    }
    public struct Response : GoogleHomeSDK.CommandResponse {
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
    }
    public enum CommandRequestFields : Swift.UInt32, GoogleHomeSDK.Field {
      case title
      case body
      case optInMemberEmailsArray
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func requestField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
  }
  public func sendNotifications(title: Swift.String?, body: Swift.String?, optInMemberEmailsArray: [Swift.String]) async throws -> GoogleHomeTypes.Google.NotificationTrait.SendNotificationsCommandResponse
  public static func sendNotifications(title: Swift.String?, body: Swift.String?, optInMemberEmailsArray: [Swift.String]) -> GoogleHomeSDK.AutomationCommand
}
extension GoogleHomeTypes.Google {
  public struct VoiceStarterTrait : GoogleHomeSDK.Trait {
    public static let identifier: Swift.String
    public static let supportedEventTypes: [any GoogleHomeSDK.Event.Type]
    public static var supportedCommandTypes: [any GoogleHomeSDK.Command.Type] {
      get
    }
    public let metadata: GoogleHomeSDK.TraitMetadata
    public let attributes: GoogleHomeTypes.Google.VoiceStarterTrait.Attributes
    public init(decoder: GoogleHomeSDK.TraitDecoder, interactionProxy: (any GoogleHomeSDK.InteractionProxy)?, metadata: GoogleHomeSDK.TraitMetadata) throws
    public init(attributes: GoogleHomeTypes.Google.VoiceStarterTrait.Attributes, interactionProxy: any GoogleHomeSDK.InteractionProxy, metadata: GoogleHomeSDK.TraitMetadata = TraitMetadata())
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
}
extension GoogleHomeTypes.Google.VoiceStarterTrait : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.VoiceStarterTrait, rhs: GoogleHomeTypes.Google.VoiceStarterTrait) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.VoiceStarterTrait {
  public struct Attributes : Swift.Sendable {
    public let reservedQueriesArray: [Swift.String]
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
  }
  public enum Attribute : Swift.UInt32, GoogleHomeSDK.Field {
    case reservedQueriesArray
    public var id: Swift.UInt32 {
      get
    }
    public var type: GoogleHomeSDK.FieldType {
      get
    }
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public static func attribute(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.VoiceStarterTrait {
  public var reservedQueriesArray: GoogleHomeSDK.TypedExpression<[Swift.String]> {
    get
  }
}
extension GoogleHomeTypes.Google.VoiceStarterTrait.Attributes : Swift.Hashable {
  public static func == (lhs: GoogleHomeTypes.Google.VoiceStarterTrait.Attributes, rhs: GoogleHomeTypes.Google.VoiceStarterTrait.Attributes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoogleHomeTypes.Google.VoiceStarterTrait {
  public struct OkGoogleEvent : GoogleHomeSDK.Event, Swift.Hashable {
    public struct Payload : Swift.CustomDebugStringConvertible, Swift.Hashable, Swift.Sendable {
      public let query: Swift.String?
      public init(query: Swift.String?)
      public init(decoder: GoogleHomeSDK.TraitDecoder) throws
      public var debugDescription: Swift.String {
        get
      }
      public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent.Payload, b: GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent.Payload) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public static let identifier: GoogleHomeSDK.ScopedEventID
    public static let name: Swift.StaticString
    public enum EventFields : Swift.UInt32, GoogleHomeSDK.Field {
      case query
      public var id: Swift.UInt32 {
        get
      }
      public var type: GoogleHomeSDK.FieldType {
        get
      }
      public init?(rawValue: Swift.UInt32)
      public typealias RawValue = Swift.UInt32
      public var rawValue: Swift.UInt32 {
        get
      }
    }
    public static func eventField(id: Swift.UInt32) -> (any GoogleHomeSDK.Field)?
    public static func query(_ query: Swift.String?) -> GoogleHomeSDK.TypedParameter<GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent>
    public let payload: GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent.Payload
    public let timestamp: Foundation.TimeInterval
    public let importance: GoogleHomeSDK.EventImportance
    public let number: Swift.UInt
    public init(payload: GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent.Payload, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt)
    public init(decoder: GoogleHomeSDK.TraitDecoder, timestamp: Foundation.TimeInterval, importance: GoogleHomeSDK.EventImportance, number: Swift.UInt) throws
    public func encode(with encoder: GoogleHomeSDK.TraitEncoder) throws
    public var debugDescription: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent, b: GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension GoogleHomeSDK.TypedReference where T == GoogleHomeTypes.Google.VoiceStarterTrait.OkGoogleEvent {
  public var query: GoogleHomeSDK.TypedExpression<Swift.String?> {
    get
  }
}
